[{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\Mock_Data\\conduct_data.mock.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\Mock_Data\\test_data.mock.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\app.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\app.module.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\app.routing.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\code.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\code.response.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\conduct.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\conduct.module.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\conduct.routing.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\conduct.service.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\instructions\\instructions.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\instructions\\instructions.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\conduct\\instructions\\instructions.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { of as observableOf } from \"rxjs\";\nimport { InstructionsComponent } from \"./instructions.component\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport { TestBed, ComponentFixture, waitForAsync } from \"@angular/core/testing\";\nimport { ConductService } from \"../conduct.service\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { TestInstructions } from \"../testInstructions.model\";\nimport { TestConductHeaderComponent } from \"../shared/test-conduct-header/test-conduct-header.component\";\nimport { TestConductFooterComponent } from \"../shared/test-conduct-footer/test-conduct-footer.component\";\nimport { CoreModule } from \"../../core/core.module\";\n\nclass RouterStub {\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\ndescribe(\"Testing of conduct-instruction component:-\", () => {\n  let fixture: ComponentFixture<InstructionsComponent>;\n  let componentInstruction: InstructionsComponent;\n  const testLink = \"1Pu48OQy6d\";\n\n  const testInstructions = new TestInstructions();\n  testInstructions.duration = 5;\n  testInstructions.browserTolerance = 7;\n  testInstructions.correctMarks = 3;\n  testInstructions.incorrectMarks = 1;\n  testInstructions.totalNumberOfQuestions = 10;\n  testInstructions.categoryNameList = [\"Computer\", \"Aptitude\", \"Verbal\"];\n\n  beforeEach(\n    waitForAsync(() => {\n      void TestBed.configureTestingModule({\n        declarations: [\n          InstructionsComponent,\n          TestConductHeaderComponent,\n          TestConductFooterComponent,\n        ],\n\n        providers: [\n          ConductService,\n          { provide: Router, useClass: RouterStub },\n          { provide: ActivatedRoute, useclass: ActivatedRoute },\n        ],\n\n        imports: [BrowserModule, FormsModule, RouterModule, CoreModule],\n      }).compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(InstructionsComponent);\n    componentInstruction = fixture.componentInstance;\n  });\n\n  it(\"should return all instructions by test link\", () => {\n    spyOn(ConductService.prototype, \"getTestInstructionsByLink\").and.callFake(\n      () => {\n        return observableOf(testInstructions);\n      }\n    );\n    componentInstruction.getTestInstructionsByLink(testLink);\n    expect(componentInstruction.testInstructions.duration).toBe(5);\n    expect(componentInstruction.testInstructions.categoryNameList).toContain(\n      \"Aptitude\"\n    );\n  });\n\n  it(\"should display negativeSign if incorrect marks is not zero\", () => {\n    spyOn(ConductService.prototype, \"getTestInstructionsByLink\").and.callFake(\n      () => {\n        return observableOf(testInstructions);\n      }\n    );\n    componentInstruction.getTestInstructionsByLink(testLink);\n    expect(componentInstruction.negativeSign).toBe(\"-\");\n  });\n\n  it(\"should not display negativeSign if incorrect marks is zero\", () => {\n    testInstructions.incorrectMarks = 0;\n    spyOn(ConductService.prototype, \"getTestInstructionsByLink\").and.callFake(\n      () => {\n        return observableOf(testInstructions);\n      }\n    );\n    componentInstruction.getTestInstructionsByLink(testLink);\n    expect(componentInstruction.negativeSign).toBeUndefined();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\question_status.enum.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\register\\register.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\register\\register.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\register\\register.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\conduct\\register\\register.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { throwError as observableThrowError, of as observableOf } from \"rxjs\";\nimport {\n  TestBed,\n  ComponentFixture,\n  fakeAsync,\n  waitForAsync,\n} from \"@angular/core/testing\";\nimport { RegisterComponent } from \"./register.component\";\nimport { TestConductHeaderComponent } from \"../shared/test-conduct-header/test-conduct-header.component\";\nimport { TestConductFooterComponent } from \"../shared/test-conduct-footer/test-conduct-footer.component\";\nimport { CoreModule } from \"../../core/core.module\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport { ConductService } from \"../conduct.service\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { TestAttendees } from \"../register/register.model\";\nimport { ConnectionService } from \"../../core/connection.service\";\n\nclass RouterStub {\n  navigateByUrl(url: string) {\n    return url;\n  }\n  navigate() {\n    return true;\n  }\n  isActive() {\n    return true;\n  }\n}\n\nclass Error {\n  status = 404;\n}\n\ndescribe(\"Testing of conduct-register component:-\", () => {\n  let fixture: ComponentFixture<RegisterComponent>;\n  let registerComponent: RegisterComponent;\n  let router: Router;\n  let urls: any[];\n  const testLink = \"1Pu48OQy6d\";\n  const testAttendee: TestAttendees = {\n    email: \"Suparna@promactinfo.com\",\n    firstName: \"suparna\",\n    lastName: \"acharya\",\n    rollNumber: \"cse-055\",\n    contactNumber: \"9874563210\",\n  };\n\n  beforeEach(\n    waitForAsync(() => {\n      TestBed.configureTestingModule({\n        declarations: [\n          RegisterComponent,\n          TestConductHeaderComponent,\n          TestConductFooterComponent,\n        ],\n        providers: [\n          ConnectionService,\n          { provide: Router, useClass: RouterStub },\n          { provide: ConductService, useClass: ConductService },\n          { provide: ActivatedRoute, useclass: ActivatedRoute },\n        ],\n        imports: [BrowserModule, FormsModule, RouterModule, CoreModule],\n      }).compileComponents();\n    })\n  );\n  beforeEach(() => {\n    fixture = TestBed.createComponent(RegisterComponent);\n    registerComponent = fixture.componentInstance;\n    router = TestBed.get(Router);\n  });\n\n  it(\"should register a testattendee for a test and navigate to instructions page\", fakeAsync(() => {\n    spyOn(ConductService.prototype, \"registerTestAttendee\").and.callFake(() => {\n      return observableOf(testAttendee);\n    });\n    spyOn(ConnectionService.prototype, \"sendReport\").and.callFake(() => {});\n    spyOn(ConnectionService.prototype, \"registerAttendee\").and.callFake(\n      () => {}\n    );\n    spyOn(Router.prototype, \"navigate\").and.callFake(function (url: any[]) {\n      urls = url;\n      expect(urls[0]).toBe(\"/conduct/\" + testLink + \"/instructions\");\n    });\n\n    registerComponent.registerTestAttendee();\n  }));\n\n  it(\"should throw error message if registration fails\", () => {\n    spyOn(ConductService.prototype, \"registerTestAttendee\").and.callFake(() => {\n      return observableThrowError(new Error());\n    });\n    registerComponent.registerTestAttendee();\n    expect(registerComponent.isErrorMessage).toBeTruthy();\n  });\n\n  it(\"should throw different error message if error status is different\", () => {\n    const error = new Error();\n    error.status = 500;\n    spyOn(ConductService.prototype, \"registerTestAttendee\").and.callFake(() => {\n      return observableThrowError(error);\n    });\n    registerComponent.registerTestAttendee();\n    expect(registerComponent.registerTestAttendee).toThrowError();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\session.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\shared\\test-conduct-footer\\test-conduct-footer.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\shared\\test-conduct-header\\test-conduct-header.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\test-end\\test-end.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\test-summary\\test-summary.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\test-summary\\tests-summary.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\conduct\\test-summary\\tests-summary.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { of as observableOf, Observable } from \"rxjs\";\nimport { ComponentFixture, TestBed, tick } from \"@angular/core/testing\";\nimport { async, fakeAsync } from \"@angular/core/testing\";\nimport { TestSummaryComponent } from \"./test-summary.component\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport { HttpClient, HttpClientModule } from \"@angular/common/http\";\nimport { RouterModule, Router, ActivatedRoute, Params } from \"@angular/router\";\nimport {\n  MaterialModule,\n  MdDialogModule,\n  MdDialog,\n  MdDialogRef,\n  MdSnackBar,\n  MD_DIALOG_DATA,\n  OverlayRef,\n} from \"@angular/material\";\nimport { MockTestData, MockTestAttendee } from \"../../Mock_Data/test_data.mock\";\nimport { HttpService } from \"../../core/http.service\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserDynamicTestingModule } from \"@angular/platform-browser-dynamic/testing\";\nimport { ConductService } from \"../conduct.service\";\nimport { APP_BASE_HREF } from \"@angular/common\";\nimport { ReportService } from \"../../reports/report.service\";\nimport { TestConductFooterComponent } from \"../shared/test-conduct-footer/test-conduct-footer.component\";\nimport { TestConductHeaderComponent } from \"../shared/test-conduct-header/test-conduct-header.component\";\nimport { ConnectionService } from \"../../core/connection.service\";\n\nclass MockActivatedRoute {\n  params = observableOf({});\n}\n\ndescribe(\"Test Summary\", () => {\n  let fixture: ComponentFixture<TestSummaryComponent>;\n  let testSummary: TestSummaryComponent;\n  let mockTestAttendee: any;\n  let routTo: any[];\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [\n        TestSummaryComponent,\n        TestConductFooterComponent,\n        TestConductHeaderComponent,\n      ],\n      imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        MaterialModule,\n        HttpClientModule,\n        BrowserAnimationsModule,\n        MdDialogModule,\n      ],\n      providers: [\n        ConnectionService,\n        ConductService,\n        HttpService,\n        ReportService,\n        ConductService,\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        { provide: ActivatedRoute, useClass: MockActivatedRoute },\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    spyOn(Router.prototype, \"navigate\").and.callFake((route: any[]) => {\n      routTo = route;\n    });\n    mockTestAttendee = JSON.parse(JSON.stringify(MockTestAttendee));\n    fixture = TestBed.createComponent(TestSummaryComponent);\n    testSummary = fixture.componentInstance;\n    // spyOn(ConductService.prototype, 'getTestSummary').and.returnValue(Observable.of());\n    spyOn(ConductService.prototype, \"getTestAttendeeByTestId\").and.returnValue(\n      observableOf(MockTestAttendee)\n    );\n  });\n\n  it(\"sendRequestForResume\", () => {\n    spyOn(ReportService.prototype, \"updateCandidateInfo\").and.returnValue(\n      observableOf(true)\n    );\n    spyOn(MdSnackBar.prototype, \"open\").and.callThrough();\n    testSummary.testAttendee = mockTestAttendee;\n    testSummary.sendRequestForResume();\n    expect(MdSnackBar.prototype.open).toHaveBeenCalledTimes(1);\n    expect(testSummary.testAttendee.report.isTestPausedUnWillingly).toBe(true);\n  });\n\n  it(\"getCandidateInfoToResumeTest\", () => {\n    mockTestAttendee.report.isAllowResume = true;\n    spyOn(ReportService.prototype, \"getInfoResumeTest\").and.returnValue(\n      observableOf(mockTestAttendee.report)\n    );\n    testSummary.getCandidateInfoToResumeTest();\n    expect(testSummary.isAllowed).toBe(true);\n  });\n\n  it(\"endYourTest\", () => {\n    spyOn(ReportService.prototype, \"createSessionForAttendee\").and.returnValue(\n      observableOf(true)\n    );\n    testSummary.endYourTest();\n    expect(routTo[0]).toBe(\"test-end\");\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\testInstructions.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\test\\test.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\conduct\\test\\test.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Subscription,\n} from \"rxjs\";\nimport { ComponentFixture, TestBed, waitForAsync } from \"@angular/core/testing\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserDynamicTestingModule } from \"@angular/platform-browser-dynamic/testing\";\nimport { RouterModule } from \"@angular/router\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { HttpService } from \"../../core/http.service\";\nimport { APP_BASE_HREF } from \"@angular/common\";\nimport { TestPreviewComponent } from \"../../tests/test-preview/test-preview.compponent\";\nimport { ConductService } from \"../conduct.service\";\nimport { QuestionStatus } from \"../question_status.enum\";\nimport { TestsProgrammingGuideDialogComponent } from \"./tests-programming-guide-dialog.component\";\nimport { AceEditorComponent } from \"ngx-ace-editor-wrapper\";\nimport \"brace\";\nimport \"brace/theme/cobalt\";\nimport \"brace/theme/monokai\";\nimport \"brace/theme/eclipse\";\nimport \"brace/theme/solarized_light\";\nimport \"brace/mode/java\";\nimport \"brace/mode/c_cpp\";\nimport { TestService } from \"../../tests/tests.service\";\nimport { PageNotFoundComponent } from \"../../page-not-found/page-not-found.component\";\nimport { TestComponent } from \"./test.component\";\nimport { PopoverModule } from \"ngx-bootstrap/popover\";\nimport { ClipboardModule } from \"ngx-clipboard\";\nimport { NgChartsModule } from \"ng2-charts\";\nimport {\n  FakeTest,\n  FakeTestQuestions,\n  FakeTestLogs,\n  FakeResumeData,\n  FakeBundleData,\n} from \"../../Mock_Data/conduct_data.mock\";\nimport { ConnectionService } from \"../../core/connection.service\";\nimport { MatDialogRef } from \"@angular/material/dialog/dialog-ref\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { MatExpansionModule } from \"@angular/material/expansion\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { TestQuestions } from \"../test_conduct.model\";\nimport { TestStatus } from \"../teststatus.enum\";\nimport { SingleMultipleAnswerQuestionOption } from \"../../questions/single-multiple-answer-question-option.model\";\nimport { Test } from \"app/tests/tests.model\";\n\nclass MockWindow {\n  public location: Location = { href: \"\" } as Location;\n}\n\ndescribe(\"Test Component\", () => {\n  let testComponent: TestComponent;\n  let fixture: ComponentFixture<TestComponent>;\n\n  class MockDialog {\n    open() {\n      return true;\n    }\n\n    close() {\n      return true;\n    }\n  }\n\n  beforeEach(\n    waitForAsync(async () => {\n      TestBed.overrideModule(BrowserDynamicTestingModule, {\n        set: {\n          entryComponents: [\n            TestComponent,\n            PageNotFoundComponent,\n            TestPreviewComponent,\n            TestsProgrammingGuideDialogComponent,\n            AceEditorComponent,\n          ],\n        },\n      });\n\n      await TestBed.configureTestingModule({\n        declarations: [\n          TestComponent,\n          PageNotFoundComponent,\n          TestPreviewComponent,\n          TestsProgrammingGuideDialogComponent,\n          AceEditorComponent,\n        ],\n\n        providers: [\n          ConnectionService,\n          TestService,\n          HttpService,\n          ConductService,\n          { provide: MatDialogRef, useClass: MockDialog },\n          { provide: APP_BASE_HREF, useValue: \"/\" },\n          { provide: window, useClass: MockWindow },\n        ],\n\n        imports: [\n          BrowserModule,\n          FormsModule,\n          RouterModule.forRoot([]),\n          HttpClientModule,\n          BrowserAnimationsModule,\n          PopoverModule,\n          ClipboardModule,\n          MatExpansionModule,\n          MatDialogModule,\n          NgChartsModule,\n        ],\n      }).compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(TestComponent);\n    testComponent = fixture.componentInstance;\n\n    spyOn(Window.prototype, \"addEventListener\").and.callFake(() => {\n      console.log(\"listener\");\n    });\n    spyOn(ConnectionService.prototype, \"sendReport\").and.callFake(() => {});\n    spyOn(ConnectionService.prototype, \"registerAttendee\").and.callFake(\n      () => {}\n    );\n    spyOn(ConnectionService.prototype, \"startConnection\").and.callFake(() => {\n      console.log(\"connection initiated\");\n    });\n    spyOn(ConductService.prototype, \"getElapsedTime\").and.callFake(() => {\n      return observableOf(4.5);\n    });\n  });\n\n  afterEach(() => {\n    fixture.destroy();\n  });\n\n  it(\"should get the elapsed time\", () => {\n    testComponent.getElapsedTime();\n\n    expect(testComponent.isTestReady).toBe(true);\n  });\n\n  it(\"should resume test\", () => {\n    spyOn(ConductService.prototype, \"getAnswer\").and.callFake(() =>\n      observableOf(FakeResumeData)\n    );\n    spyOn(TestComponent.prototype, \"navigateToQuestionIndex\").and.callFake(\n      () => {\n        return;\n      }\n    );\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    testComponent.resumeTest();\n\n    expect(testComponent.isInitializing).toBe(false);\n  });\n\n  it(\"should NOT resume test\", () => {\n    spyOn(ConductService.prototype, \"getAnswer\").and.callFake(() => {\n      return observableThrowError(Error);\n    });\n    spyOn(TestComponent.prototype, \"navigateToQuestionIndex\").and.callFake(\n      () => {\n        return;\n      }\n    );\n    spyOn(ConductService.prototype, \"setElapsedTime\").and.callFake(() =>\n      observableOf(100)\n    );\n\n    testComponent.resumeTest();\n\n    expect(testComponent.isInitializing).toBe(false);\n  });\n\n  it(\"should get Test bundle\", () => {\n    spyOn(ConductService.prototype, \"getTestBundle\").and.callFake(() =>\n      observableOf(FakeBundleData)\n    );\n\n    testComponent.getTestBundle(\"\");\n\n    expect(testComponent.testQuestions.length).toBe(2);\n    expect(testComponent.test.link).toBe(\"hjxJ4cQ2fI\");\n  });\n\n  it(\"should get Test status\", () => {\n    spyOn(ConductService.prototype, \"getTestStatus\").and.callFake(() =>\n      observableOf(TestStatus.allCandidates)\n    );\n    spyOn(TestComponent.prototype, \"resumeTest\").and.callFake(() => {\n      return observableOf();\n    });\n\n    testComponent.getTestStatus(1);\n\n    expect(testComponent.resumeTest).toHaveBeenCalledWith();\n  });\n\n  it(\"should add answer\", () => {\n    spyOn(ConductService.prototype, \"addAnswer\").and.callFake(() =>\n      observableOf()\n    );\n    spyOn(TestComponent.prototype, \"markAsAnswered\").and.callFake(() => {\n      return;\n    });\n\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    testComponent.testTypePreview = false;\n    testComponent.addAnswer(testComponent.testQuestions[0]);\n\n    expect(testComponent.isTestReady).toBe(true);\n\n    testComponent.addAnswer(testComponent.testQuestions[1]);\n\n    expect(testComponent.isTestReady).toBe(true);\n\n    const smaOption = testComponent.testQuestions[1].question\n      .singleMultipleAnswerQuestion\n      ?.singleMultipleAnswerQuestionOption[0] as SingleMultipleAnswerQuestionOption;\n    smaOption.isAnswer = true;\n    testComponent.addAnswer(testComponent.testQuestions[1]);\n\n    expect(testComponent.isTestReady).toBe(true);\n  });\n\n  it(\"should mark question for review\", () => {\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    testComponent.markAsReview(0);\n\n    expect(testComponent.testQuestions[0].questionStatus).toBe(\n      QuestionStatus.review\n    );\n  });\n\n  it(\"should mark question for review part 2\", () => {\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    testComponent.questionStatus = QuestionStatus.review;\n    testComponent.markAsReview(0);\n\n    expect(testComponent.testQuestions[0].questionStatus).toBe(\n      QuestionStatus.selected\n    );\n  });\n\n  it(\"should mark question for review part 3\", () => {\n    spyOn(ConductService.prototype, \"addAnswer\").and.callFake(() =>\n      observableOf()\n    );\n\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    testComponent.questionStatus = QuestionStatus.review;\n    testComponent.addAnswer(testComponent.testQuestions[0]);\n    testComponent.testAnswers[0].code.codeResponse.message = \"res\";\n    testComponent.markAsReview(0);\n\n    expect(testComponent.testQuestions[0].questionStatus).toBe(\n      QuestionStatus.selected\n    );\n  });\n\n  it(\"should mark question as answered\", () => {\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    testComponent.markAsAnswered(0);\n\n    expect(testComponent.testQuestions[0].questionStatus).toBe(\n      QuestionStatus.answered\n    );\n  });\n\n  it(\"should clear response\", () => {\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    testComponent.clearResponse(0);\n\n    expect(testComponent.codeAnswer).toContain(\"public static void main\"); // Java\n  });\n\n  it(\"should select option (Single Option Type)\", () => {\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    testComponent.selectOption(1, 0, true);\n\n    expect(\n      testComponent.testQuestions[1].question.singleMultipleAnswerQuestion\n        ?.singleMultipleAnswerQuestionOption[0].isAnswer\n    ).toBeTruthy();\n  });\n\n  it(\"should select option (Multiple Option Type)\", () => {\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    testComponent.selectOption(1, 0, false);\n\n    expect(\n      testComponent.testQuestions[1].question.singleMultipleAnswerQuestion\n        ?.singleMultipleAnswerQuestionOption[0].isAnswer\n    ).toBeTruthy();\n  });\n\n  it(\"should select option (Multiple Option Type) part 2\", () => {\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    const smaQuestionOption = testComponent.testQuestions[1].question\n      .singleMultipleAnswerQuestion\n      ?.singleMultipleAnswerQuestionOption[0] as SingleMultipleAnswerQuestionOption;\n    smaQuestionOption.isAnswer = true;\n    testComponent.selectOption(1, 0, false);\n\n    expect(\n      testComponent.testQuestions[1].question.singleMultipleAnswerQuestion\n        ?.singleMultipleAnswerQuestionOption[0].isAnswer\n    ).toBeFalsy();\n  });\n\n  it(\"should navigate to other question\", () => {\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n    testComponent.questionIndex = -1;\n    testComponent.navigateToQuestionIndex(-1);\n    testComponent.navigateToQuestionIndex(0);\n    testComponent.navigateToQuestionIndex(1);\n\n    expect(testComponent.isTestReady).toBeTruthy();\n\n    testComponent.navigateToQuestionIndex(0);\n\n    expect(testComponent.isTestReady).toBeTruthy();\n\n    testComponent.questionIndex = 0;\n    testComponent.navigateToQuestionIndex(0);\n\n    expect(testComponent.isTestReady).toBeTruthy();\n\n    testComponent.questionIndex = 0;\n    testComponent.questionStatus = QuestionStatus.review;\n    testComponent.navigateToQuestionIndex(1);\n\n    expect(testComponent.isTestReady).toBeTruthy();\n  });\n\n  it(\"should get question status\", () => {\n    testComponent.isCodeProcessing = true;\n    const ReturnedClass = testComponent.getQuestionStatus(\n      QuestionStatus.answered\n    );\n\n    expect(ReturnedClass).toBe(\"answered cursor-not-allowed\");\n  });\n\n  it(\n    \"should run support functions\",\n    waitForAsync(async () => {\n      spyOn(TestComponent.prototype, \"getClockInterval\").and.callFake(() => {\n        return new Subscription();\n      });\n\n      testComponent.testQuestions = JSON.parse(\n        JSON.stringify(FakeTestQuestions)\n      ) as TestQuestions[];\n\n      testComponent.questionIndex = 1;\n      const isLastQuestion = testComponent.isLastQuestion();\n\n      expect(isLastQuestion).toBeTruthy();\n\n      testComponent.ifOnline();\n\n      expect(testComponent.isTestReady).toBeFalsy();\n\n      await testComponent.goOnline();\n\n      expect(testComponent.getClockInterval).toHaveBeenCalledWith();\n\n      testComponent.openProgramGuide();\n\n      testComponent.onChange(\"abcd\");\n\n      expect(testComponent.codeAnswer).toBe(\"abcd\");\n    })\n  );\n\n  it(\"should count down\", () => {\n    spyOn(ConductService.prototype, \"setElapsedTime\").and.callFake(() => {\n      return observableOf();\n    });\n    spyOn(ConductService.prototype, \"setAttendeeBrowserToleranceValue\")\n      .withArgs(10, 20)\n      .and.callFake(() => observableOf(1));\n    spyOn(TestComponent.prototype, \"addAnswer\").and.callFake(() => {\n      return;\n    });\n    spyOn(ConductService.prototype, \"addTestLogs\").and.callFake(() =>\n      observableOf(FakeTestLogs)\n    );\n    spyOn(ConductService.prototype, \"setTestStatus\").and.callFake(() => {\n      return observableOf(1);\n    });\n\n    testComponent.test = JSON.parse(JSON.stringify(FakeTest)) as Test;\n    testComponent.questionIndex = 0;\n    testComponent.questionStatus = QuestionStatus.answered;\n    testComponent.testQuestions = JSON.parse(\n      JSON.stringify(FakeTestQuestions)\n    ) as TestQuestions[];\n\n    // Hack: Calling private method\n    void testComponent[\"countDown\"]();\n\n    expect(\n      ConductService.prototype.setAttendeeBrowserToleranceValue\n    ).toHaveBeenCalledWith(10, 20);\n  });\n\n  it(\"should change editor language\", () => {\n    spyOn(ConductService.prototype, \"addAnswer\").and.callFake(() =>\n      observableOf()\n    );\n\n    void fixture.whenStable().then(() => {\n      testComponent.questionIndex = 0;\n      testComponent.testQuestions = JSON.parse(\n        JSON.stringify(FakeTestQuestions)\n      ) as TestQuestions[];\n      testComponent.addAnswer(testComponent.testQuestions[0]);\n      testComponent.testAnswers[0].code.language = \"c\";\n      testComponent.changeLanguage(\"c\");\n\n      expect(testComponent.editor._mode).toBe(\"c\");\n    });\n  });\n\n  it(\n    \"should change editor language part 2\",\n    waitForAsync(async () => {\n      await fixture.whenStable();\n      testComponent.selectLanguage = \"cpp\";\n      testComponent.changeLanguage(\"cpp\");\n\n      expect(testComponent.editor._mode).toBe(\"cpp\");\n    })\n  );\n\n  it(\n    \"should change editor theme\",\n    waitForAsync(async () => {\n      await fixture.whenStable();\n      testComponent.changeTheme(\"eclipse\");\n\n      expect(testComponent.editor._theme).toBe(\"eclipse\");\n    })\n  );\n\n  it(\"should save test logs\", () => {\n    spyOn(ConductService.prototype, \"addTestLogs\").and.callFake(() => {\n      return observableOf(FakeTestLogs);\n    });\n\n    testComponent.saveTestLogs();\n\n    expect(testComponent.testLogs.resumeTest).toBe(FakeTestLogs.resumeTest);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\test\\test.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\test\\tests-programming-guide-dialog.component.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[217,220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[217,220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"﻿import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"tests-programming-guide-dialog\",\n  templateUrl: \"tests.programming-guide.html\",\n})\nexport class TestsProgrammingGuideDialogComponent {\n  response: any;\n  isDeleteAllowed!: boolean;\n  errorMessage!: string;\n  successMessage!: string;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  constructor() {}\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\test_answer.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\test_attendee.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\test_bundle_model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\test_conduct.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\conduct\\teststatus.enum.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\core\\connection.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[527,530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[527,530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[581,584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[581,584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[738,741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[738,741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[799,802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[799,802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"﻿import { Injectable, EventEmitter, NgZone } from \"@angular/core\";\n\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\nimport { TestAttendeeAc } from \"app/reports/testAttendeeAc\";\n\n// This service is used as a middleware of the communication between clinet ans server hub in real time\n@Injectable()\nexport class ConnectionService {\n  hubConnection: signalR.HubConnection;\n  isConnected: boolean;\n  forceClose!: boolean;\n\n  public recievedAttendee: EventEmitter<TestAttendeeAc>;\n  public recievedAttendeeId: EventEmitter<any>;\n  public recievedEstimatedEndTime: EventEmitter<any>;\n\n  constructor(private _zone: NgZone) {\n    this.recievedAttendee = new EventEmitter<TestAttendeeAc>();\n    this.recievedAttendeeId = new EventEmitter<any>();\n    this.recievedEstimatedEndTime = new EventEmitter<any>();\n    // makes a connection with hub\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(\"/TrappistHub\")\n      .build();\n    this.registerProxy();\n    this.isConnected = false;\n  }\n  // This method defines that what action should be taken when getReport and getRequest methods are invoked from the TrappistHub\n  registerProxy() {\n    this.hubConnection.on(\"getReport\", (testAttendee: TestAttendeeAc) => {\n      this._zone.run(() => this.recievedAttendee.emit(testAttendee));\n    });\n    this.hubConnection.on(\"getAttendeeIdWhoRequestedForResumeTest\", (id) => {\n      this._zone.run(() => this.recievedAttendeeId.emit(id));\n    });\n    this.hubConnection.on(\"setEstimatedEndTime\", (remainingTime) => {\n      this._zone.run(() => this.recievedEstimatedEndTime.emit(remainingTime));\n    });\n    this.hubConnection.onclose(() => {\n      this.isConnected = false;\n      if (!this.forceClose) void this.startConnection();\n    });\n  }\n\n  // starts the connection between hub and client\n  async startConnection(_callback?: () => Promise<void>) {\n    if (!this.isConnected) {\n      // makes a connection with hub\n      this.hubConnection = new HubConnectionBuilder()\n        .withUrl(\"/TrappistHub\")\n        .build();\n      this.registerProxy();\n      await this.hubConnection.start();\n      this.isConnected = true;\n      if (_callback) await _callback();\n    }\n  }\n\n  async stopConnection(_callback?: () => void) {\n    if (this.isConnected) {\n      await this.hubConnection.stop();\n      this.isConnected = false;\n      this.forceClose = true;\n      if (_callback) _callback();\n      console.log(\"Stopped\");\n    }\n  }\n\n  isHubConnected() {\n    return this.isConnected;\n  }\n\n  // This method sends the testAttendee object to the hub method SendReport\n  async sendReport(testAttendee) {\n    await this.hubConnection.invoke(\"sendReport\", testAttendee);\n  }\n  // Sends the id of candidate to the hub method sendRequest\n  async sendCandidateIdWhoRequestedForResumeTest(attendeeId: number) {\n    await this.hubConnection.invoke(\n      \"sendCandidateIdWhoRequestedForResumeTest\",\n      attendeeId\n    );\n  }\n\n  getReport(testAttendee: TestAttendeeAc) {\n    return testAttendee;\n  }\n\n  getAttendeeIdWhoRequestedForResumeTest(attendeeId: number) {\n    return attendeeId;\n  }\n\n  async registerAttendee(id: number) {\n    await this.hubConnection.invoke(\"registerAttendee\", id);\n  }\n\n  async addTestLogs(id: number) {\n    await this.hubConnection.invoke(\"addTestLogs\", id);\n  }\n\n  async updateExpectedEndTime(seconds: number, testId: number) {\n    await this.hubConnection.invoke(\"GetExpectedEndTime\", seconds, testId);\n  }\n\n  setEstimatedEndTime(time: Date) {\n    return time;\n  }\n\n  async joinAdminGroup() {\n    await this.hubConnection.invoke(\"JoinAdminGroup\");\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\core\\core.module.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\core\\http.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[441,444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[441,444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class HttpService {\n  //private readonly httpOptions: HttpParamsOptions;\n  constructor(private readonly http: HttpClient) {\n    // Prevent request caching for internet explorer\n  }\n\n  get<T>(url: string): Observable<T> {\n    return this.http.get<T>(url);\n  }\n\n  post<T>(url: string, body: any): Observable<T> {\n    return this.http.post<T>(url, body);\n  }\n\n  put<T>(url: string, body: T): Observable<T> {\n    return this.http.put<T>(url, body);\n  }\n\n  delete<T>(url: string): Observable<T> {\n    return this.http.delete<T>(url);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\environments\\environment.prod.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\environments\\environment.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\main.conduct.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\main.setup.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\main.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\page-not-found\\page-not-found.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\password.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile-dashboard\\change-password-dialog.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile-dashboard\\change-password-dialog.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\profile\\profile-dashboard\\change-password-dialog.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n} from \"rxjs\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport {\n  TestBed,\n  async,\n  fakeAsync,\n  ComponentFixture,\n  tick,\n} from \"@angular/core/testing\";\n\nimport { MaterialModule, MdDialogModule, MdDialogRef } from \"@angular/material\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { HttpService } from \"../../core/http.service\";\nimport { CoreModule } from \"../../core/core.module\";\nimport { DebugElement } from \"@angular/core/core\";\nimport { ChangePasswordDialogComponent } from \"./change-password-dialog.component\";\nimport { ProfileService } from \"../profile.service\";\nimport { ChangePasswordModel } from \"../password.model\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { HttpModule } from \"@angular/http\";\n\nclass RouterStub {\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\nclass MockDialog {\n  open() {\n    return true;\n  }\n\n  close() {\n    return true;\n  }\n}\n\nclass MockError {\n  json(): Observable<any> {\n    return observableOf({ error: [\"old password is wrong\"] });\n  }\n}\n\ndescribe(\"Testing of change-password component:-\", () => {\n  let fixture: ComponentFixture<ChangePasswordDialogComponent>;\n  let changePasswordComponent: ChangePasswordDialogComponent;\n\n  const changedPassword = new ChangePasswordModel();\n  changedPassword.oldPassword = \"Tyu@12345\";\n  changedPassword.newPassword = \"Abc@12345\";\n  changedPassword.confirmPassword = \"Abc@12345\";\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChangePasswordDialogComponent],\n\n      providers: [\n        ProfileService,\n        { provide: Router, useClass: RouterStub },\n        { provide: ActivatedRoute, useclass: ActivatedRoute },\n        { provide: MdDialogRef, useClass: MockDialog },\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        HttpModule,\n        RouterModule,\n        CoreModule,\n        MdDialogModule,\n        BrowserAnimationsModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ChangePasswordDialogComponent);\n    changePasswordComponent = fixture.componentInstance;\n  });\n\n  it(\"should check whether new and confirm pasword same or not and update it\", () => {\n    spyOn(ProfileService.prototype, \"updateUserPassword\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(changePasswordComponent.snackBar, \"open\").and.callThrough();\n    spyOn(changePasswordComponent.dialog, \"close\").and.callThrough();\n\n    changePasswordComponent.changePassword(changedPassword);\n    expect(changePasswordComponent.isPasswordSame).toBeTruthy();\n    expect(changePasswordComponent.dialog.close).toHaveBeenCalled();\n    expect(changePasswordComponent.snackBar.open).toHaveBeenCalled();\n  });\n\n  it(\"should throw error message if password update fails\", () => {\n    spyOn(ProfileService.prototype, \"updateUserPassword\").and.callFake(() => {\n      return observableThrowError(new MockError());\n    });\n    changePasswordComponent.changePassword(changedPassword);\n    expect(changePasswordComponent.errorCorrection).toBeTruthy();\n  });\n\n  it(\"should show error message if new and confirm pasword are not same\", () => {\n    spyOn(ProfileService.prototype, \"updateUserPassword\").and.callFake(() => {\n      return observableOf(false);\n    });\n    changedPassword.confirmPassword = \"Abv@123456\";\n    changePasswordComponent.changePassword(changedPassword);\n    expect(changePasswordComponent.isPasswordSame).toBeFalsy();\n  });\n\n  it(\"should check condition for showing error message\", () => {\n    changePasswordComponent.changeCurrentPassword();\n    expect(changePasswordComponent.isPasswordSame).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile-dashboard\\profile-dashboard.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile-dashboard\\profile-dashboard.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\profile\\profile-dashboard\\profile-dashboard.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { of as observableOf, Observable } from \"rxjs\";\nimport {\n  TestBed,\n  async,\n  ComponentFixture,\n  inject,\n} from \"@angular/core/testing\";\nimport { ProfileService } from \"../profile.service\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport { MaterialModule, MdDialogRef, MdDialogModule } from \"@angular/material\";\nimport { HttpModule } from \"@angular/http\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport { CoreModule } from \"../../core/core.module\";\nimport { ProfileDashboardComponent } from \"./profile-dashboard.component\";\nimport { ProfileComponent } from \"../profile.component\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { HttpService } from \"../../core/http.service\";\nimport { APP_BASE_HREF } from \"@angular/common\";\nimport { ApplicationUser } from \"../profile.model\";\nimport { ChangePasswordDialogComponent } from \"./change-password-dialog.component\";\n\nclass MockDialog {\n  open() {\n    return true;\n  }\n\n  close() {\n    return true;\n  }\n}\n\nclass RouterStub {\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\ndescribe(\"Testing of profile-dashboard component:-\", () => {\n  let dashboardfixture: ComponentFixture<ProfileDashboardComponent>;\n  let profileDashboardComponent: ProfileDashboardComponent;\n\n  const applicationUserDetails = new ApplicationUser();\n  applicationUserDetails.name = \"Suparna\";\n  applicationUserDetails.email = \"suparna@promactinfo.com\";\n  applicationUserDetails.organizationName = \"Promact\";\n  applicationUserDetails.phoneNumber = \"7896541230\";\n  beforeEach(async(() => {\n    TestBed.overrideModule(BrowserAnimationsModule, {\n      set: {\n        entryComponents: [ChangePasswordDialogComponent],\n      },\n    });\n\n    TestBed.configureTestingModule({\n      declarations: [ProfileDashboardComponent, ChangePasswordDialogComponent],\n\n      providers: [\n        ProfileService,\n        HttpService,\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        { provide: MdDialogRef, useClass: MockDialog },\n        { provide: ActivatedRoute },\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule.forRoot([]),\n        HttpModule,\n        CoreModule,\n        MdDialogModule,\n        BrowserAnimationsModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    dashboardfixture = TestBed.createComponent(ProfileDashboardComponent);\n    profileDashboardComponent = dashboardfixture.componentInstance;\n  });\n\n  it(\"should return the details of the application user\", () => {\n    spyOn(ProfileService.prototype, \"getUserDetails\").and.callFake(() => {\n      return observableOf(applicationUserDetails);\n    });\n    profileDashboardComponent.getUserDetails();\n    expect(profileDashboardComponent.user.name).toBe(\"Suparna\");\n  });\n\n  it(\"should open the change password dialog component\", () => {\n    spyOn(profileDashboardComponent.dialog, \"open\").and.callThrough();\n    profileDashboardComponent.changePasswordDialog();\n    expect(profileDashboardComponent.dialog.open).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile-edit\\profile-edit.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile-edit\\profile-edit.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\profile\\profile-edit\\profile-edit.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { of as observableOf, Observable } from \"rxjs\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport {\n  TestBed,\n  async,\n  fakeAsync,\n  ComponentFixture,\n  tick,\n} from \"@angular/core/testing\";\nimport { MaterialModule, MdSnackBar } from \"@angular/material\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { HttpService } from \"../../core/http.service\";\nimport { CoreModule } from \"../../core/core.module\";\nimport { DebugElement } from \"@angular/core/core\";\nimport { ProfileEditComponent } from \"./profile-edit.component\";\nimport { ProfileService } from \"../profile.service\";\nimport { ApplicationUser } from \"../profile.model\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\nclass RouterStub {\n  navigateByUrl(url: string) {\n    return url;\n  }\n  navigate() {\n    return true;\n  }\n}\n\ndescribe(\"Testing of profile-edit component:-\", () => {\n  let fixture: ComponentFixture<ProfileEditComponent>;\n  let profileEditComponent: ProfileEditComponent;\n\n  const applicationUserDetails = new ApplicationUser();\n  applicationUserDetails.name = \"Suparna\";\n  applicationUserDetails.email = \"suparna@promactinfo.com\";\n  applicationUserDetails.organizationName = null;\n  applicationUserDetails.phoneNumber = null;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ProfileEditComponent],\n\n      providers: [\n        ProfileService,\n        { provide: ActivatedRoute, useclass: ActivatedRoute },\n        { provide: Router, useClass: RouterStub },\n      ],\n\n      imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        MaterialModule,\n        RouterModule,\n        CoreModule,\n        BrowserAnimationsModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ProfileEditComponent);\n    profileEditComponent = fixture.componentInstance;\n  });\n\n  it(\"should return the user details\", () => {\n    spyOn(ProfileService.prototype, \"getUserDetails\").and.callFake(() => {\n      return observableOf(applicationUserDetails);\n    });\n    profileEditComponent.getUserDetails();\n    expect(profileEditComponent.editUser.name).toBe(\"Suparna\");\n  });\n\n  it(\"should update the user details\", () => {\n    applicationUserDetails.phoneNumber = \"7896541230\";\n    applicationUserDetails.organizationName = \"Promact\";\n    spyOn(ProfileService.prototype, \"updateUserDetails\").and.callFake(() => {\n      return observableOf(applicationUserDetails);\n    });\n    spyOn(MdSnackBar.prototype, \"open\").and.callThrough();\n    profileEditComponent.updateUserDetails();\n    expect(MdSnackBar.prototype.open).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile.module.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile.routing.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\profile\\profile.service.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\categories.service.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\category.model.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Question' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":18}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"﻿import { Question } from \"./question.model\";\nimport { QuestionBase } from \"./question\";\n\nexport interface Category {\n  id: number;\n  categoryName: string;\n  questionList: QuestionBase[];\n  isAccordionOpen: boolean;\n  isAlreadyClicked: boolean;\n  selectAll: boolean;\n  numberOfSelectedQuestion: number;\n  isSelect: boolean;\n  questionCount: number;\n  isQuestionAbsent: boolean;\n  numberOfRandomQuestionsSelected: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\code-snippet-questions-test-cases.model.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[283,286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[283,286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"﻿import { TestCaseType } from \"../questions/enum-test-case-type\";\n\nexport interface CodeSnippetQuestionsTestCases {\n  id: number;\n  testCaseTitle: string;\n  testCaseDescription: string;\n  testCaseType: TestCaseType;\n  testCaseInput: string;\n  testCaseOutput: string;\n  testCaseMarks: any;\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\code.snippet.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\enum-difficultylevel.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\enum-questiontype.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\enum-test-case-type.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\numberOfQuestion.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\question-display.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\question.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\question.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-dashboard\\add-categories-dialog.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\questions\\questions-dashboard\\add-categories-dialog.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n} from \"rxjs\";\nimport { ComponentFixture, TestBed, tick } from \"@angular/core/testing\";\nimport { async, fakeAsync } from \"@angular/core/testing\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport { Http, HttpModule, XHRBackend, ResponseOptions } from \"@angular/http\";\nimport { RouterModule, Router, ActivatedRoute, Params } from \"@angular/router\";\nimport {\n  MaterialModule,\n  MdDialogModule,\n  MdDialog,\n  MdDialogRef,\n  MdSnackBar,\n  MD_DIALOG_DATA,\n  OverlayRef,\n} from \"@angular/material\";\nimport { QuestionsService } from \"../questions.service\";\nimport { HttpService } from \"../../core/http.service\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AddCategoryDialogComponent } from \"./add-category-dialog.component\";\nimport { CategoryService } from \"../categories.service\";\nimport { mockCategory } from \"../../Mock_Data/test_data.mock\";\nimport { Category } from \"../category.model\";\n\nclass MockMdDialogRef {\n  close(data: any) {\n    return data;\n  }\n}\nclass MockResponse {\n  json(): Observable<any> {\n    return observableOf({ error: [\"Internal server error\"] });\n  }\n}\n\ndescribe(\"Add-Category-Dialog\", () => {\n  let fixture: ComponentFixture<AddCategoryDialogComponent>;\n  let addCategoryComponent: AddCategoryDialogComponent;\n  let dialogRef: MdDialogRef<AddCategoryDialogComponent>;\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [AddCategoryDialogComponent],\n      providers: [\n        { provide: MdDialogRef, useClass: MockMdDialogRef },\n        { provide: Response, useClass: MockResponse },\n        CategoryService,\n        HttpService,\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        HttpModule,\n        BrowserAnimationsModule,\n        MdDialogModule,\n      ],\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AddCategoryDialogComponent);\n    addCategoryComponent = fixture.componentInstance;\n  });\n\n  it(\"addCategory\", () => {\n    const category: any = mockCategory;\n    spyOn(CategoryService.prototype, \"addCategory\").and.returnValue(\n      observableOf(mockCategory)\n    );\n    spyOn(MdSnackBar.prototype, \"open\").and.callThrough();\n    addCategoryComponent.addCategory(category);\n    expect(addCategoryComponent.responseObject).toBe(category);\n    expect(MdSnackBar.prototype.open).toHaveBeenCalled();\n  });\n\n  it(\"addCategory Error Handling\", () => {\n    const category: any = mockCategory;\n    spyOn(CategoryService.prototype, \"addCategory\").and.returnValue(\n      observableThrowError(new MockResponse())\n    );\n    addCategoryComponent.addCategory(category);\n    expect(addCategoryComponent.isCategoryNameExist).toBe(true);\n    expect(addCategoryComponent.isButtonClicked).toBe(false);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-dashboard\\add-category-dialog.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-dashboard\\delete-category-dialog.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-dashboard\\delete-question-dialog.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-dashboard\\question-dashboard.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\questions\\questions-dashboard\\question-dashboard.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { of as observableOf, Observable, BehaviorSubject } from \"rxjs\";\nimport { ComponentFixture, TestBed, tick } from \"@angular/core/testing\";\nimport { async, fakeAsync } from \"@angular/core/testing\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport { Http, HttpModule, XHRBackend } from \"@angular/http\";\nimport { QuestionsDashboardComponent } from \"./questions-dashboard.component\";\nimport { RouterModule, Router, ActivatedRoute, Params } from \"@angular/router\";\nimport { CategoryService } from \"../categories.service\";\nimport { QuestionsService } from \"../questions.service\";\nimport { AddCategoryDialogComponent } from \"./add-category-dialog.component\";\nimport {\n  MaterialModule,\n  MdDialogModule,\n  MdDialog,\n  MdDialogRef,\n  MdSnackBar,\n  MD_DIALOG_DATA,\n  OverlayRef,\n} from \"@angular/material\";\nimport { InfiniteScrollModule } from \"angular2-infinite-scroll\";\nimport { APP_BASE_HREF } from \"@angular/common\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { HttpService } from \"../../core/http.service\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserDynamicTestingModule } from \"@angular/platform-browser-dynamic/testing\";\nimport { UpdateCategoryDialogComponent } from \"./update-category-dialog.component\";\nimport { QuestionDisplay } from \"../question-display\";\nimport { DeleteCategoryDialogComponent } from \"./delete-category-dialog.component\";\nimport { DeleteQuestionDialogComponent } from \"./delete-question-dialog.component\";\nimport { QuestionCount } from \"../numberOfQuestion\";\nimport { SingleMultipleAnswerQuestionOption } from \"../single-multiple-answer-question-option.model\";\nimport { SingleMultipleAnswerQuestion } from \"../single-multiple-question\";\nimport { QuestionBase } from \"../question\";\nimport { Question } from \"../question.model\";\nimport { QuestionType } from \"../enum-questiontype\";\nimport { DifficultyLevel } from \"../enum-difficultylevel\";\nimport { Category } from \"../category.model\";\n\nclass MockActivatedRoute {\n  constructor() {\n    this._paramsValue = { matchString: \"Search\" };\n    this._queryParamsValue = { matchString: \"Search\" };\n  }\n  // ActivatedRoute.params is Observable\n  private subject = new BehaviorSubject(this.testParams);\n  params = this.subject.asObservable();\n\n  // Test parameters\n  private _testParams: {};\n  private _paramsValue: { matchString: string };\n  private _queryParamsValue: { matchString: string };\n\n  get testParams() {\n    return this._testParams;\n  }\n  set testParams(params: {}) {\n    this._testParams = params;\n    this.subject.next(params);\n  }\n  // ActivatedRoute.snapshot.params\n  get snapshot() {\n    return { params: this._paramsValue, queryParams: this._queryParamsValue };\n  }\n  set snapshot(param: {\n    params: { matchString: string };\n    queryParams: { matchString: string };\n  }) {\n    this._paramsValue = param.params;\n    this._queryParamsValue = param.queryParams;\n  }\n}\n\ndescribe(\"Testing of question-dashboard component:-\", () => {\n  let questionFixture: ComponentFixture<QuestionsDashboardComponent>;\n  let questionComponent: QuestionsDashboardComponent;\n  let mockData: any[] = [];\n  let routeTo: any[] = [];\n  const category1 = new Category();\n  const category2 = new Category();\n  const categoryList = new Array<Category>();\n  const questionCount = new QuestionCount();\n  const optionList1 = new Array<SingleMultipleAnswerQuestionOption>();\n  const optionList2 = new Array<SingleMultipleAnswerQuestionOption>();\n  questionCount.easyCount = 2;\n  questionCount.mediumCount = 1;\n  questionCount.hardCount = 0;\n\n  // category list\n  category1.id = 1;\n  category1.categoryName = \"Verbal\";\n  category2.id = 2;\n  category2.categoryName = \"Quantitive Aptitude\";\n\n  // question answer options\n  const questionOption1 = new SingleMultipleAnswerQuestionOption();\n  questionOption1.id = 1;\n  questionOption1.option = \"blue\";\n  questionOption1.isAnswer = true;\n  questionOption1.singleMultipleAnswerQuestionId = 1001;\n  const questionOption2 = new SingleMultipleAnswerQuestionOption();\n  questionOption2.id = 2;\n  questionOption2.option = \"green\";\n  questionOption2.isAnswer = false;\n  questionOption2.singleMultipleAnswerQuestionId = 1001;\n  optionList1.push(questionOption1);\n  optionList1.push(questionOption2);\n\n  const questionOption3 = new SingleMultipleAnswerQuestionOption();\n  questionOption1.id = 3;\n  questionOption1.option = \"2\";\n  questionOption1.isAnswer = false;\n  questionOption1.singleMultipleAnswerQuestionId = 1002;\n  const questionOption4 = new SingleMultipleAnswerQuestionOption();\n  questionOption2.id = 4;\n  questionOption2.option = \"4\";\n  questionOption2.isAnswer = true;\n  questionOption2.singleMultipleAnswerQuestionId = 1002;\n  const questionOption5 = new SingleMultipleAnswerQuestionOption();\n  questionOption1.id = 5;\n  questionOption1.option = \"3\";\n  questionOption1.isAnswer = false;\n  questionOption1.singleMultipleAnswerQuestionId = 1002;\n  optionList2.push(questionOption3);\n  optionList2.push(questionOption4);\n  optionList2.push(questionOption5);\n\n  // single multiple answer question created\n  const singleMultipleAnswerQuestion1 = new SingleMultipleAnswerQuestion();\n  singleMultipleAnswerQuestion1.id = 1001;\n  singleMultipleAnswerQuestion1.singleMultipleAnswerQuestionOption =\n    optionList1;\n\n  const singleMultipleAnswerQuestion2 = new SingleMultipleAnswerQuestion();\n  singleMultipleAnswerQuestion2.id = 1002;\n  singleMultipleAnswerQuestion2.singleMultipleAnswerQuestionOption =\n    optionList2;\n\n  // question is created\n  const question1 = new Question();\n  question1.id = 1001;\n  question1.questionDetail = \"what is your Favourite color?\";\n  question1.questionType = 0;\n  question1.difficultyLevel = 1;\n  question1.category = category1;\n  question1.categoryID = category1.id;\n\n  const question2 = new Question();\n  question2.id = 1002;\n  question2.questionDetail = \"how many colors are there in indian flag?\";\n  question2.questionType = 1;\n  question2.difficultyLevel = 1;\n  question2.category = category2;\n  question2.categoryID = category2.id;\n\n  // question base class created\n  const questionBase1 = new QuestionBase();\n  questionBase1.question = question1;\n  questionBase1.singleMultipleAnswerQuestion = singleMultipleAnswerQuestion1;\n  questionBase1.codeSnippetQuestion = null;\n\n  const questionBase2 = new QuestionBase();\n  questionBase2.question = question2;\n  questionBase2.singleMultipleAnswerQuestion = singleMultipleAnswerQuestion2;\n  questionBase2.codeSnippetQuestion = null;\n\n  const questionBaseList1 = new Array<QuestionBase>();\n  questionBaseList1.push(questionBase1);\n  const questionBaseList2 = new Array<QuestionBase>();\n  questionBaseList2.push(questionBase2);\n  category2.questionList = questionBaseList2;\n\n  // question display list createds\n  const questionDisplay1 = new QuestionDisplay();\n  questionDisplay1.id = 1001;\n  questionDisplay1.questionType = QuestionType.singleAnswer;\n  questionDisplay1.difficultyLevel = DifficultyLevel.Medium;\n  questionDisplay1.questionDetail = \"what is your Favourite color?\";\n  questionDisplay1.category = category1;\n  questionDisplay1.singleMultipleAnswerQuestion = singleMultipleAnswerQuestion1;\n\n  const questionDisplay2 = new QuestionDisplay();\n  questionDisplay2.id = 1002;\n  questionDisplay2.questionType = QuestionType.multipleAnswer;\n  questionDisplay2.difficultyLevel = DifficultyLevel.Medium;\n  questionDisplay2.questionDetail = \"how many colors are there in indian flag?\";\n  questionDisplay2.category = category2;\n  questionDisplay2.singleMultipleAnswerQuestion = singleMultipleAnswerQuestion2;\n\n  const questionDisplayList = new Array<QuestionDisplay>();\n  questionDisplayList.push(questionDisplay1);\n  questionDisplayList.push(questionDisplay2);\n\n  beforeEach(async(() => {\n    TestBed.overrideModule(BrowserDynamicTestingModule, {\n      set: {\n        entryComponents: [\n          AddCategoryDialogComponent,\n          UpdateCategoryDialogComponent,\n          DeleteCategoryDialogComponent,\n          DeleteQuestionDialogComponent,\n        ],\n      },\n    });\n    TestBed.configureTestingModule({\n      declarations: [\n        QuestionsDashboardComponent,\n        AddCategoryDialogComponent,\n        UpdateCategoryDialogComponent,\n        DeleteCategoryDialogComponent,\n        DeleteQuestionDialogComponent,\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        { provide: ActivatedRoute, useClass: MockActivatedRoute },\n        QuestionsService,\n        CategoryService,\n        HttpService,\n      ],\n\n      imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        MaterialModule,\n        InfiniteScrollModule,\n        HttpModule,\n        BrowserAnimationsModule,\n        MdDialogModule,\n      ],\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    mockData = JSON.parse(JSON.stringify(MockTestData));\n    questionFixture = TestBed.createComponent(QuestionsDashboardComponent);\n    questionComponent = questionFixture.componentInstance;\n    spyOn(Router.prototype, \"navigate\").and.callFake((route: any[]) => {\n      routeTo = route;\n    });\n    categoryList.push(category1);\n    categoryList.push(category2);\n  });\n\n  it(\"Add CategoryDialog\", () => {\n    spyOn(MdDialogRef.prototype, \"afterClosed\").and.returnValue(\n      observableOf(mockData[0].categoryAcList[0])\n    );\n    spyOn(questionComponent.dialog, \"open\").and.callThrough();\n    questionComponent.addCategoryDialog();\n    expect(questionComponent.dialog.open).toHaveBeenCalled();\n    expect(questionComponent.categoryArray.length).toBe(1);\n  });\n\n  it(\"Update Category\", () => {\n    const question = new QuestionDisplay();\n    question.category = mockData[0].categoryAcList[0];\n    question.id = mockData[0].categoryAcList[0].questionList[0].id;\n    question.questionType = 2;\n    questionComponent.question.push(question);\n    questionComponent.addCategoryDialog();\n    mockData[0].categoryAcList[0].categoryName = \"updated category\";\n    questionComponent.updateCategoryDialog(mockData[0].categoryAcList[0]);\n    expect(questionComponent.question[0].category.categoryName).toBe(\n      \"updated category\"\n    );\n  });\n\n  it(\"delete category\", () => {\n    spyOn(MdDialogRef.prototype, \"afterClosed\").and.returnValue(\n      observableOf(mockData[0].categoryAcList[0])\n    );\n    spyOn(questionComponent, \"getAllQuestions\").and.callFake(() => {\n      return null;\n    });\n    questionComponent.categoryArray = mockData[0].categoryAcList;\n    expect(questionComponent.categoryArray.length).toBe(2);\n    questionComponent.deleteCategoryDialog(mockData[0].categoryAcList[1]);\n    expect(questionComponent.categoryArray.length).toBe(1);\n  });\n\n  it(\"delete question dialog\", () => {\n    const question = new QuestionDisplay();\n    question.category = mockData[0].categoryAcList[0];\n    question.id = mockData[0].categoryAcList[0].questionList[0].id;\n    question.questionType = 2;\n    questionComponent.question.push(question);\n    expect(questionComponent.question.length).toBe(1);\n    const questionCount = new QuestionCount();\n    spyOn(MdDialogRef.prototype, \"afterClosed\").and.returnValue(\n      observableOf(mockData[0].categoryAcList[0].questionList[0])\n    );\n    spyOn(QuestionsService.prototype, \"countTheQuestion\").and.returnValue(\n      observableOf(questionCount)\n    );\n    questionComponent.deleteQuestionDialog(\n      mockData[0].categoryAcList[0].questionList[0]\n    );\n    expect(questionComponent.question.length).toBe(0);\n  });\n\n  it(\"edit question\", () => {\n    const question = new QuestionDisplay();\n    question.id = mockData[0].categoryAcList[0].questionList[0].question.id;\n    question.questionType = 2;\n    questionComponent.editQuestion(question);\n    expect(routeTo[0] + \"/\" + routeTo[1] + \"/\" + routeTo[2]).toBe(\n      \"questions/\" + \"programming/\" + question.id\n    );\n  });\n\n  it(\"duplicate question\", () => {\n    const question = new QuestionDisplay();\n    question.id = mockData[0].categoryAcList[0].questionList[0].question.id;\n    question.questionType = 2;\n    questionComponent.duplicateQuestion(question);\n    expect(\n      routeTo[0] + \"/\" + routeTo[1] + \"/\" + routeTo[2] + \"/\" + routeTo[3]\n    ).toBe(\"questions/\" + \"programming/\" + \"duplicate/\" + question.id);\n    question.questionType = 1;\n    questionComponent.duplicateQuestion(question);\n    expect(\n      routeTo[0] + \"/\" + routeTo[1] + \"/\" + routeTo[2] + \"/\" + routeTo[3]\n    ).toBe(\"questions/\" + \"multiple-answers/\" + \"duplicate/\" + question.id);\n    question.questionType = 0;\n    questionComponent.duplicateQuestion(question);\n    expect(\n      routeTo[0] + \"/\" + routeTo[1] + \"/\" + routeTo[2] + \"/\" + routeTo[3]\n    ).toBe(\"questions/\" + \"single-answer/\" + \"duplicate/\" + question.id);\n  });\n\n  it(\"should return selected category and difficultylevel \", () => {\n    categoryList.push(category1);\n    categoryList.push(category2);\n    spyOn(questionComponent, \"categoryWiseFilter\");\n    questionComponent.categoryArray = categoryList;\n    questionComponent.selectedCategoryName = \"Verbal\";\n    questionComponent.SelectedDifficultyLevel = \"Medium\";\n    questionComponent.SelectCategoryDifficulty(\"Medium\", \"Verbal\");\n    expect(questionComponent.selectedCategoryId).toBe(1);\n    expect(questionComponent.categoryWiseFilter).toHaveBeenCalled();\n  });\n\n  it(\"should return all the categories\", () => {\n    spyOn(CategoryService.prototype, \"getAllCategories\").and.callFake(() => {\n      return observableOf(categoryList);\n    });\n    spyOn(questionComponent, \"SelectCategoryDifficulty\");\n    questionComponent.selectedCategoryName = \"Verbal\";\n    questionComponent.SelectedDifficultyLevel = \"Medium\";\n    questionComponent.categoryArray = categoryList;\n    questionComponent.getAllCategories();\n    expect(questionComponent.isCategoryPresent).toBeTruthy();\n    expect(questionComponent.SelectCategoryDifficulty).toHaveBeenCalledWith(\n      \"Medium\",\n      \"Verbal\"\n    );\n    questionComponent.selectedCategoryName = undefined;\n    questionComponent.getAllCategories();\n    expect(questionComponent.SelectCategoryDifficulty).toHaveBeenCalledWith(\n      \"Medium\",\n      \"AllCategory\"\n    );\n    questionComponent.SelectedDifficultyLevel = undefined;\n    questionComponent.selectedCategoryName = \"Verbal\";\n    questionComponent.getAllCategories();\n    expect(questionComponent.SelectCategoryDifficulty).toHaveBeenCalledWith(\n      \"All\",\n      \"Verbal\"\n    );\n  });\n\n  it(\"should return all the questions\", () => {\n    spyOn(QuestionsService.prototype, \"getQuestions\").and.callFake(() => {\n      return observableOf(questionDisplayList);\n    });\n    spyOn(QuestionsService.prototype, \"countTheQuestion\").and.callFake(() => {\n      return observableOf();\n    });\n    questionComponent.getAllQuestions();\n    expect(questionComponent.questionDisplay.length).toBe(2);\n    expect(routeTo[0] + \"/\" + routeTo[1] + \"/\" + routeTo[2]).toBe(\n      \"questions/dashboard\" + \"/AllCategory\" + \"/All\"\n    );\n    questionComponent.matchString = \"Search\";\n    questionComponent.getAllQuestions();\n    expect(\n      routeTo[0] + \"/\" + routeTo[1] + \"/\" + routeTo[2] + \"/\" + routeTo[3]\n    ).toBe(\"questions/dashboard\" + \"/AllCategory\" + \"/All\" + \"/Search\");\n  });\n\n  it(\"should return the sorted category array\", () => {\n    questionComponent.categoryArray = categoryList;\n    questionComponent.sortCategory();\n    expect(questionComponent.categoryArray[0].categoryName).toBe(\n      \"Quantitive Aptitude\"\n    );\n  });\n\n  it(\"should filter questions as category wise\", () => {\n    let categoryName: string;\n    let categoryId: number;\n    let difficulty: string;\n    categoryName = \"AllCategory\";\n    difficulty = \"All\";\n    spyOn(QuestionsService.prototype, \"getQuestions\").and.callFake(() => {\n      return observableOf(questionDisplayList);\n    });\n    spyOn(QuestionsService.prototype, \"countTheQuestion\").and.callFake(() => {\n      return observableOf();\n    });\n    questionComponent.categoryWiseFilter(categoryId, categoryName, difficulty);\n    expect(questionComponent.showName).toBe(\"All Questions\");\n    expect(questionComponent.questionDisplay.length).toBe(2);\n    expect(questionComponent.selectedCategory.categoryName).toBe(\"AllCategory\");\n    categoryName = \"Verbal\";\n    questionComponent.categoryWiseFilter(categoryId, categoryName, difficulty);\n    expect(questionComponent.isAllQuestionsSectionSelected).toBeFalsy();\n  });\n\n  it(\"should filter questions as difficulty wise\", () => {\n    let difficulty: string;\n    difficulty = \"Easy\";\n    const list = new Array<QuestionDisplay>();\n    questionComponent.selectedCategory.categoryName = undefined;\n    spyOn(QuestionsService.prototype, \"getQuestions\").and.callFake(() => {\n      return observableOf(list);\n    });\n    spyOn(QuestionsService.prototype, \"countTheQuestion\").and.callThrough();\n    questionComponent.difficultyWiseSearch(difficulty);\n    expect(questionComponent.questionDisplay.length).toBe(0);\n    difficulty = \"Medium\";\n    questionComponent.selectedCategory.categoryName = \"Verbal\";\n    questionComponent.selectedCategoryName = \"Verbal\";\n    list.push(questionDisplay1);\n    questionComponent.difficultyWiseSearch(difficulty);\n    expect(questionComponent.isAllQuestionsSectionSelected).toBeFalsy();\n  });\n\n  // Below test need to be reworked as this is not a proper demonstration of how to use unit testing\n  // it('should filter questions as searched', () => {\n  //    let searchString = 'how';\n  //    questionComponent.selectedCategoryName = undefined;\n  //    let list = new Array<QuestionDisplay>();\n  //    list.push(questionDisplay2);\n  //    spyOn(QuestionsService.prototype, 'getQuestions').and.callFake(() => {\n  //        return Observable.of(list);\n  //    });\n  //    spyOn(QuestionsService.prototype, 'countTheQuestion').and.callFake(() => {\n  //        return Observable.of();\n  //    });\n  //    questionComponent.getQuestionsMatchingSearchCriteria(searchString);\n  //    expect(routeTo[0] + '/' + routeTo[1]).toBe('question/search' + '/how');\n  //    questionComponent.selectedCategory.categoryName = undefined;\n  //    questionComponent.selectedCategoryName = 'AllCategory';\n  //    questionComponent.SelectedDifficultyLevel = 'Medium';\n  //    questionComponent.getQuestionsMatchingSearchCriteria(searchString);\n  //    expect(routeTo[0] + '/' + routeTo[1] + '/' + routeTo[2] + '/' + routeTo[3]).toBe('questions/dashboard' + '/AllCategory' + '/Medium' + '/how');\n  //    questionComponent.selectedCategory.categoryName = 'Verbal';\n  //    questionComponent.selectedCategoryName = 'Verbal';\n  //    questionComponent.getQuestionsMatchingSearchCriteria(searchString);\n  //    expect(routeTo[0] + '/' + routeTo[1] + '/' + routeTo[2] + '/' + routeTo[3]).toBe('questions/dashboard' + '/Verbal' + '/Medium' + '/how');\n  //    expect(questionComponent.questionDisplay.length).toBe(1);\n  //    searchString = '';\n  //    list.pop();\n  //    questionComponent.selectedCategory.categoryName = 'AllCategory';\n  //    questionComponent.difficultyLevel = 'Medium';\n  //    questionComponent.getQuestionsMatchingSearchCriteria(searchString);\n  //    expect(routeTo[0] + '/' + routeTo[1] + '/' + routeTo[2]).toBe('questions/dashboard' + '/AllCategory' + '/Medium');\n  //    expect(questionComponent.questionDisplay.length).toBe(0);\n  //    questionComponent.selectedCategory.categoryName = 'AllCategory';\n  //    searchString = 'Suparna';\n  //    questionComponent.getQuestionsMatchingSearchCriteria(searchString);\n  //    expect(questionComponent.questionDisplay.length).toBe(0);\n  // });\n\n  it(\"should return true if searching text length is not zero\", () => {\n    questionComponent.matchString = \"how\";\n    questionComponent.showStatus();\n    expect(questionComponent.showSearchInput).toBeTruthy();\n  });\n\n  it(\"should return difficultywise total number of questions in a category\", () => {\n    spyOn(QuestionsService.prototype, \"countTheQuestion\").and.callFake(() => {\n      return observableOf(questionCount);\n    });\n    questionComponent.categroyId = 2;\n    questionComponent.matchString = \"\";\n    questionComponent.countTheQuestion();\n    expect(questionComponent.numberOfQuestions.easyCount).toBe(2);\n    expect(questionComponent.numberOfQuestions.hardCount).toBe(0);\n  });\n\n  it(\"should select route as per question type\", () => {\n    questionComponent.selectedCategory.categoryName = \"Verbal\";\n    questionComponent.selectedDifficulty = 1;\n    questionComponent.selectSelectionAndDifficultyType(\"single-answer\");\n    expect(\n      routeTo[0] +\n        \"/\" +\n        routeTo[1] +\n        \"/\" +\n        routeTo[2] +\n        \"/\" +\n        routeTo[3] +\n        \"/\" +\n        routeTo[4]\n    ).toBe(\n      \"questions/\" +\n        \"single-answer/\" +\n        \"add/\" +\n        category1.categoryName +\n        \"/Medium\"\n    );\n    questionComponent.selectSelectionAndDifficultyType(\"programming\");\n    expect(routeTo).toContain(\"programming\");\n    questionComponent.selectedCategory.categoryName = undefined;\n    questionComponent.selectedDifficulty = 1;\n    questionComponent.selectSelectionAndDifficultyType(\"multiple-answer\");\n    expect(\n      routeTo[0] +\n        \"/\" +\n        routeTo[1] +\n        \"/\" +\n        routeTo[2] +\n        \"/\" +\n        routeTo[3] +\n        \"/\" +\n        routeTo[4]\n    ).toBe(\n      \"questions/\" + \"multiple-answers/\" + \"add/\" + \"AllCategory/\" + \"Medium\"\n    );\n    questionComponent.selectedCategory.categoryName = \"Verbal\";\n    questionComponent.selectedDifficulty = 1;\n    questionComponent.selectSelectionAndDifficultyType(\"programming\");\n    expect(\n      routeTo[0] +\n        \"/\" +\n        routeTo[1] +\n        \"/\" +\n        routeTo[2] +\n        \"/\" +\n        routeTo[3] +\n        \"/\" +\n        routeTo[4]\n    ).toBe(\"questions/\" + \"programming/\" + \"add/\" + \"Verbal/\" + \"Medium\");\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-dashboard\\questions-dashboard.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-dashboard\\single-multiple-question.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-dashboard\\update-category-dialog.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-programming\\questions-programming.component.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1804,1807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1804,1807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"﻿import { Component, OnInit } from \"@angular/core\";\nimport { QuestionsService } from \"../questions.service\";\nimport { CategoryService } from \"../categories.service\";\nimport { Category } from \"../category.model\";\nimport { QuestionBase } from \"../question\";\nimport { DifficultyLevel } from \"../enum-difficultylevel\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { CodeSnippetQuestionsTestCases } from \"../../questions/code-snippet-questions-test-cases.model\";\nimport { TestCaseType } from \"../enum-test-case-type\";\nimport { QuestionType } from \"../enum-questiontype\";\nimport { find } from \"lodash-es\";\nimport { Code } from \"app/conduct/code.model\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\n@Component({\n  moduleId: module.id,\n  selector: \"questions-programming\",\n  templateUrl: \"questions-programming.html\",\n})\nexport class QuestionsProgrammingComponent implements OnInit {\n  selectedLanguageList: string[];\n  codingLanguageList: string[];\n  selectedCategory: string;\n  selectedDifficulty: string;\n  categoryList: Category[];\n  questionModel: QuestionBase;\n  formControlModel: FormControlModel;\n  isQuestionEmpty: boolean;\n\n  nolanguageSelected: boolean;\n  isCategoryReady: boolean;\n  isLanguageReady: boolean;\n  isFormSubmitted!: boolean;\n  isQuestionEdited: boolean;\n  isQuestionDuplicated: boolean;\n  isDefaultTestCaseAdded: boolean;\n  isCkeditorDirtly: boolean;\n  code!: Code;\n  testCases: CodeSnippetQuestionsTestCases[];\n  isCategorySelected!: boolean;\n  selectedCategoryName!: string;\n  selectedDifficultyLevel!: string;\n  // To enable enum testCaseType in template\n  // To enable enum testCaseType in template\n  testCaseType!: TestCaseType;\n  questionId!: number;\n  loader!: boolean;\n  categorySelect: any;\n\n  private successMessage = \"Question saved successfully.\";\n  private failedMessage = \"Question failed to save.\";\n  private routeToDashboard!: (string | number)[];\n\n  constructor(\n    private questionsService: QuestionsService,\n    private categoryService: CategoryService,\n    private snackBar: MatSnackBar,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.nolanguageSelected = true;\n    this.isCategoryReady = false;\n    this.isLanguageReady = false;\n    this.isQuestionEdited = false;\n    this.isQuestionDuplicated = false;\n    this.selectedLanguageList = new Array<string>();\n    this.codingLanguageList = new Array<string>();\n    this.categoryList = new Array<Category>();\n    this.questionModel = new QuestionBase();\n    this.selectedCategory = \"AllCategory\";\n    this.selectedDifficulty = \"Easy\";\n    this.formControlModel = new FormControlModel();\n    this.testCases = new Array<CodeSnippetQuestionsTestCases>();\n    this.isDefaultTestCaseAdded = false;\n    this.isQuestionEmpty = true;\n    this.isCkeditorDirtly = false;\n    this.categoryList = new Array<Category>();\n  }\n\n  ngOnInit() {\n    this.loader = true;\n    this.questionId = this.route.snapshot.params[\"id\"] as number;\n    this.selectedCategory = this.route.snapshot.params[\n      \"categoryName\"\n    ] as string;\n    this.selectedDifficultyLevel = this.route.snapshot.params[\n      \"difficultyLevelName\"\n    ] as string;\n    this.routeToDashboard = [\n      \"questions/dashboard\",\n      this.selectedCategory,\n      this.selectedDifficultyLevel,\n    ];\n    if (!this.questionId) {\n      this.getCodingLanguage();\n      this.getCategory();\n    } else if (this.router.url.includes(\"duplicate\")) {\n      this.isQuestionDuplicated = true;\n      void this.prepareToEdit(+this.questionId);\n    } else {\n      this.isQuestionEdited = true;\n      void this.prepareToEdit(+this.questionId);\n    }\n  }\n\n  /**\n   * Prepares the form for editting\n   */\n  async prepareToEdit(id: number) {\n    if (isNaN(id)) {\n      await this.openSnackBar(\n        \"Question not found.\",\n        true,\n        this.routeToDashboard\n      );\n    }\n    this.getQuestionById(id);\n  }\n\n  /**\n   * Gets Question of specific Id\n   * @param id: Id of the Question\n   */\n  getQuestionById(id: number) {\n    this.questionsService.getQuestionById(id).subscribe({\n      next: async (response) => {\n        this.questionModel = response;\n        this.loader = false;\n        // If question fetched is not a CodeSnippetQuestion the show error message\n        if (\n          this.questionModel.question.questionType !==\n          QuestionType.codeSnippetQuestion\n        )\n          await this.openSnackBar(\n            \"Question not found.\",\n            true,\n            this.routeToDashboard\n          );\n\n        this.selectedDifficulty =\n          DifficultyLevel[this.questionModel.question.difficultyLevel];\n        this.testCases =\n          this.questionModel.codeSnippetQuestion?.codeSnippetQuestionTestCases;\n        this.isDefaultTestCaseAdded = this.testCases.some(\n          (testcase) => +testcase.testCaseType === TestCaseType.Default\n        );\n\n        // If Question has no test case show the button to add new test case\n        if (this.testCases.length > 0)\n          this.formControlModel.showTestCase = true;\n\n        this.getCodingLanguage();\n        this.getCategory();\n      },\n      error: async () => {\n        await this.openSnackBar(\n          \"Question not found.\",\n          true,\n          this.routeToDashboard\n        );\n      },\n    });\n  }\n\n  /**\n   * Adds test cases of code snippet question\n   */\n  addTestCases() {\n    const testCase = {} as CodeSnippetQuestionsTestCases;\n    testCase.testCaseType = TestCaseType.Default;\n    testCase.id = this.findMaxId() + 1;\n    this.testCases.push(testCase);\n    this.isDefaultTestCaseAdded = true;\n  }\n\n  /**\n   * Finds the greatest Id of testcases and increments it\n   */\n  private findMaxId() {\n    return this.testCases.length === 0\n      ? 0\n      : Math.max(...this.testCases.map((o) => o.id));\n  }\n\n  /**\n   * Removes the test cases of code snippet question\n   * @param testCaseIndex\n   */\n  removeTestCases(testCaseIndex: number) {\n    this.testCases.splice(testCaseIndex, 1);\n    if (this.testCases.length === 0) {\n      this.formControlModel.showTestCase = false;\n      this.isDefaultTestCaseAdded = false;\n    }\n  }\n\n  trimString(str: string) {\n    if (str) {\n      return str.trim();\n    }\n  }\n\n  onFocusCkeditor() {\n    if (this.questionModel.question.questionDetail) {\n      const trimedQuestion = this.questionModel.question.questionDetail\n        .replace(/<p>|&nbsp;|<\\/p>/gi, \"\")\n        .trim();\n      if (trimedQuestion === \"\")\n        this.questionModel.question.questionDetail = trimedQuestion;\n    }\n\n    this.isCkeditorDirtly = true;\n  }\n  /**\n   * Gets all the coding languages\n   */\n  private getCodingLanguage() {\n    this.questionsService.getCodingLanguage().subscribe((response) => {\n      this.codingLanguageList = response;\n      this.codingLanguageList.sort();\n\n      if (this.isQuestionEdited || this.isQuestionDuplicated) {\n        this.questionModel.codeSnippetQuestion?.languageList.forEach((x) => {\n          this.selectLanguage(x);\n        });\n      }\n\n      this.isLanguageReady = true;\n    });\n  }\n\n  /**\n   * Gets all the categories\n   */\n  private getCategory() {\n    this.categoryService.getAllCategories().subscribe((response) => {\n      this.categoryList = response;\n      if (\n        this.selectedCategoryName === undefined &&\n        this.selectedDifficultyLevel === undefined\n      ) {\n        this.selectedCategory = \"AllCategory\";\n        this.selectedDifficultyLevel = \"All\";\n      }\n      this.showPreSelectedCategoryAndDifficultyLevel(\n        this.selectedCategory,\n        this.selectedDifficultyLevel\n      );\n      // If question is being editted then set the category\n      if (this.isQuestionEdited || this.isQuestionDuplicated)\n        this.selectedCategory = find(\n          this.categoryList,\n          (category) => category.id === this.questionModel.question.categoryID\n        )?.categoryName as string;\n      this.loader = false;\n      this.isCategoryReady = true;\n    });\n  }\n\n  /**\n   * Adds language to the selectedLanguageList\n   * @param language : language to add\n   */\n  selectLanguage(language: string) {\n    const index = this.selectedLanguageList.indexOf(language);\n    if (index === -1) {\n      this.selectedLanguageList.push(language);\n      this.codingLanguageList.splice(\n        this.codingLanguageList.indexOf(language),\n        1\n      );\n    }\n    this.checkIfNoLanguageSelected();\n  }\n\n  /**\n   * Removes language from selectedLanguageList\n   * @param language : Language to remove\n   */\n  removeLanguage(language: string) {\n    this.selectedLanguageList.splice(\n      this.selectedLanguageList.indexOf(language),\n      1\n    );\n    this.codingLanguageList.push(language);\n    this.checkIfNoLanguageSelected();\n    this.codingLanguageList.sort();\n  }\n\n  /**\n   * Toggles nolanguageSelected according to selectedLanguageList\n   */\n  private checkIfNoLanguageSelected() {\n    this.nolanguageSelected =\n      this.selectedLanguageList.length === 0 ? true : false;\n  }\n\n  /**\n   * Adds category to the Question\n   * @param category : category to be added\n   */\n  selectCategory(category: string) {\n    this.categoryList = this.categoryList.filter(\n      (x) => x.categoryName !== category\n    );\n    this.selectedCategory = category;\n    if (\n      this.categoryList !== undefined &&\n      this.categoryList !== null &&\n      category !== undefined &&\n      category !== null\n    ) {\n      this.questionModel.question.categoryID = (\n        find(\n          this.categoryList,\n          (cat) => cat.categoryName === category\n        ) as Category\n      ).id;\n    }\n  }\n\n  /**\n   * Validates if the category is in the list\n   */\n  validateSelectedCategory() {\n    return this.categoryList.some(\n      (x) => x.categoryName === this.selectedCategory\n    );\n  }\n\n  /**\n   * Adds difficulty to the Question\n   * @param difficulty : Difficulty level to select\n   */\n  selectDifficulty(difficulty: string) {\n    this.questionModel.question.difficultyLevel = DifficultyLevel[\n      difficulty\n    ] as DifficultyLevel;\n  }\n\n  // Converts enum of type TestCaseType to string\n  getTestCaseString(testCase: TestCaseType) {\n    return TestCaseType[testCase];\n  }\n\n  /**\n   * Opens snack bar\n   * @param message: message to display\n   * @param enableRouting: enable routing after snack bar dismissed\n   * @param routeTo: routing path\n   */\n  private async openSnackBar(\n    message: string,\n    enableRouting = false,\n    routeTo: (string | number)[] = [\"\"]\n  ) {\n    this.snackBar.open(message, \"Dismiss\", {\n      duration: 3000,\n    });\n    if (enableRouting) {\n      await this.router.navigate(routeTo);\n    }\n  }\n\n  public validateTestCase(\n    testCase: CodeSnippetQuestionsTestCases,\n    $event: Event\n  ) {\n    testCase.testCaseType = ($event.target as HTMLSelectElement)\n      .value as unknown as TestCaseType;\n    this.isDefaultTestCaseAdded = this.testCases.some(\n      (testcase) => +testcase.testCaseType === TestCaseType.Default\n    );\n  }\n\n  /**\n   * Sends post request to add code snippet question\n   * @param isCodeSnippetFormValid : Validation status of code snippet form\n   */\n  addCodingQuestion(isCodeSnippetFormValid: boolean) {\n    if (\n      isCodeSnippetFormValid &&\n      !this.nolanguageSelected &&\n      this.isDefaultTestCaseAdded\n    ) {\n      // Lock the form. Load spinner.\n      this.isFormSubmitted = true;\n      this.questionModel.question.questionType =\n        QuestionType.codeSnippetQuestion;\n      // Explicitly converting the id of the testcases to zero\n      if (!this.isQuestionEdited || this.isQuestionDuplicated) {\n        this.testCases.forEach((x) => (x.id = 0));\n        this.questionModel.question.id = 0;\n      }\n      this.questionModel.codeSnippetQuestion.codeSnippetQuestionTestCases =\n        this.testCases;\n      this.questionModel.codeSnippetQuestion.languageList = [];\n      this.selectedLanguageList.forEach((language) => {\n        this.questionModel.codeSnippetQuestion.languageList.push(language);\n      });\n\n      const subscription = this.isQuestionEdited\n        ? this.questionsService.updateQuestionById(\n            this.questionId,\n            this.questionModel\n          )\n        : this.questionsService.addCodingQuestion(this.questionModel);\n\n      subscription.subscribe({\n        next: async () => {\n          await this.router.navigate([\n            \"questions/dashboard\",\n            this.selectedCategory,\n            this.selectedDifficulty,\n          ]);\n          await this.openSnackBar(this.successMessage, true, [\n            \"questions/dashboard\",\n            this.selectedCategory,\n            this.selectedDifficulty,\n          ]);\n        },\n        error: async (err: HttpErrorResponse) => {\n          await this.openSnackBar(`${this.failedMessage} ${err.message}`);\n          // Release the form for user to retry\n          this.isFormSubmitted = false;\n        },\n      });\n    }\n  }\n\n  /**\n   *Show pre-selected category and difficulty level while adding question\n   * @param categoryName: Name of the category selected\n   * @param difficultyLevel: Name of the difficulty level selected\n   */\n  showPreSelectedCategoryAndDifficultyLevel(\n    categoryName: string,\n    difficultyLevel: string\n  ) {\n    if (categoryName !== \"AllCategory\" && difficultyLevel !== \"All\") {\n      this.isCategorySelected = true;\n      this.selectedDifficulty = difficultyLevel;\n      this.questionModel.question.difficultyLevel = DifficultyLevel[\n        this.selectedDifficulty\n      ] as DifficultyLevel;\n      this.questionModel.question.categoryID = (\n        this.categoryList.find(\n          (x) => x.categoryName === this.selectedCategory\n        ) as Category\n      ).id;\n    } else if (categoryName === \"AllCategory\" && difficultyLevel !== \"All\") {\n      this.isCategorySelected = false;\n      this.selectedDifficulty = difficultyLevel;\n      this.questionModel.question.difficultyLevel = DifficultyLevel[\n        this.selectedDifficulty\n      ] as DifficultyLevel;\n    } else if (categoryName !== \"AllCategory\" && difficultyLevel === \"All\") {\n      this.isCategorySelected = true;\n      this.questionModel.question.categoryID = (\n        this.categoryList.find(\n          (x) => x.categoryName === this.selectedCategory\n        ) as Category\n      ).id;\n    }\n  }\n\n  /**\n   * Redirect to question dashboard page\n   */\n  async cancelButtonClicked() {\n    await this.router.navigate([\n      \"/questions/dashboard\",\n      this.selectedCategory,\n      this.selectedDifficultyLevel,\n    ]);\n  }\n}\n\nclass FormControlModel {\n  showTestCase!: boolean;\n  collapseTestCase!: boolean;\n  showNewTestCase!: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-programming\\questions-programming.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\questions\\questions-programming\\questions-programming.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"﻿import { ComponentFixture, async, TestBed } from \"@angular/core/testing\";\nimport { QuestionsProgrammingComponent } from \"./questions-programming.component\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { QuestionsService } from \"../questions.service\";\nimport { ActivatedRoute, RouterModule, Router } from \"@angular/router\";\nimport { CategoryService } from \"../categories.service\";\nimport { FormsModule } from \"@angular/forms\";\nimport { MaterialModule } from \"@angular/material\";\nimport { HttpModule } from \"@angular/http\";\nimport { HttpService } from \"../../core/http.service\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserDynamicTestingModule } from \"@angular/platform-browser-dynamic/testing\";\nimport { APP_BASE_HREF } from \"@angular/common\";\nimport { Category } from \"../category.model\";\nimport { TinymceModule } from \"angular2-tinymce\";\nimport { CKEditorModule } from \"ng2-ckeditor\";\nimport { Md2AccordionModule } from \"md2\";\n\ndescribe(\"Testing of questions-programming component:-\", () => {\n  let programmingFixture: ComponentFixture<QuestionsProgrammingComponent>;\n  let programmingComponent: QuestionsProgrammingComponent;\n  let routeTo: any[] = [];\n  const category1 = new Category();\n  const category2 = new Category();\n  const categoryList = new Array<Category>();\n\n  category1.id = 1;\n  category1.categoryName = \"Verbal\";\n  category2.id = 2;\n  category2.categoryName = \"Quantitive Aptitude\";\n  categoryList.push(category1);\n  categoryList.push(category2);\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [QuestionsProgrammingComponent],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        { provide: ActivatedRoute },\n        QuestionsService,\n        CategoryService,\n        HttpService,\n      ],\n      imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        MaterialModule,\n        HttpModule,\n        BrowserAnimationsModule,\n        TinymceModule,\n        CKEditorModule,\n        Md2AccordionModule,\n      ],\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    spyOn(Router.prototype, \"navigate\").and.callFake((route: any[]) => {\n      routeTo = route;\n    });\n    programmingFixture = TestBed.createComponent(QuestionsProgrammingComponent);\n    programmingComponent = programmingFixture.componentInstance;\n  });\n\n  it(\"should return pre-selected category and difficultylevel\", () => {\n    programmingComponent.categoryList = categoryList;\n    programmingComponent.isCategorySelected = false;\n    programmingComponent.selectedDifficulty = \"Easy\";\n    programmingComponent.showPreSelectedCategoryAndDifficultyLevel(\n      \"AllCategory\",\n      \"All\"\n    );\n    expect(programmingComponent.isCategorySelected).toBeFalsy();\n    expect(programmingComponent.selectedDifficulty).toBe(\"Easy\");\n    programmingComponent.selectedCategory = \"Verbal\";\n    programmingComponent.showPreSelectedCategoryAndDifficultyLevel(\n      \"Verbal\",\n      \"Easy\"\n    );\n    expect(programmingComponent.isCategorySelected).toBeTruthy();\n    expect(programmingComponent.selectedDifficulty).toBe(\"Easy\");\n    programmingComponent.showPreSelectedCategoryAndDifficultyLevel(\n      \"AllCategory\",\n      \"Hard\"\n    );\n    expect(programmingComponent.isCategorySelected).toBeFalsy();\n    expect(programmingComponent.selectedDifficulty).toBe(\"Hard\");\n    programmingComponent.selectedCategory = \"Quantitive Aptitude\";\n    programmingComponent.showPreSelectedCategoryAndDifficultyLevel(\n      \"Quantitive Aptitude\",\n      \"All\"\n    );\n    expect(programmingComponent.isCategorySelected).toBeTruthy();\n    expect(programmingComponent.questionModel.question.categoryID).toBe(2);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-single-multiple-answer\\mock-route.service.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-single-multiple-answer\\question-single-multiple-answer.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\questions\\questions-single-multiple-answer\\question-single-multiple-answer.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n  BehaviorSubject,\n} from \"rxjs\";\nimport { CategoryService } from \"../categories.service\";\nimport { QuestionsService } from \"../questions.service\";\nimport { ComponentFixture, TestBed, tick } from \"@angular/core/testing\";\nimport { async, fakeAsync, inject } from \"@angular/core/testing\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport { Http, HttpModule, XHRBackend } from \"@angular/http\";\nimport { RouterModule, Router, ActivatedRoute, Params } from \"@angular/router\";\nimport {\n  MaterialModule,\n  MdDialogModule,\n  MdDialog,\n  MdDialogRef,\n  MdSnackBar,\n  MD_DIALOG_DATA,\n  OverlayRef,\n} from \"@angular/material\";\nimport { APP_BASE_HREF } from \"@angular/common\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { HttpService } from \"../../core/http.service\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserDynamicTestingModule } from \"@angular/platform-browser-dynamic/testing\";\nimport { SingleMultipleAnswerQuestionComponent } from \"./questions-single-multiple-answer.component\";\nimport { TinymceModule } from \"angular2-tinymce\";\nimport { QuestionBase } from \"../question\";\nimport { Category } from \"../category.model\";\nimport { MockRouteService } from \"./mock-route.service\";\n\nclass MockActivatedRoute {\n  params = observableOf({ id: MockTestData[0].id });\n}\n\ndescribe(\"Testing of single-multiple-answer component:-\", () => {\n  let singleMultipleFixture: ComponentFixture<SingleMultipleAnswerQuestionComponent>;\n  let singleMultipleComponent: SingleMultipleAnswerQuestionComponent;\n  let mockData: any[] = [];\n  let routeTo: any[] = [];\n  const category1 = new Category();\n  const category2 = new Category();\n  const categoryList = new Array<Category>();\n\n  category1.id = 1;\n  category1.categoryName = \"Verbal\";\n  category2.id = 2;\n  category2.categoryName = \"Quantitive Aptitude\";\n  categoryList.push(category1);\n  categoryList.push(category2);\n\n  // let mockDialogRef = new MdDialogRef(new OverlayRef(null, null, null, null, null), null);\n  beforeEach(async(() => {\n    TestBed.overrideModule(BrowserDynamicTestingModule, {\n      set: {\n        entryComponents: [],\n      },\n    });\n    TestBed.configureTestingModule({\n      declarations: [SingleMultipleAnswerQuestionComponent],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        { provide: ActivatedRoute, useClass: MockActivatedRoute },\n        QuestionsService,\n        CategoryService,\n        HttpService,\n        MockRouteService,\n      ],\n      imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        MaterialModule,\n        HttpModule,\n        BrowserAnimationsModule,\n        MdDialogModule,\n        TinymceModule,\n      ],\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    spyOn(Router.prototype, \"navigate\").and.callFake((route: any[]) => {\n      routeTo = route;\n    });\n    mockData = JSON.parse(JSON.stringify(MockTestData));\n    singleMultipleFixture = TestBed.createComponent(\n      SingleMultipleAnswerQuestionComponent\n    );\n    singleMultipleComponent = singleMultipleFixture.componentInstance;\n  });\n  it(\"getQuestionById\", () => {\n    singleMultipleComponent.categoryArray = mockData[0].categoryAcList;\n    const question = mockData[0].categoryAcList[0].questionList[0];\n    spyOn(QuestionsService.prototype, \"getQuestionById\").and.returnValue(\n      observableOf(question)\n    );\n    singleMultipleComponent.getQuestionById(question.id);\n    expect(singleMultipleComponent.categoryName).toBe(\n      mockData[0].categoryAcList[0].categoryName\n    );\n    expect(singleMultipleComponent.noOfOptionShown).toBe(2);\n    singleMultipleComponent.addOption(2);\n    expect(singleMultipleComponent.noOfOptionShown).toBe(3);\n    singleMultipleComponent.removeOption(2);\n    expect(singleMultipleComponent.noOfOptionShown).toBe(2);\n  });\n\n  it(\"isTwoOptinsSame\", () => {\n    singleMultipleComponent.categoryArray = mockData[0].categoryAcList;\n    const question = mockData[0].categoryAcList[0].questionList[0];\n    spyOn(QuestionsService.prototype, \"getQuestionById\").and.returnValue(\n      observableOf(question)\n    );\n    singleMultipleComponent.getQuestionById(question.id);\n\n    const optionName =\n      mockData[0].categoryAcList[0].questionList[0].singleMultipleAnswerQuestion\n        .singleMultipleAnswerQuestionOption[0].option;\n    singleMultipleComponent.isTwoOptionsSame(optionName, 0);\n    expect(singleMultipleComponent.isTwoOptionSame).toBe(true);\n  });\n\n  it(\"save question\", () => {\n    spyOn(\n      QuestionsService.prototype,\n      \"addSingleMultipleAnswerQuestion\"\n    ).and.returnValue(observableOf(true));\n    spyOn(\n      QuestionsService.prototype,\n      \"updateSingleMultipleAnswerQuestion\"\n    ).and.returnValue(observableOf(true));\n    let question: QuestionBase;\n    question = new QuestionBase();\n    question.question = mockData[0].categoryAcList[0].questionList[0].question;\n    question.singleMultipleAnswerQuestion =\n      mockData[0].categoryAcList[0].questionList[0].singleMultipleAnswerQuestion;\n    singleMultipleComponent.indexOfOptionSelected = 0;\n    singleMultipleComponent.isEditQuestion = false;\n    singleMultipleComponent.categoryName =\n      mockData[0].categoryAcList[0].categoryName;\n    singleMultipleComponent.difficultyLevelSelected =\n      mockData[0].categoryAcList[0].questionList[0].question.difficultyLevel.toString();\n    singleMultipleComponent.saveSingleMultipleAnswerQuestion(question);\n    expect(routeTo[0] + \"/\" + routeTo[1] + \"/\" + routeTo[2]).toBe(\n      \"questions/dashboard/\" + mockData[0].categoryAcList[0].categoryName + \"/0\"\n    );\n    singleMultipleComponent.isEditQuestion = true;\n    singleMultipleComponent.saveSingleMultipleAnswerQuestion(question);\n    expect(routeTo[0] + \"/\" + routeTo[1] + \"/\" + routeTo[2]).toBe(\n      \"questions/dashboard/\" + mockData[0].categoryAcList[0].categoryName + \"/0\"\n    );\n  });\n  it(\"save question Error handling\", () => {\n    spyOn(MdSnackBar.prototype, \"open\").and.callThrough();\n    spyOn(\n      QuestionsService.prototype,\n      \"addSingleMultipleAnswerQuestion\"\n    ).and.returnValue(observableThrowError(\"Internal server error\"));\n    let question: QuestionBase;\n    question = new QuestionBase();\n    question.question = mockData[0].categoryAcList[0].questionList[0].question;\n    question.singleMultipleAnswerQuestion =\n      mockData[0].categoryAcList[0].questionList[0].singleMultipleAnswerQuestion;\n    singleMultipleComponent.indexOfOptionSelected = 0;\n    singleMultipleComponent.saveSingleMultipleAnswerQuestion(question);\n    expect(MdSnackBar.prototype.open).toHaveBeenCalled();\n  });\n\n  it(\"should return all the categories \", () => {\n    spyOn(CategoryService.prototype, \"getAllCategories\").and.callFake(() => {\n      return observableOf(categoryList);\n    });\n    spyOn(singleMultipleComponent, \"showPreSelectedCategoryAndDifficultyLevel\");\n    singleMultipleComponent.getAllCategories();\n    expect(singleMultipleComponent.categoryArray.length).toBe(2);\n    expect(singleMultipleComponent.selectedCategoryName).toBe(\"AllCategory\");\n    singleMultipleComponent.selectedCategoryName = \"Verbal\";\n    singleMultipleComponent.selectedDifficultyLevel = \"Easy\";\n    singleMultipleComponent.getAllCategories();\n    expect(\n      singleMultipleComponent.showPreSelectedCategoryAndDifficultyLevel\n    ).toHaveBeenCalledWith(\"Verbal\", \"Easy\");\n  });\n\n  it(\"should throw error if any server error occured while getting all categories\", () => {\n    spyOn(CategoryService.prototype, \"getAllCategories\").and.callFake(() => {\n      return observableThrowError(Error);\n    });\n    spyOn(MdSnackBar.prototype, \"open\").and.callThrough();\n    singleMultipleComponent.getAllCategories();\n    expect(MdSnackBar.prototype.open).toHaveBeenCalled();\n  });\n\n  it(\"should return pre-selected category and difficultylevel\", () => {\n    singleMultipleComponent.categoryArray = categoryList;\n    singleMultipleComponent.showPreSelectedCategoryAndDifficultyLevel(\n      \"Verbal\",\n      \"Easy\"\n    );\n    expect(singleMultipleComponent.isCategorySelected).toBeTruthy();\n    expect(\n      singleMultipleComponent.singleMultipleAnswerQuestion.question.categoryID\n    ).toBe(1);\n    singleMultipleComponent.showPreSelectedCategoryAndDifficultyLevel(\n      \"AllCategory\",\n      \"Easy\"\n    );\n    expect(singleMultipleComponent.isCategorySelected).toBeFalsy();\n    singleMultipleComponent.showPreSelectedCategoryAndDifficultyLevel(\n      \"Verbal\",\n      \"All\"\n    );\n    expect(singleMultipleComponent.isDifficultyLevelSelected).toBeFalsy();\n    singleMultipleComponent.showPreSelectedCategoryAndDifficultyLevel(\n      \"AllCategory\",\n      \"All\"\n    );\n    singleMultipleComponent.isCategorySelected = false;\n    singleMultipleComponent.isDifficultyLevelSelected = false;\n    expect(singleMultipleComponent.isCategorySelected).toBeFalsy();\n    expect(singleMultipleComponent.isDifficultyLevelSelected).toBeFalsy();\n  });\n\n  it(\"should return category name based on category id\", () => {\n    singleMultipleComponent.categoryArray = categoryList;\n    singleMultipleComponent.getCategoryId(\"Quantitive Aptitude\");\n    expect(\n      singleMultipleComponent.singleMultipleAnswerQuestion.question.categoryID\n    ).toBe(2);\n  });\n\n  it(\"should redirect to dashboard if cancel\", () => {\n    singleMultipleComponent.selectedCategoryName = \"Verbal\";\n    singleMultipleComponent.selectedDifficultyLevel = \"Hard\";\n    singleMultipleComponent.cancelButtonClicked();\n    expect(routeTo[0] + \"/\" + routeTo[1] + \"/\" + routeTo[2]).toBe(\n      \"/questions/dashboard\" + \"/Verbal\" + \"/Hard\"\n    );\n  });\n\n  it(\"should load component of only single-answer question type\", () => {\n    const url = \"/questions/single-answer\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    singleMultipleComponent.getQuestionType();\n    expect(singleMultipleComponent.isSingleAnswerQuestion).toBeTruthy();\n  });\n\n  it(\"should load component of add-single-answer question type\", () => {\n    const url = \"/questions/single-answer/add/AllCategory/All\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    singleMultipleComponent.getQuestionType();\n    expect(singleMultipleComponent.isSingleAnswerQuestion).toBeTruthy();\n    expect(singleMultipleComponent.isEditQuestion).toBeFalsy();\n  });\n\n  it(\"should load component of edit-single-answer question type\", () => {\n    const url = \"/questions/edit-single-answer/32\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    singleMultipleComponent.getQuestionType();\n    expect(singleMultipleComponent.isSingleAnswerQuestion).toBeTruthy();\n  });\n\n  it(\"should load component of duplicate-single-answer question type\", () => {\n    const url = \"/questions/single-answer/duplicate/32\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    singleMultipleComponent.getQuestionType();\n    expect(singleMultipleComponent.isSingleAnswerQuestion).toBeTruthy();\n    expect(singleMultipleComponent.isduplicateQuestion).toBeTruthy();\n  });\n\n  it(\"should load component of only multiple-answers question type\", () => {\n    const url = \"/questions/multiple-answers\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    singleMultipleComponent.getQuestionType();\n    expect(singleMultipleComponent.isSingleAnswerQuestion).toBeFalsy();\n  });\n\n  it(\"should load component of add-multiple-answers question type\", () => {\n    const url = \"/questions/multiple-answers/add/AllCategory/All\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    singleMultipleComponent.getQuestionType();\n    expect(singleMultipleComponent.isSingleAnswerQuestion).toBeFalsy();\n    expect(singleMultipleComponent.isEditQuestion).toBeFalsy();\n  });\n\n  it(\"should load component of edit-multiple-answers question type\", () => {\n    const url = \"/questions/edit-multiple-answers/32\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    singleMultipleComponent.getQuestionType();\n    expect(singleMultipleComponent.isSingleAnswerQuestion).toBeFalsy();\n  });\n\n  it(\"should load component of duplicate-multiple-answers question type\", () => {\n    const url = \"/questions/multiple-answers/duplicate/32\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    singleMultipleComponent.getQuestionType();\n    expect(singleMultipleComponent.isSingleAnswerQuestion).toBeFalsy();\n    expect(singleMultipleComponent.isduplicateQuestion).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions-single-multiple-answer\\questions-single-multiple-answer.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions.module.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions.routing.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\questions.service.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\single-multiple-answer-question-option.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\questions\\single-multiple-question.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\code-snippet-test-cases-details.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\enum-test-state.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\individual-report\\individual-report.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\reports\\individual-report\\individual-report.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { of as observableOf, Observable, BehaviorSubject } from \"rxjs\";\nimport { ComponentFixture, TestBed } from \"@angular/core/testing\";\nimport { async } from \"@angular/core/testing\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { FormsModule, FormGroup } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogRef,\n  OverlayRef,\n  MdDialogModule,\n  MdDialog,\n  MdSnackBar,\n  MdSnackBarRef,\n} from \"@angular/material\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from \"@angular/platform-browser-dynamic/testing\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport { QuestionsService } from \"../../questions/questions.service\";\nimport { Http, HttpModule } from \"@angular/http\";\nimport { inject } from \"@angular/core/testing\";\nimport { Test, TestQuestion } from \"../../tests/tests.model\";\nimport { testsRouting } from \"../../tests/tests.routing\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { HttpService } from \"../../core/http.service\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { tick } from \"@angular/core/testing\";\nimport { Location, LocationStrategy, APP_BASE_HREF } from \"@angular/common\";\nimport { NgModule, Input, Output, EventEmitter } from \"@angular/core\";\nimport { fakeAsync } from \"@angular/core/testing\";\nimport { PopoverModule } from \"ngx-popover\";\nimport { ClipboardModule } from \"ngx-clipboard\";\nimport { Md2AccordionModule } from \"md2\";\nimport { Category } from \"../../questions/category.model\";\nimport { QuestionBase } from \"../../questions/question\";\nimport { QuestionType } from \"../../questions/enum-questiontype\";\nimport { DifficultyLevel } from \"../../questions/enum-difficultylevel\";\nimport { TestService } from \"../../tests/tests.service\";\nimport { IndividualReportComponent } from \"./individual-report.component\";\nimport { ReportService } from \"../report.service\";\nimport { ChartsModule } from \"ng2-charts\";\nimport { TestAttendee } from \"../testattendee.model\";\nimport { Report } from \"../report.model\";\nimport { TestStatus } from \"../enum-test-state\";\nimport { TestLogs } from \"../testlogs.model\";\nimport { TestConduct } from \"../testConduct.model\";\nimport { TestAnswers } from \"../testanswers.model\";\nimport { SingleMultipleAnswerQuestion } from \"../../questions/single-multiple-question\";\nimport { SingleMultipleAnswerQuestionOption } from \"../../questions/single-multiple-answer-question-option.model\";\nimport { QuestionDisplay } from \"../../questions/question-display\";\nimport { TestCodeSolutionDetails } from \"../test-code-solution-details.model\";\nimport { CodeSnippetTestCasesDetails } from \"../code-snippet-test-cases-details.model\";\nimport { ProgrammingLanguage } from \"../programminglanguage.enum\";\n\nclass MockRouter {\n  navigate() {\n    return true;\n  }\n\n  isActive() {\n    return true;\n  }\n\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\nclass MockWindow {\n  location: {\n    href: \"\";\n  };\n}\n\ndescribe(\"Individual Report Component\", () => {\n  let individualReport: IndividualReportComponent;\n  let fixture: ComponentFixture<IndividualReportComponent>;\n\n  const multipleQuestionOption = new SingleMultipleAnswerQuestionOption();\n  multipleQuestionOption.id = 1;\n  multipleQuestionOption.isAnswer = false;\n  multipleQuestionOption.option = \"1903\";\n  multipleQuestionOption.singleMultipleAnswerQuestionId = 1;\n\n  const multipleQuestionOption1 = new SingleMultipleAnswerQuestionOption();\n  multipleQuestionOption1.id = 6;\n  multipleQuestionOption1.isAnswer = true;\n  multipleQuestionOption1.option = \"1911\";\n  multipleQuestionOption1.singleMultipleAnswerQuestionId = 1;\n\n  const multipleQuestionOption2 = new SingleMultipleAnswerQuestionOption();\n  multipleQuestionOption2.id = 7;\n  multipleQuestionOption2.isAnswer = true;\n  multipleQuestionOption2.option = \"1912\";\n  multipleQuestionOption2.singleMultipleAnswerQuestionId = 1;\n\n  const multipleQuestonOptionsArray =\n    new Array<SingleMultipleAnswerQuestionOption>();\n  multipleQuestonOptionsArray[0] = multipleQuestionOption;\n  multipleQuestonOptionsArray[1] = multipleQuestionOption1;\n  multipleQuestonOptionsArray[2] = multipleQuestionOption2;\n\n  const singleMultipleQuestion = new SingleMultipleAnswerQuestion();\n  singleMultipleQuestion.id = 1;\n  singleMultipleQuestion.singleMultipleAnswerQuestionOption =\n    multipleQuestonOptionsArray;\n\n  const question1 = new QuestionBase();\n  question1.question.id = 5;\n  question1.question.categoryID = 4;\n  question1.question.questionDetail =\n    \"When were the battles of Terrains fought?\";\n  question1.question.questionType = QuestionType.multipleAnswer;\n  question1.question.difficultyLevel = DifficultyLevel.Medium;\n  question1.singleMultipleAnswerQuestion = singleMultipleQuestion;\n  question1.question.isSelect = true;\n\n  const singleQuestionOption = new SingleMultipleAnswerQuestionOption();\n  singleQuestionOption.id = 4;\n  singleQuestionOption.isAnswer = false;\n  singleQuestionOption.option = \"Babur\";\n  singleQuestionOption.singleMultipleAnswerQuestionId = 2;\n\n  const singleQuestionOption1 = new SingleMultipleAnswerQuestionOption();\n  singleQuestionOption1.id = 2;\n  singleQuestionOption1.isAnswer = true;\n  singleQuestionOption1.option = \"Humayun\";\n  singleQuestionOption1.singleMultipleAnswerQuestionId = 2;\n\n  const singleAnswerQuestonOptionsArray =\n    new Array<SingleMultipleAnswerQuestionOption>();\n  singleAnswerQuestonOptionsArray[0] = singleQuestionOption;\n  singleAnswerQuestonOptionsArray[1] = singleQuestionOption1;\n\n  const singleMultipleQuestion1 = new SingleMultipleAnswerQuestion();\n  singleMultipleQuestion.id = 2;\n  singleMultipleQuestion.singleMultipleAnswerQuestionOption =\n    singleAnswerQuestonOptionsArray;\n\n  const question = new QuestionBase();\n  question.question.id = 4;\n  question.question.categoryID = 4;\n  question.question.questionDetail = \"Who was the father of Akbar?\";\n  question.question.questionType = QuestionType.singleAnswer;\n  question.question.difficultyLevel = DifficultyLevel.Easy;\n  question.singleMultipleAnswerQuestion = singleMultipleQuestion1;\n  question.question.isSelect = true;\n\n  const question2 = new QuestionBase();\n  question2.question.id = 6;\n  question2.question.categoryID = 4;\n  question2.question.questionDetail = \"Print Hello World.\";\n  question2.question.questionType = QuestionType.codeSnippetQuestion;\n  question2.question.difficultyLevel = DifficultyLevel.Hard;\n  question2.question.isSelect = true;\n\n  const testCodeSolutionDetails = new TestCodeSolutionDetails();\n  testCodeSolutionDetails.codeSolution =\n    '#include <stdio.h>↵int main()↵{↵     printf(\"Hello World\");↵     return 0;↵}';\n  testCodeSolutionDetails.language = 2;\n  testCodeSolutionDetails.numberOfSuccessfulAttempts = 1;\n  testCodeSolutionDetails.totalNumberOfAttempts = 2;\n\n  const codeSnippetQuestionTestCasesDetails = new CodeSnippetTestCasesDetails();\n  codeSnippetQuestionTestCasesDetails.actualOutput = \"Hello World\";\n  codeSnippetQuestionTestCasesDetails.expectedOutput = \"Hello World\";\n  codeSnippetQuestionTestCasesDetails.testCaseInput = \"Hello World\";\n  codeSnippetQuestionTestCasesDetails.testCaseMarks = 5;\n  codeSnippetQuestionTestCasesDetails.testCaseName = \"Print\";\n  codeSnippetQuestionTestCasesDetails.testCaseType = 0;\n  codeSnippetQuestionTestCasesDetails.isTestCasePassing = true;\n  codeSnippetQuestionTestCasesDetails.memory = 80;\n  codeSnippetQuestionTestCasesDetails.processing = 81;\n\n  const codeSnippetDetailsArray = new Array<CodeSnippetTestCasesDetails>();\n  codeSnippetDetailsArray[0] = codeSnippetQuestionTestCasesDetails;\n\n  const category = new Category();\n  category.id = 4;\n  category.categoryName = \"history\";\n  category.isSelect = true;\n  category.numberOfSelectedQuestion = 0;\n  category.questionList[0] = question;\n  category.questionList[1] = question1;\n  category.isAccordionOpen = false;\n  category.isAlreadyClicked = false;\n\n  const test = new Test();\n  test.id = 4;\n  test.numberOfTestAttendees = 2;\n  test.testName = \"History\";\n  test.link = \"a6thsjk8\";\n  test.duration = 10;\n  test.warningTime = 5;\n  test.startDate = \"2017-10-16T06:51:49.4283026Z\";\n  test.endDate = \"2017-10-17T06:51:49.4283026Z\";\n  test.correctMarks = \"3\";\n  test.incorrectMarks = \"1\";\n\n  const report = new Report();\n  report.totalMarksScored = 50;\n  report.percentage = 50;\n  report.testStatus = TestStatus.completedTest;\n  report.percentile = 75;\n  report.timeTakenByAttendee = 3600;\n\n  const testLogs = new TestLogs();\n  testLogs.visitTestLink = new Date(\n    \"Wed Oct 11 2017 06:53:13 GMT+0530 (India Standard Time)\"\n  );\n  testLogs.fillRegistrationForm = new Date(\n    \"Wed Oct 11 2017 06:53:13 GMT+0530 (India Standard Time)\"\n  );\n  testLogs.startTest = new Date(\n    \"Wed Oct 11 2017 06:53:15 GMT+0530 (India Standard Time)\"\n  );\n  testLogs.finishTest = new Date(\n    \"Tue Oct 17 2017 09:08:45 GMT+0530 (India Standard Time)\"\n  );\n  testLogs.resumeTest = new Date(\n    \"Wed Oct 11 2017 06:57:04 GMT+0530 (India Standard Time)\"\n  );\n  testLogs.awayFromTestWindow = new Date(\n    \"Wed Oct 11 2017 07:00:31 GMT+0530 (India Standard Time)\"\n  );\n\n  const testAttendee = new TestAttendee();\n  testAttendee.id = 5;\n  testAttendee.firstName = \"Madhurima\";\n  testAttendee.lastName = \"Das\";\n  testAttendee.rollNumber = \"14\";\n  testAttendee.TestId = 4;\n  testAttendee.email = \"dasmadhurima87@gmail.com\";\n  testAttendee.testLogs = testLogs;\n  testAttendee.report = report;\n  testAttendee.test = test;\n\n  const testAnswers = new TestAnswers();\n  testAnswers.id = 2021;\n  testAnswers.answeredOption = 6;\n\n  const testAnswers1 = new TestAnswers();\n  testAnswers1.id = 2025;\n  testAnswers1.answeredOption = 2;\n\n  const testAnswers2 = new TestAnswers();\n  testAnswers2.id = 2023;\n  testAnswers2.answeredOption = 7;\n\n  const testAnswers3 = new TestAnswers();\n  testAnswers3.id = 2024;\n  testAnswers3.answeredCodeSnippet =\n    '#include <stdio.h>↵int main()↵{↵     printf(\"Hello World\");↵     return 0;↵}';\n\n  const questionDisplay = new QuestionDisplay();\n  questionDisplay.id = 8;\n  questionDisplay.category = category;\n  questionDisplay.difficultyLevel = question.question.difficultyLevel;\n  questionDisplay.singleMultipleAnswerQuestion = singleMultipleQuestion1;\n  questionDisplay.singleMultipleAnswerQuestion.singleMultipleAnswerQuestionOption =\n    singleAnswerQuestonOptionsArray;\n  questionDisplay.questionDetail = question.question.questionDetail;\n  questionDisplay.questionType = question.question.questionType;\n\n  const questionDisplay1 = new QuestionDisplay();\n  questionDisplay1.id = 9;\n  questionDisplay1.category = category;\n  questionDisplay1.difficultyLevel = question1.question.difficultyLevel;\n  questionDisplay1.singleMultipleAnswerQuestion = singleMultipleQuestion;\n  questionDisplay1.singleMultipleAnswerQuestion.singleMultipleAnswerQuestionOption =\n    multipleQuestonOptionsArray;\n  questionDisplay1.questionDetail = question1.question.questionDetail;\n  questionDisplay1.questionType = question1.question.questionType;\n\n  const questionDisplay2 = new QuestionDisplay();\n  questionDisplay2.id = 10;\n  questionDisplay2.category = category;\n  questionDisplay2.difficultyLevel = question2.question.difficultyLevel;\n  questionDisplay2.questionDetail = question2.question.questionDetail;\n  questionDisplay2.questionType = question2.question.questionType;\n  questionDisplay2.singleMultipleAnswerQuestion = null;\n\n  const testQuestions = new TestQuestion();\n  testQuestions.id = 1;\n  testQuestions.answerStatus = 0;\n  testQuestions.testId = test.id;\n  testQuestions.questionId = 4;\n  testQuestions.question = questionDisplay;\n\n  const testQuestions1 = new TestQuestion();\n  testQuestions1.id = 2;\n  testQuestions1.answerStatus = 0;\n  testQuestions1.testId = test.id;\n  testQuestions1.questionId = 5;\n  testQuestions1.question = questionDisplay1;\n\n  const testQuestions2 = new TestQuestion();\n  testQuestions2.id = 3;\n  testQuestions2.codeSolution =\n    '#include <stdio.h>↵int main()↵{↵     printf(\"Hello World\");↵     return 0;↵}';\n  testQuestions2.codeToDisplay =\n    '#include <stdio.h>↵int main()↵{↵     printf(\"Hello World\");↵     return 0;↵}';\n  testQuestions2.compilationStatus = \"Successful\";\n  testQuestions2.isCodeSnippetTestCaseDetailsVisible = true;\n  testQuestions2.isCodeSolutionDetailsVisible = true;\n  testQuestions2.isCompilationStatusVisible = true;\n  testQuestions2.language = 2;\n  testQuestions2.numberOfSuccessfulAttemptsByAttendee = 1;\n  testQuestions2.questionId = 6;\n  testQuestions2.questionStatus = 0;\n  testQuestions2.scoreOfCodeSnippetQuestion = \"1\";\n  testQuestions2.testId = test.id;\n  testQuestions2.totalNumberOfAttemptsMadeByAttendee = 2;\n  testQuestions2.testCodeSolutionDetails = testCodeSolutionDetails;\n  testQuestions2.codeSnippetQuestionTestCasesDetails = codeSnippetDetailsArray;\n  testQuestions2.question = questionDisplay2;\n  testQuestions2.answerStatus = 0;\n\n  let urls: any[];\n  let router: Router;\n  const testAnswersList = new Array<TestAnswers>();\n  testAnswersList[0] = testAnswers;\n  testAnswersList[1] = testAnswers1;\n  testAnswersList[2] = testAnswers2;\n  testAnswersList[3] = testAnswers3;\n\n  const testQuestionsList = new Array<TestQuestion>();\n  testQuestionsList[0] = testQuestions;\n  testQuestionsList[1] = testQuestions1;\n  testQuestionsList[2] = testQuestions2;\n\n  const testAttendee1 = new TestAttendee();\n  testAttendee1.id = 11;\n  testAttendee1.firstName = \"Bidisha\";\n  testAttendee1.lastName = \"Das\";\n  testAttendee1.rollNumber = \"114\";\n  testAttendee1.TestId = 4;\n  testAttendee1.email = \"dasbidisha87@gmail.com\";\n  testAttendee1.testLogs = testLogs;\n  testAttendee1.report = report;\n  testAttendee1.test = test;\n\n  const testAttendee2 = new TestAttendee();\n  testAttendee2.id = 12;\n  testAttendee2.firstName = \"Sneha\";\n  testAttendee2.lastName = \"Das\";\n  testAttendee2.rollNumber = \"184\";\n  testAttendee2.TestId = 4;\n  testAttendee2.email = \"dassneha87@gmail.com\";\n  testAttendee2.testLogs = testLogs;\n  testAttendee2.report = report;\n  testAttendee2.test = test;\n\n  const testAttendeeIdArray = new Array<number>();\n  testAttendeeIdArray[0] = testAttendee.id;\n  testAttendeeIdArray[1] = testAttendee1.id;\n  testAttendeeIdArray[2] = testAttendee2.id;\n\n  class MockDialog {\n    open() {\n      return true;\n    }\n\n    close() {\n      return true;\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.overrideModule(BrowserDynamicTestingModule, {\n      set: {\n        entryComponents: [IndividualReportComponent],\n      },\n    });\n\n    TestBed.configureTestingModule({\n      declarations: [IndividualReportComponent],\n\n      providers: [\n        TestService,\n        HttpService,\n        ReportService,\n        { provide: MdDialogRef, useClass: MockDialog },\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        { provide: window, useClass: MockWindow },\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule.forRoot([]),\n        HttpModule,\n        BrowserAnimationsModule,\n        PopoverModule,\n        ClipboardModule,\n        Md2AccordionModule,\n        MdDialogModule,\n        ChartsModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(IndividualReportComponent);\n    individualReport = fixture.componentInstance;\n  });\n\n  it(\"should get all the details of the test attendee that are to be displayed in the report\", () => {\n    spyOn(ReportService.prototype, \"getTestAttendeeById\").and.callFake(() => {\n      return observableOf(testAttendee);\n    });\n    spyOn(\n      ReportService.prototype,\n      \"getTotalNumberOfAttemptedQuestions\"\n    ).and.callFake(() => {\n      return observableOf(3);\n    });\n    spyOn(ReportService.prototype, \"getStudentPercentile\").and.callFake(() => {\n      return observableOf(75.5);\n    });\n    spyOn(ReportService.prototype, \"getTestAttendeeAnswers\").and.callFake(\n      () => {\n        return observableOf(testAnswersList);\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestQuestions\").and.callFake(() => {\n      return observableOf(testQuestionsList);\n    });\n    individualReport.testQuestions = testQuestionsList;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testAttendeeId = testAttendee.id;\n    individualReport.testAnswers = testAnswersList;\n    spyOn(\n      ReportService.prototype,\n      \"getCodeSnippetQuestionTestCasesDetails\"\n    ).and.callFake(() => {\n      return observableOf(codeSnippetDetailsArray);\n    });\n    spyOn(ReportService.prototype, \"getCodeSnippetQuestionMarks\").and.callFake(\n      () => {\n        return observableOf(\"3\");\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestCodeSolutionDetails\").and.callFake(\n      () => {\n        return observableOf(testCodeSolutionDetails);\n      }\n    );\n    individualReport.getTestAttendeeDetails();\n    expect(individualReport.testName).toBe(testAttendee.test.testName);\n    expect(individualReport.testId).toBe(testAttendee.test.id);\n    expect(individualReport.correctMarks).toBe(testAttendee.test.correctMarks);\n    expect(individualReport.incorrectmarks).toBe(\n      testAttendee.test.incorrectMarks\n    );\n    expect(individualReport.hideSign).toBe(false);\n    expect(individualReport.marks).toBe(testAttendee.report.totalMarksScored);\n    expect(individualReport.percentage).toBe(testAttendee.report.percentage);\n    expect(individualReport.timeTakenInHoursVisible).toBe(true);\n    expect(individualReport.timeTakenInMinutesVisible).toBe(false);\n    expect(individualReport.timeTakenInSecondsVisible).toBe(false);\n    expect(individualReport.resumeTestLog).toBe(true);\n  });\n\n  it(\"should check number of correct options given by a test attendee for single answer question\", () => {\n    individualReport.testAnswers = testAnswersList;\n    individualReport.noOfAnswersCorrectGivenbyAttendee(\n      singleAnswerQuestonOptionsArray\n    );\n    expect(individualReport.noOfAnswersCorrect).toBe(1);\n  });\n\n  it(\"should check number of correct options given by a test attendee for single answer question\", () => {\n    individualReport.testAnswers = testAnswersList;\n    individualReport.noOfAnswersCorrectGivenbyAttendee(\n      multipleQuestonOptionsArray\n    );\n    expect(individualReport.noOfAnswersCorrect).toBe(2);\n  });\n\n  it(\"should check if the answers given by the candidate are correct or not\", () => {\n    individualReport.testAnswers = testAnswersList;\n    const a = individualReport.isAttendeeAnswerCorrect(6, true);\n    expect(a).toBe(true);\n  });\n\n  it(\"should set the test status of a particular candidate as completed\", () => {\n    individualReport.testAttendee = testAttendee;\n    individualReport.testFinishStatus();\n    expect(individualReport.testStatus).toBe(\"Completed\");\n  });\n\n  it(\"should set the test status of a particular candidate as Incomplete\", () => {\n    testAttendee.report.testStatus = TestStatus.allCandidates;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testFinishStatus();\n    expect(individualReport.testStatus).toBe(\"Incomplete\");\n  });\n\n  it(\"should set the test status of a particular candidate as Expired\", () => {\n    testAttendee.report.testStatus = TestStatus.expiredTest;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testFinishStatus();\n    expect(individualReport.testStatus).toBe(\"Expired\");\n  });\n\n  it(\"should set the test status of a particular candidate as Blocked\", () => {\n    testAttendee.report.testStatus = TestStatus.blockedTest;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testFinishStatus();\n    expect(individualReport.testStatus).toBe(\"Blocked\");\n  });\n\n  it(\"should set the test status of a particular candidate as Unfinished\", () => {\n    testAttendee.report.testStatus = TestStatus.unfinishedTest;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testFinishStatus();\n    expect(individualReport.testStatus).toBe(\"Unfinished\");\n  });\n\n  it(\"should calculate the number of correct questions in each difficulty level\", () => {\n    individualReport.difficultywiseCorrectQuestions(\n      testQuestions.question.difficultyLevel\n    );\n    expect(individualReport.easy).toBe(1);\n    expect(individualReport.medium).toBe(0);\n    expect(individualReport.hard).toBe(0);\n    expect(individualReport.showPieChart).toBe(true);\n  });\n\n  it(\"should calculate the number of correct questions in difficulty level of type hard\", () => {\n    individualReport.difficultywiseCorrectQuestions(\n      testQuestions2.question.difficultyLevel\n    );\n    expect(individualReport.hard).toBe(1);\n  });\n\n  it(\"should not have any data for the difficulty level pie chart\", () => {\n    individualReport.difficultywiseCorrectQuestions(4);\n    expect(individualReport.showPieChart).toBe(false);\n  });\n\n  it(\"should set the details for question pie chart value\", () => {\n    individualReport.testQuestions = testQuestionsList;\n    individualReport.correctAnswers = 1;\n    individualReport.incorrectAnswers = 1;\n    individualReport.questionPieChartValue();\n    expect(individualReport.totalQuestions).toBe(3);\n    expect(individualReport.notAttempted).toBe(1);\n  });\n\n  it(\"should calculate the number of correct and incorrect answers given by test attendee\", () => {\n    individualReport.testQuestions = testQuestionsList;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testAttendeeId = testAttendee.id;\n    individualReport.testAnswers = testAnswersList;\n    spyOn(\n      ReportService.prototype,\n      \"getCodeSnippetQuestionTestCasesDetails\"\n    ).and.callFake(() => {\n      return observableOf(codeSnippetDetailsArray);\n    });\n    spyOn(ReportService.prototype, \"getCodeSnippetQuestionMarks\").and.callFake(\n      () => {\n        return observableOf(\"3\");\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestCodeSolutionDetails\").and.callFake(\n      () => {\n        return observableOf(testCodeSolutionDetails);\n      }\n    );\n    individualReport.attendeeAnswers();\n    expect(individualReport.correctAnswers).toBe(3);\n    expect(individualReport.incorrectAnswers).toBe(0);\n    expect(\n      individualReport.testQuestions[2].isCodeSnippetTestCaseDetailsVisible\n    ).toBe(true);\n    expect(individualReport.testQuestions[2].isCompilationStatusVisible).toBe(\n      true\n    );\n    expect(individualReport.testQuestions[2].compilationStatus).toBe(\n      testQuestions2.compilationStatus\n    );\n    expect(individualReport.testQuestions[2].language).toBe(\n      testQuestions2.language\n    );\n    expect(\n      individualReport.testQuestions[2].numberOfSuccessfulAttemptsByAttendee\n    ).toBe(1);\n    expect(\n      individualReport.testQuestions[2].totalNumberOfAttemptsMadeByAttendee\n    ).toBe(2);\n    expect(individualReport.testQuestions[2].codeSolution).toBe(\n      testQuestions2.codeSolution\n    );\n    expect(individualReport.testQuestions[2].codeToDisplay).toBe(\n      testQuestions2.codeToDisplay\n    );\n    expect(individualReport.testQuestions[2].isCodeSolutionDetailsVisible).toBe(\n      true\n    );\n  });\n\n  it(\"should calculate the number of correct and incorrect answers given by test attendee when code snippet question score is negative\", () => {\n    individualReport.testQuestions = testQuestionsList;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testAttendeeId = testAttendee.id;\n    individualReport.testAnswers = testAnswersList;\n    spyOn(\n      ReportService.prototype,\n      \"getCodeSnippetQuestionTestCasesDetails\"\n    ).and.callFake(() => {\n      return observableOf(null);\n    });\n    spyOn(ReportService.prototype, \"getCodeSnippetQuestionMarks\").and.callFake(\n      () => {\n        return observableOf(\"-1\");\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestCodeSolutionDetails\").and.callFake(\n      () => {\n        return observableOf(null);\n      }\n    );\n    individualReport.attendeeAnswers();\n    expect(individualReport.correctAnswers).toBe(2);\n    expect(individualReport.incorrectAnswers).toBe(0);\n    expect(\n      individualReport.testQuestions[2].isCodeSnippetTestCaseDetailsVisible\n    ).toBe(false);\n    expect(individualReport.testQuestions[2].isCompilationStatusVisible).toBe(\n      false\n    );\n    expect(individualReport.testQuestions[2].language).toBe(\n      ProgrammingLanguage.c\n    );\n    expect(\n      individualReport.testQuestions[2].numberOfSuccessfulAttemptsByAttendee\n    ).toBe(0);\n    expect(\n      individualReport.testQuestions[2].totalNumberOfAttemptsMadeByAttendee\n    ).toBe(0);\n    expect(individualReport.testQuestions[2].codeSolution).toBe(\" \");\n    expect(individualReport.testQuestions[2].isCodeSolutionDetailsVisible).toBe(\n      false\n    );\n  });\n\n  it(\"should calculate correct and incorrect answers when score of code snippet question is 0\", () => {\n    individualReport.testQuestions = testQuestionsList;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testAttendeeId = testAttendee.id;\n    individualReport.testAnswers = testAnswersList;\n    spyOn(\n      ReportService.prototype,\n      \"getCodeSnippetQuestionTestCasesDetails\"\n    ).and.callFake(() => {\n      return observableOf(codeSnippetDetailsArray);\n    });\n    spyOn(ReportService.prototype, \"getCodeSnippetQuestionMarks\").and.callFake(\n      () => {\n        return observableOf(0);\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestCodeSolutionDetails\").and.callFake(\n      () => {\n        return observableOf(testCodeSolutionDetails);\n      }\n    );\n    individualReport.attendeeAnswers();\n    expect(individualReport.correctAnswers).toBe(2);\n    expect(individualReport.incorrectAnswers).toBe(1);\n    expect(individualReport.testQuestions[2].answerStatus).toBe(1);\n    expect(\n      individualReport.testQuestions[2].isCodeSnippetTestCaseDetailsVisible\n    ).toBe(true);\n    expect(individualReport.testQuestions[2].isCompilationStatusVisible).toBe(\n      true\n    );\n    expect(individualReport.testQuestions[2].isCodeSolutionDetailsVisible).toBe(\n      true\n    );\n    expect(individualReport.testQuestions[2].compilationStatus).toBe(\n      testQuestions2.compilationStatus\n    );\n    expect(individualReport.testQuestions[2].language).toBe(\n      testQuestions2.language\n    );\n    expect(\n      individualReport.testQuestions[2].numberOfSuccessfulAttemptsByAttendee\n    ).toBe(1);\n    expect(\n      individualReport.testQuestions[2].totalNumberOfAttemptsMadeByAttendee\n    ).toBe(2);\n    expect(individualReport.testQuestions[2].codeSolution).toBe(\n      testQuestions2.codeSolution\n    );\n    expect(individualReport.testQuestions[2].codeToDisplay).toBe(\n      testQuestions2.codeToDisplay\n    );\n  });\n\n  it(\"should calculate correct and incorrect answers when score of code snippet question is greater than 0\", () => {\n    individualReport.testQuestions = testQuestionsList;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testAttendeeId = testAttendee.id;\n    individualReport.testAnswers = testAnswersList;\n    spyOn(\n      ReportService.prototype,\n      \"getCodeSnippetQuestionTestCasesDetails\"\n    ).and.callFake(() => {\n      return observableOf(codeSnippetDetailsArray);\n    });\n    spyOn(ReportService.prototype, \"getCodeSnippetQuestionMarks\").and.callFake(\n      () => {\n        return observableOf(1.5);\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestCodeSolutionDetails\").and.callFake(\n      () => {\n        return observableOf(testCodeSolutionDetails);\n      }\n    );\n    individualReport.attendeeAnswers();\n    expect(individualReport.correctAnswers).toBe(2);\n    expect(individualReport.incorrectAnswers).toBe(1);\n    expect(individualReport.testQuestions[2].questionStatus).toBe(0);\n    expect(\n      individualReport.testQuestions[2].isCodeSnippetTestCaseDetailsVisible\n    ).toBe(true);\n    expect(individualReport.testQuestions[2].isCompilationStatusVisible).toBe(\n      true\n    );\n    expect(individualReport.testQuestions[2].isCodeSolutionDetailsVisible).toBe(\n      true\n    );\n    expect(individualReport.testQuestions[2].compilationStatus).toBe(\n      testQuestions2.compilationStatus\n    );\n    expect(individualReport.testQuestions[2].language).toBe(\n      testQuestions2.language\n    );\n    expect(\n      individualReport.testQuestions[2].numberOfSuccessfulAttemptsByAttendee\n    ).toBe(1);\n    expect(\n      individualReport.testQuestions[2].totalNumberOfAttemptsMadeByAttendee\n    ).toBe(2);\n    expect(individualReport.testQuestions[2].codeSolution).toBe(\n      testQuestions2.codeSolution\n    );\n    expect(individualReport.testQuestions[2].codeToDisplay).toBe(\n      testQuestions2.codeToDisplay\n    );\n  });\n\n  it(\"should calculate correct and incorrect answers when single-multiple answer question is answered wrong by the test attendee\", () => {\n    individualReport.testQuestions = testQuestionsList;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testAttendeeId = testAttendee.id;\n    testAnswers2.answeredOption = 1;\n    individualReport.testAnswers = testAnswersList;\n    spyOn(\n      ReportService.prototype,\n      \"getCodeSnippetQuestionTestCasesDetails\"\n    ).and.callFake(() => {\n      return observableOf(codeSnippetDetailsArray);\n    });\n    spyOn(ReportService.prototype, \"getCodeSnippetQuestionMarks\").and.callFake(\n      () => {\n        return observableOf(1.5);\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestCodeSolutionDetails\").and.callFake(\n      () => {\n        return observableOf(testCodeSolutionDetails);\n      }\n    );\n    individualReport.attendeeAnswers();\n    expect(individualReport.correctAnswers).toBe(1);\n    expect(individualReport.incorrectAnswers).toBe(2);\n    expect(individualReport.testQuestions[2].questionStatus).toBe(0);\n    expect(\n      individualReport.testQuestions[2].isCodeSnippetTestCaseDetailsVisible\n    ).toBe(true);\n    expect(individualReport.testQuestions[2].isCompilationStatusVisible).toBe(\n      true\n    );\n    expect(individualReport.testQuestions[2].isCodeSolutionDetailsVisible).toBe(\n      true\n    );\n    expect(individualReport.testQuestions[2].compilationStatus).toBe(\n      testQuestions2.compilationStatus\n    );\n    expect(individualReport.testQuestions[2].language).toBe(\n      testQuestions2.language\n    );\n    expect(\n      individualReport.testQuestions[2].numberOfSuccessfulAttemptsByAttendee\n    ).toBe(1);\n    expect(\n      individualReport.testQuestions[2].totalNumberOfAttemptsMadeByAttendee\n    ).toBe(2);\n    expect(individualReport.testQuestions[2].codeSolution).toBe(\n      testQuestions2.codeSolution\n    );\n    expect(individualReport.testQuestions[2].codeToDisplay).toBe(\n      testQuestions2.codeToDisplay\n    );\n  });\n\n  it(\"should get details of the test attendee that are to be displayed in the report\", () => {\n    spyOn(ReportService.prototype, \"getTestAttendeeById\").and.callFake(() => {\n      return observableOf(testAttendee);\n    });\n    spyOn(\n      ReportService.prototype,\n      \"getTotalNumberOfAttemptedQuestions\"\n    ).and.callFake(() => {\n      return observableOf(3);\n    });\n    spyOn(ReportService.prototype, \"getStudentPercentile\").and.callFake(() => {\n      return observableOf(75.5);\n    });\n    spyOn(ReportService.prototype, \"getTestAttendeeAnswers\").and.callFake(\n      () => {\n        return observableOf(testAnswersList);\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestQuestions\").and.callFake(() => {\n      return observableOf(testQuestionsList);\n    });\n    individualReport.testQuestions = testQuestionsList;\n    testAttendee.test.incorrectMarks = \"0\";\n    testAttendee.report.timeTakenByAttendee = 7200;\n    testAttendee.testLogs.disconnectedFromServer = null;\n    testAttendee.testLogs.resumeTest = null;\n    testAttendee.testLogs.closeWindowWithoutFinishingTest = null;\n    testAttendee.testLogs.awayFromTestWindow = null;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testAttendeeId = testAttendee.id;\n    individualReport.testAnswers = testAnswersList;\n    spyOn(\n      ReportService.prototype,\n      \"getCodeSnippetQuestionTestCasesDetails\"\n    ).and.callFake(() => {\n      return observableOf(codeSnippetDetailsArray);\n    });\n    spyOn(ReportService.prototype, \"getCodeSnippetQuestionMarks\").and.callFake(\n      () => {\n        return observableOf(\"3\");\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestCodeSolutionDetails\").and.callFake(\n      () => {\n        return observableOf(testCodeSolutionDetails);\n      }\n    );\n    individualReport.getTestAttendeeDetails();\n    expect(individualReport.hideSign).toBe(true);\n    expect(individualReport.timeTakenInHoursVisible).toBe(true);\n    expect(individualReport.timeTakenInMinutesVisible).toBe(false);\n    expect(individualReport.timeTakenInSecondsVisible).toBe(false);\n  });\n\n  it(\"should display time taken in seconds label only\", () => {\n    spyOn(ReportService.prototype, \"getTestAttendeeById\").and.callFake(() => {\n      return observableOf(testAttendee);\n    });\n    spyOn(\n      ReportService.prototype,\n      \"getTotalNumberOfAttemptedQuestions\"\n    ).and.callFake(() => {\n      return observableOf(3);\n    });\n    spyOn(ReportService.prototype, \"getStudentPercentile\").and.callFake(() => {\n      return observableOf(75.5);\n    });\n    spyOn(ReportService.prototype, \"getTestAttendeeAnswers\").and.callFake(\n      () => {\n        return observableOf(testAnswersList);\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestQuestions\").and.callFake(() => {\n      return observableOf(testQuestionsList);\n    });\n    testAttendee.report.timeTakenByAttendee = 61;\n    individualReport.testQuestions = testQuestionsList;\n    individualReport.testAttendee = testAttendee;\n    individualReport.testAttendeeId = testAttendee.id;\n    individualReport.testAnswers = testAnswersList;\n    spyOn(\n      ReportService.prototype,\n      \"getCodeSnippetQuestionTestCasesDetails\"\n    ).and.callFake(() => {\n      return observableOf(codeSnippetDetailsArray);\n    });\n    spyOn(ReportService.prototype, \"getCodeSnippetQuestionMarks\").and.callFake(\n      () => {\n        return observableOf(\"3\");\n      }\n    );\n    spyOn(ReportService.prototype, \"getTestCodeSolutionDetails\").and.callFake(\n      () => {\n        return observableOf(testCodeSolutionDetails);\n      }\n    );\n    individualReport.getTestAttendeeDetails();\n    expect(individualReport.timeTakenInHoursVisible).toBe(false);\n    expect(individualReport.timeTakenInMinutesVisible).toBe(true);\n    expect(individualReport.timeTakenInSecondsVisible).toBe(true);\n  });\n\n  it(\"should navigate the user to the previous individual report\", () => {\n    spyOn(ReportService.prototype, \"getAttendeeIdList\").and.callFake(() => {\n      return observableOf(testAttendeeIdArray);\n    });\n    individualReport.testAttendeeId = 5;\n    individualReport.moveToPreviousIndividualReport();\n    window.location.href = \"localhost:9876/\";\n    expect(individualReport.idOfTestAttendee).toBe(testAttendee2.id);\n    individualReport.testAttendeeId = testAttendee1.id;\n    individualReport.moveToPreviousIndividualReport();\n    window.location.href = \"localhost:9876/\";\n    expect(individualReport.idOfTestAttendee).toBe(testAttendee.id);\n  });\n\n  it(\"should not navigate the user to the previous individual report when wrong attendee id given\", () => {\n    spyOn(ReportService.prototype, \"getAttendeeIdList\").and.callFake(() => {\n      return observableOf(testAttendeeIdArray);\n    });\n    individualReport.testAttendeeId = 7;\n    individualReport.moveToPreviousIndividualReport();\n    window.location.href = \"localhost:9876/\";\n    expect(individualReport.idOfTestAttendee).toBe(undefined);\n  });\n\n  it(\"should navigate the user to the next individual report\", () => {\n    spyOn(ReportService.prototype, \"getAttendeeIdList\").and.callFake(() => {\n      return observableOf(testAttendeeIdArray);\n    });\n    individualReport.testAttendeeId = testAttendee1.id;\n    individualReport.moveToNextIndividualReport();\n    window.location.href = \"localhost:9876/\";\n    expect(individualReport.idOfTestAttendee).toBe(testAttendee2.id);\n    individualReport.testAttendeeId = testAttendee2.id;\n    individualReport.moveToNextIndividualReport();\n    window.location.href = \"localhost:9876/\";\n    expect(individualReport.idOfTestAttendee).toBe(testAttendee.id);\n    individualReport.testAttendeeId = testAttendee.id;\n    individualReport.moveToNextIndividualReport();\n    window.location.href = \"localhost:9876/\";\n    expect(individualReport.idOfTestAttendee).toBe(testAttendee1.id);\n  });\n\n  it(\"should call the isCorrectAnswer()\", () => {\n    spyOn(individualReport, \"isCorrectAnswer\").and.callThrough();\n    individualReport.isCorrectAnswer(true);\n    individualReport.isCorrectAnswer(false);\n    expect(individualReport.isCorrectAnswer).toHaveBeenCalledTimes(2);\n  });\n\n  it(\"should not get valid test attendee id to navigate to next individual report\", () => {\n    spyOn(ReportService.prototype, \"getAttendeeIdList\").and.callFake(() => {\n      return observableOf(testAttendeeIdArray);\n    });\n    individualReport.testAttendeeId = 7;\n    individualReport.moveToPreviousIndividualReport();\n    window.location.href = \"localhost:9876/\";\n    expect(individualReport.idOfTestAttendee).toBe(undefined);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\individual-report\\individual-report.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\programminglanguage.enum.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\report.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\report.service.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\report.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\reports.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\reports.module.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\reports.routing.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\test-code-solution-details.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\test-report\\reportquestionscount.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\test-report\\test-report.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\test-report\\test-report.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\reports\\test-report\\test-report.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { of as observableOf, BehaviorSubject, Observable } from \"rxjs\";\n\nimport { merge } from \"rxjs/operators\";\nimport { ComponentFixture } from \"@angular/core/testing\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { TestBed, async, fakeAsync } from \"@angular/core/testing\";\nimport { Router, ActivatedRoute, RouterModule } from \"@angular/router\";\nimport { MaterialModule, MdSnackBar, MdSnackBarRef } from \"@angular/material\";\nimport { CoreModule } from \"../../core/core.module\";\nimport { FormsModule } from \"@angular/forms\";\nimport { TestReportComponent } from \"./test-report.component\";\nimport { ReportService } from \"../report.service\";\nimport { Test } from \"../../tests/tests.model\";\nimport { TestAttendee } from \"../testAttendee\";\nimport { Report } from \"../report\";\nimport { NgModule, DebugElement } from \"@angular/core\";\nimport { Md2DataTableModule } from \"md2\";\nimport { ConductService } from \"../../conduct/conduct.service\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { ReportQuestionsCount } from \"./reportquestionscount\";\nimport { ConnectionService } from \"../../core/connection.service\";\nimport { DatePipe } from \"@angular/common\";\n\nclass RouterStub {\n  navigateByUrl(url: string) {\n    return url;\n  }\n  navigate() {\n    return true;\n  }\n  isActive() {\n    return true;\n  }\n}\n\nclass ElementRef {\n  nativeElement: any;\n}\n\ndescribe(\"Testing of test-report component:-\", () => {\n  let fixture: ComponentFixture<TestReportComponent>;\n  let testReportComponent: TestReportComponent;\n  let router: Router;\n  let debug: DebugElement;\n\n  const test = new Test();\n  test.id = 1;\n  test.testName = \"Report Testing\";\n  test.link = \"1Pu48OQy6d\";\n  test.endDate = \"0001-01-01T00:00:01.000\";\n\n  const attendee1 = new TestAttendee();\n  attendee1.id = 1;\n  attendee1.firstName = \"suparna\";\n  attendee1.lastName = \"Acharya\";\n  attendee1.email = \"suparna@promactinfo.com\";\n  attendee1.starredCandidate = false;\n  attendee1.report.totalMarksScored = 20;\n  attendee1.report.totalCorrectAttempts = 4;\n  attendee1.report.isTestPausedUnWillingly = false;\n  attendee1.report.testStatus = 3;\n  attendee1.report.timeTakenByAttendee = 148;\n\n  const attendee2 = new TestAttendee();\n  attendee2.id = 2;\n  attendee2.firstName = \"vijay kumar\";\n  attendee2.lastName = \"gupta\";\n  attendee2.email = \"vj@gmail.com\";\n  attendee2.starredCandidate = false;\n  attendee2.report.totalMarksScored = 30;\n  attendee2.report.totalCorrectAttempts = 6;\n  attendee2.report.isTestPausedUnWillingly = false;\n  attendee2.report.testStatus = 2;\n  attendee2.report.timeTakenByAttendee = 125;\n\n  const attendee3 = new TestAttendee();\n  attendee3.firstName = \"ritu\";\n  attendee3.lastName = \"gupta\";\n  attendee3.email = \"rg@gmail.com\";\n  attendee3.report = null;\n  attendee3.starredCandidate = true;\n\n  const attendee4 = new TestAttendee();\n  attendee4.id = 4;\n  attendee4.firstName = \"megha\";\n  attendee4.lastName = \"shah\";\n  attendee4.email = \"meghu@promactinfo.com\";\n  attendee4.starredCandidate = false;\n  attendee4.report.totalMarksScored = 25;\n  attendee4.report.totalCorrectAttempts = 5;\n  attendee4.report.isTestPausedUnWillingly = false;\n  attendee4.report.testStatus = 1;\n  attendee4.report.timeTakenByAttendee = 150;\n\n  const attendee5 = new TestAttendee();\n  attendee5.id = 5;\n  attendee5.firstName = \"ritu\";\n  attendee5.lastName = \"shah\";\n  attendee5.email = \"ritu@promactinfo.com\";\n  attendee5.report.totalMarksScored = null;\n  attendee5.reporNotFoundYet = true;\n  attendee5.report.testStatus = 4;\n\n  const attendees = new Array<TestAttendee>();\n  attendees.push(attendee1);\n  attendees.push(attendee2);\n  attendees.push(attendee3);\n  attendees.push(attendee4);\n  attendees.push(attendee5);\n\n  const excelDetails1 = new ReportQuestionsCount();\n  excelDetails1.easyQuestionAttempted = 1;\n  excelDetails1.noOfQuestionAttempted = 2;\n  excelDetails1.testAttendeeId = 1;\n  excelDetails1.totalTestQuestions = 5;\n\n  const excelDetailsList = new Array<ReportQuestionsCount>();\n  excelDetailsList.push(excelDetails1);\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [TestReportComponent],\n      providers: [\n        ReportService,\n        ConductService,\n        ConnectionService,\n        { provide: Router, useClass: RouterStub },\n        { provide: ActivatedRoute, useclass: ActivatedRoute },\n        DatePipe,\n      ],\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule,\n        CoreModule,\n        Md2DataTableModule,\n        BrowserAnimationsModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(TestReportComponent);\n    testReportComponent = fixture.componentInstance;\n    router = TestBed.get(Router);\n    testReportComponent.testAttendeeArray.push(attendee1);\n    testReportComponent.testAttendeeArray.push(attendee2);\n    testReportComponent.testAttendeeArray.push(attendee4);\n    testReportComponent.attendeeArray.push(attendee1);\n    testReportComponent.attendeeArray.push(attendee2);\n    testReportComponent.attendeeArray.push(attendee3);\n    testReportComponent.attendeeArray.push(attendee4);\n    testReportComponent.attendeeArray.push(attendee5);\n  });\n\n  it(\"should return the test name\", () => {\n    spyOn(ReportService.prototype, \"getTestName\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(ReportService.prototype, \"getAllTestAttendees\").and.callFake(() => {\n      return observableOf(attendees);\n    });\n    testReportComponent.getTestName();\n    expect(testReportComponent.test.testName).toBe(\"Report Testing\");\n  });\n\n  it(\"should return all the attendees of a test\", () => {\n    spyOn(ReportService.prototype, \"getAllTestAttendees\").and.callFake(() => {\n      return observableOf(attendees);\n    });\n    testReportComponent.getAllTestCandidates();\n    expect(testReportComponent.isAnyCandidateExist).toBeTruthy();\n  });\n\n  it(\"should return true if report of any candidate is not found\", () => {\n    spyOn(ReportService.prototype, \"getAllTestAttendees\").and.callFake(() => {\n      return observableOf(attendees);\n    });\n    testReportComponent.getAllTestCandidates();\n    expect(\n      testReportComponent.attendeeArray.some((x) => x.reporNotFoundYet)\n    ).toBeTruthy();\n  });\n\n  it(\"should set all candidate as starred candidates\", () => {\n    spyOn(ReportService.prototype, \"setAllCandidatesStarred\").and.callFake(\n      () => {\n        return observableOf(true);\n      }\n    );\n    testReportComponent.setAllCandidatesStarred();\n    expect(testReportComponent.isAllCandidateStarred).toBeTruthy();\n    expect(testReportComponent.headerStarStatus).toBe(\"star\");\n    expect(testReportComponent.starredCandidateCount).toBe(3);\n  });\n\n  it(\"should set all candidate as unstarred candidates\", () => {\n    testReportComponent.headerStarStatus = \"star\";\n    spyOn(ReportService.prototype, \"setAllCandidatesStarred\").and.callFake(\n      () => {\n        return observableOf(false);\n      }\n    );\n    testReportComponent.setAllCandidatesStarred();\n    expect(testReportComponent.headerStarStatus).toBe(\"star_border\");\n    expect(testReportComponent.starredCandidateCount).toBe(0);\n  });\n\n  it(\"should set some candidates as starred candidates\", () => {\n    spyOn(ReportService.prototype, \"setStarredCandidate\").and.callFake(() => {\n      return observableOf(attendee1.id).pipe(merge(attendee4.id));\n    });\n    testReportComponent.starredCandidateCount = 0;\n    testReportComponent.testAttendeeArray.forEach(\n      (x) => (x.starredCandidate = false)\n    );\n    testReportComponent.headerStarStatus = \"star-border\";\n    testReportComponent.setStarredCandidate(attendee1);\n    testReportComponent.setStarredCandidate(attendee4);\n    expect(testReportComponent.starredCandidateCount).toBe(2);\n  });\n\n  it(\"should set one candidates as unstarred candidates\", () => {\n    attendee1.starredCandidate = false;\n    testReportComponent.testAttendeeArray.find(\n      (x) => x.id === attendee1.id\n    ).starredCandidate = false;\n    spyOn(ReportService.prototype, \"setStarredCandidate\").and.callFake(() => {\n      return observableOf(attendee1);\n    });\n    testReportComponent.setStarredCandidate(attendee1);\n    expect(testReportComponent.isAllCandidateStarred).toBeFalsy();\n    expect(testReportComponent.headerStarStatus).toBe(\"star_border\");\n    expect(testReportComponent.starredCandidateCount).toBe(1);\n  });\n\n  it(\"should send a request to resume the test\", () => {\n    spyOn(ReportService.prototype, \"createSessionForAttendee\").and.callFake(\n      () => {\n        return observableOf(attendee2);\n      }\n    );\n    testReportComponent.resumeTest(attendee2);\n    expect(testReportComponent.isAnyTestResume).toBeFalsy();\n  });\n\n  it(\"should return attendee matched with the search string\", () => {\n    testReportComponent.getTestAttendeeMatchingSearchCriteria(\"gupta\");\n    expect(testReportComponent.testAttendeeArray.length).toBe(2);\n  });\n\n  it(\"should return true if serachString length is not zero\", () => {\n    testReportComponent.searchString = \"Suparna\";\n    testReportComponent.showStatus();\n    expect(testReportComponent.showSearchInput).toBeTruthy();\n  });\n\n  it(\"should return number of starred candidates if filter is of type starred candidate\", () => {\n    testReportComponent.attendeeArray.find(\n      (x) => x.id === attendee1.id\n    ).starredCandidate = true;\n    testReportComponent.attendeeArray.find(\n      (x) => x.id === attendee2.id\n    ).starredCandidate = false;\n    testReportComponent.attendeeArray.find(\n      (x) => x.id === attendee3.id\n    ).starredCandidate = false;\n    testReportComponent.attendeeArray.find(\n      (x) => x.id === attendee4.id\n    ).starredCandidate = true;\n    testReportComponent.setTestStatusType(\"star\");\n    expect(testReportComponent.selectedTestStatus).toBe(0);\n    expect(testReportComponent.starredCandidateCount).toBe(2);\n  });\n\n  it(\"should return number of candidates if filter types are test completeion status\", () => {\n    testReportComponent.setTestStatusType(\"1\");\n    expect(testReportComponent.selectedTestStatus).toBe(1);\n    expect(testReportComponent.noCandidateFound).toBeFalsy();\n  });\n\n  it(\"should return the filtered list of candidates when test-status is all candidate\", () => {\n    testReportComponent.filter(0, \"\", false);\n    expect(testReportComponent.noCandidateFound).toBeFalsy();\n  });\n\n  it(\"should return the filtered list of candidates if filter criteria is showStarCandidate\", () => {\n    spyOn(ReportService.prototype, \"setAllCandidatesStarred\").and.callFake(\n      () => {\n        return observableOf(true);\n      }\n    );\n    testReportComponent.setAllCandidatesStarred();\n    testReportComponent.filter(0, \"\", true);\n    expect(testReportComponent.starredCandidateCount).toBe(3);\n    expect(testReportComponent.noCandidateFound).toBeFalsy();\n  });\n\n  it(\"should return the filtered list of candidates if filter criteria as per searching\", () => {\n    testReportComponent.filter(0, \"promact\", false);\n    expect(testReportComponent.testAttendeeArray.length).toBe(3);\n  });\n\n  it(\"should return the filtered list of candidates if filter criteria as per searching\", () => {\n    testReportComponent.filter(4, \"promact\", false);\n    expect(testReportComponent.testAttendeeArray.length).toBe(1);\n  });\n\n  it(\"should return the total number of attendees\", () => {\n    testReportComponent.countAttendees();\n    expect(testReportComponent.count).toBe(3);\n  });\n\n  it(\"should return all excel deatils and call the download excel function\", () => {\n    spyOn(testReportComponent, \"downloadTestReportExcel\");\n    spyOn(ReportService.prototype, \"getAllAttendeeMarksDetails\").and.callFake(\n      () => {\n        return observableOf(excelDetailsList);\n      }\n    );\n    testReportComponent.getExcelDetails();\n    expect(testReportComponent.reportQuestionDetails.length).toBe(1);\n  });\n\n  it(\"should return the test time in local time format\", () => {\n    const testCreateTime = \"2017-10-12T06:02:00.4463941Z\";\n    const testDateTime = new Date(testCreateTime);\n    const offset = testDateTime.getTimezoneOffset();\n    const hoursDiff = Math.trunc(offset / 60);\n    const minutesDiff = Math.trunc(offset % 60);\n    let localHours = testDateTime.getHours() - hoursDiff;\n    let localMinutes = testDateTime.getMinutes() - minutesDiff;\n    if (localMinutes >= 60) {\n      const hours = Math.trunc(localMinutes / 60);\n      const minutes = Math.trunc(localMinutes % 60);\n      localHours += hours;\n      localMinutes = minutes;\n    }\n    const time = localHours + \" : \" + localMinutes;\n    testReportComponent.calculateLocalTime(testDateTime);\n    expect(testReportComponent.testTime).toBe(time);\n  });\n\n  it(\"should select all candiate at a time\", () => {\n    testReportComponent.checkedAllCandidate = true;\n    testReportComponent.selectAllCandidates();\n    expect(\n      testReportComponent.testAttendeeArray.every(\n        (x) => x.checkedCandidate === true\n      )\n    ).toBeTruthy();\n  });\n\n  it(\"should deselect all candiate at a time\", () => {\n    testReportComponent.checkedAllCandidate = false;\n    testReportComponent.isAnyCandidateSelected = true;\n    testReportComponent.selectAllCandidates();\n    expect(\n      testReportComponent.testAttendeeArray.every(\n        (x) => x.checkedCandidate === false\n      )\n    ).toBeTruthy();\n  });\n\n  it(\"should select single candiate at a time\", () => {\n    testReportComponent.selectIndividualCandidate(attendee1, true);\n    expect(\n      testReportComponent.testAttendeeArray.find((x) => x.id === attendee1.id)\n        .checkedCandidate\n    ).toBeTruthy();\n  });\n\n  it(\"should deselect single candiate at a time\", () => {\n    testReportComponent.selectIndividualCandidate(attendee1, false);\n    expect(\n      testReportComponent.testAttendeeArray.find((x) => x.id === attendee1.id)\n        .checkedCandidate\n    ).toBeFalsy();\n  });\n\n  it(\"should return testfinish status and testreportlink for excel report\", () => {\n    testReportComponent.domain = \"http://localhost:50805\";\n    testReportComponent.testTakerDetails(\n      attendee2.report.testStatus,\n      1001,\n      attendee2.id\n    );\n    expect(testReportComponent.testFinishStatus).toBe(\"Expired\");\n    expect(testReportComponent.reportLink).toBe(\n      \"    http://localhost:50805/reports/test/1001/individual-report/2\"\n    );\n    testReportComponent.testTakerDetails(\n      attendee4.report.testStatus,\n      1001,\n      attendee4.id\n    );\n    expect(testReportComponent.testFinishStatus).toBe(\"Completed\");\n    testReportComponent.testTakerDetails(\n      attendee1.report.testStatus,\n      1001,\n      attendee1.id\n    );\n    expect(testReportComponent.testFinishStatus).toBe(\"Blocked\");\n  });\n\n  it(\"should return the maximum duration of a test for excel report \", () => {\n    testReportComponent.calculateTestSummaryDetails();\n    expect(testReportComponent.maxDuration).toBe(150);\n  });\n\n  it(\"should return average time taken in a test for excel report \", () => {\n    testReportComponent.calculateTestSummaryDetails();\n    expect(testReportComponent.averageTimeTaken).toBe(2);\n  });\n\n  it(\"should return highest ranked candiate of a test \", () => {\n    testReportComponent.sortedAttendeeArray.push(attendee2);\n    testReportComponent.sortedAttendeeArray.push(attendee4);\n    testReportComponent.sortedAttendeeArray.push(attendee1);\n    testReportComponent.calculateAttendeeRank();\n    expect(testReportComponent.testAttendeeRank[0].attendeeId).toBe(2);\n  });\n\n  it(\"should calculate test candidates as per test status \", () => {\n    testReportComponent.testStatusWiseCountAttendees();\n    expect(testReportComponent.blockedTestCount).toBe(1);\n    expect(testReportComponent.expiredTestCount).toBe(1);\n    expect(testReportComponent.completedTestCount).toBe(1);\n  });\n\n  it(\"should select the text area\", () => {\n    const event: any = {};\n    const search: any = {};\n    event.stopPropagation = function () {};\n    search.select = function () {};\n    spyOn(event, \"stopPropagation\");\n    testReportComponent.selectTextArea(event, search);\n    expect(event.stopPropagation).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\test-report\\testattendeerank.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\testAttendeeAc.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\testConduct.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\testanswers.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\testattendee.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\reports\\testlogs.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\setup\\setup.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\setup\\setup.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\setup\\setup.module.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\setup\\setup.routing.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\setup\\setup.service.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\setup\\setup.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\setup\\setup.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n} from \"rxjs\";\nimport {\n  ComponentFixture,\n  TestBed,\n  async,\n  inject,\n} from \"@angular/core/testing\";\nimport { SetupComponent } from \"./setup.component\";\nimport { SetupService } from \"./setup.service\";\nimport { ActivatedRoute, Router, RouterModule } from \"@angular/router\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport { MaterialModule } from \"@angular/material\";\nimport { CoreModule } from \"../core/core.module\";\nimport {\n  FormWizardModule,\n  WizardComponent,\n  WizardStepComponent,\n} from \"angular2-wizard-fix\";\nimport { ConnectionString, ServiceResponse } from \"./setup.model\";\n\nclass RouterStub {\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\ndescribe(\"Testing of setup component:-\", () => {\n  let fixture: ComponentFixture<SetupComponent>;\n  let setupComponent: SetupComponent;\n  const connectionString = new ConnectionString();\n  const setup: any = {};\n  let response: ServiceResponse;\n\n  response = new ServiceResponse();\n  response.isSuccess = true;\n  response.exceptionMessage = \"\";\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [SetupComponent],\n      providers: [\n        SetupService,\n        { provide: Router, useClass: RouterStub },\n        { provide: ActivatedRoute, useclass: ActivatedRoute },\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule,\n        CoreModule,\n        FormWizardModule,\n      ],\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(SetupComponent);\n    setupComponent = fixture.componentInstance;\n    setup.next = function () {};\n    setup.complete = function () {};\n  });\n\n  it(\"should return true if connection string is valid\", () => {\n    spyOn(SetupService.prototype, \"validateConnectionString\").and.callFake(\n      () => {\n        return observableOf(true);\n      }\n    );\n    spyOn(setup, \"next\");\n    setupComponent.validateConnectionString(setup);\n    expect(setup.next).toHaveBeenCalled();\n  });\n\n  it(\"should show error messsage if connection string is invalid\", () => {\n    spyOn(SetupService.prototype, \"validateConnectionString\").and.callFake(\n      () => {\n        return observableOf(false);\n      }\n    );\n    setupComponent.validateConnectionString(setup);\n    expect(setupComponent.stepOneErrorMessage).toBeTruthy();\n  });\n\n  it(\"should show error message if internal server error is thrown\", () => {\n    spyOn(SetupService.prototype, \"validateConnectionString\").and.callFake(\n      () => {\n        return observableThrowError(Error);\n      }\n    );\n    setupComponent.validateConnectionString(setup);\n    expect(setupComponent.stepOneErrorMessage).toBeTruthy();\n  });\n\n  it(\"should return true if email setting is valid\", () => {\n    spyOn(SetupService.prototype, \"validateEmailSettings\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(setup, \"next\");\n    setupComponent.validateEmailSettings(setup);\n    expect(setup.next).toHaveBeenCalled();\n  });\n\n  it(\"should show error message if email setting is invalid\", () => {\n    spyOn(SetupService.prototype, \"validateEmailSettings\").and.callFake(() => {\n      return observableOf(false);\n    });\n    setupComponent.validateEmailSettings(setup);\n    expect(setupComponent.stepTwoErrorMessage).toBeTruthy();\n  });\n\n  it(\"should show error message if internal server error is thrown\", () => {\n    spyOn(SetupService.prototype, \"validateEmailSettings\").and.callFake(() => {\n      return observableThrowError(Error);\n    });\n    setupComponent.validateEmailSettings(setup);\n    expect(setupComponent.stepTwoErrorMessage).toBeTruthy();\n  });\n\n  it(\"should create user succesfully and navigate to login\", () => {\n    spyOn(SetupService.prototype, \"createUser\").and.callFake(() => {\n      return observableOf(response);\n    });\n    spyOn(setup, \"complete\");\n    spyOn(setupComponent, \"navigateToLogin\");\n    setupComponent.createUser(setup);\n    expect(setup.complete).toHaveBeenCalled();\n  });\n\n  it(\"should show error message if user creation fails\", () => {\n    response.isSuccess = false;\n    spyOn(SetupService.prototype, \"createUser\").and.callFake(() => {\n      return observableOf(response);\n    });\n    setupComponent.createUser(setup);\n    expect(setupComponent.stepThreeErrorMessage).toBeTruthy();\n  });\n\n  it(\"should show error message if internal server error is thrown \", () => {\n    spyOn(SetupService.prototype, \"createUser\").and.callFake(() => {\n      return observableThrowError(Error);\n    });\n    setupComponent.createUser(setup);\n    expect(setupComponent.stepThreeErrorMessage).toBeTruthy();\n  });\n\n  it(\"should return true if new password matched confirmed password \", () => {\n    setupComponent.registrationFields.password = \"Abc@12345\";\n    setupComponent.registrationFields.confirmPassword = \"Abc@12345\";\n    setupComponent.isValidPassword();\n    expect(setupComponent.confirmPasswordValid).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\shared\\shared-components.module.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\shared\\shared.module.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\directive.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\enum-allowtestresume.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\enum-browsertolerance.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\enum-testorder.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\shared\\create-test-footer\\create-test-footer.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\shared\\create-test-footer\\create-test-footer.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ComponentFixture, TestBed } from \"@angular/core/testing\";\nimport { async } from \"@angular/core/testing\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { FormsModule, FormGroup } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogRef,\n  OverlayRef,\n  MdDialogModule,\n  MdDialog,\n  MdSnackBar,\n  MdSnackBarRef,\n} from \"@angular/material\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from \"@angular/platform-browser-dynamic/testing\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport { Http, HttpModule } from \"@angular/http\";\nimport { TestService } from \"../../tests.service\";\nimport { inject } from \"@angular/core/testing\";\nimport { Test } from \"../../tests.model\";\nimport { testsRouting } from \"../../tests.routing\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { Observable, BehaviorSubject } from \"rxjs\";\nimport { tick } from \"@angular/core/testing\";\nimport { Location, LocationStrategy, APP_BASE_HREF } from \"@angular/common\";\nimport { NgModule, Input, Output, EventEmitter } from \"@angular/core\";\nimport { fakeAsync } from \"@angular/core/testing\";\nimport { PopoverModule } from \"ngx-popover\";\nimport { ClipboardModule } from \"ngx-clipboard\";\nimport { Md2AccordionModule } from \"md2\";\nimport { CreateTestHeaderComponent } from \"../create-test-header/create-test-header.component\";\nimport { TestSettingsComponent } from \"../../test-settings/test-settings.component\";\nimport { HttpService } from \"../../../core/http.service\";\nimport { CreateTestFooterComponent } from \"../create-test-footer/create-test-footer.component\";\nimport { IncompleteTestCreationDialogComponent } from \"../../test-settings/incomplete-test-creation-dialog.component\";\nimport { MockRouteService } from \"../../../questions/questions-single-multiple-answer/mock-route.service\";\n\nclass MockRouter {\n  navigate() {\n    return true;\n  }\n\n  isActive() {\n    return true;\n  }\n\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\ndescribe(\"Create Test Footer Component\", () => {\n  let createTestFooterComponent: CreateTestFooterComponent;\n  let fixture: ComponentFixture<CreateTestFooterComponent>;\n  const saveTestSettings: any = new EventEmitter();\n  const launchTestDialog: any = new EventEmitter();\n  const saveExit: any = new EventEmitter();\n  const saveNext: any = new EventEmitter();\n  const pauseTest: any = new EventEmitter();\n  const resumeTest: any = new EventEmitter();\n  const saveCategory: any = new EventEmitter();\n\n  const test = new Test();\n  test.id = 3;\n  test.numberOfTestAttendees = 2;\n  test.testName = \"History\";\n  test.link = \"a6thsjk8\";\n  test.duration = 10;\n  test.warningTime = 5;\n  test.startDate = \"2017-10-16T06:51:49.4283026Z\";\n  test.endDate = \"2017-10-17T06:51:49.4283026Z\";\n\n  let urls: any[];\n  let route: ActivatedRoute;\n  let router: Router;\n\n  class MockDialog {\n    open() {\n      return true;\n    }\n\n    close() {\n      return true;\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.overrideModule(BrowserDynamicTestingModule, {\n      set: {\n        entryComponents: [TestSettingsComponent],\n      },\n    });\n\n    TestBed.configureTestingModule({\n      declarations: [\n        TestSettingsComponent,\n        CreateTestHeaderComponent,\n        CreateTestFooterComponent,\n        IncompleteTestCreationDialogComponent,\n      ],\n\n      providers: [\n        { provide: MdDialogRef, useClass: MockDialog },\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        TestService,\n        HttpService,\n        MockRouteService,\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule.forRoot([]),\n        HttpModule,\n        BrowserAnimationsModule,\n        PopoverModule,\n        ClipboardModule,\n        Md2AccordionModule,\n        MdDialogModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CreateTestFooterComponent);\n    createTestFooterComponent = fixture.componentInstance;\n    saveTestSettings.emit = function () {};\n    launchTestDialog.emit = function () {};\n    saveExit.emit = function () {};\n    saveNext.emit = function () {};\n    pauseTest.emit = function () {};\n    resumeTest.emit = function () {};\n    saveCategory.emit = function () {};\n    createTestFooterComponent.testId = test.id;\n  });\n\n  it(\"should should call the getComponent()\", () => {\n    const url = \"/\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    createTestFooterComponent.getComponent();\n    expect(createTestFooterComponent.isTestSection).toBe(false);\n    expect(createTestFooterComponent.isTestQuestion).toBe(false);\n    expect(createTestFooterComponent.isTestSettings).toBe(false);\n  });\n\n  it(\"should load the test sections component\", () => {\n    const url = \"/tests/3/sections\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    createTestFooterComponent.getComponent();\n    expect(createTestFooterComponent.isTestSection).toBe(true);\n    expect(createTestFooterComponent.isTestQuestion).toBe(false);\n    expect(createTestFooterComponent.isTestSettings).toBe(false);\n  });\n\n  it(\"should load the test questions component\", () => {\n    const url = \"/tests/3/questions\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    createTestFooterComponent.getComponent();\n    expect(createTestFooterComponent.isTestSection).toBe(false);\n    expect(createTestFooterComponent.isTestQuestion).toBe(true);\n    expect(createTestFooterComponent.isTestSettings).toBe(false);\n  });\n\n  it(\"should load the test settings component\", () => {\n    const url = \"/tests/3/settings\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    createTestFooterComponent.getComponent();\n    expect(createTestFooterComponent.isTestSection).toBe(false);\n    expect(createTestFooterComponent.isTestQuestion).toBe(false);\n    expect(createTestFooterComponent.isTestSettings).toBe(true);\n  });\n\n  it(\"should emit the event saveTestSettings\", () => {\n    spyOn(saveTestSettings, \"emit\");\n    createTestFooterComponent.saveTestSettings = saveTestSettings;\n    createTestFooterComponent.updateTestSettings();\n    expect(saveTestSettings.emit).toHaveBeenCalled();\n  });\n\n  it(\"should emit the event launchTestDialog\", () => {\n    spyOn(launchTestDialog, \"emit\");\n    createTestFooterComponent.launchTestDialog = launchTestDialog;\n    createTestFooterComponent.launchTestDialogBox();\n    expect(createTestFooterComponent.isTestLaunched).toBe(true);\n    expect(launchTestDialog.emit).toHaveBeenCalled();\n  });\n\n  it(\"should emit the event saveExit in test-questions component\", () => {\n    spyOn(saveExit, \"emit\");\n    createTestFooterComponent.saveExit = saveExit;\n    createTestFooterComponent.saveAndExit();\n    expect(saveExit.emit).toHaveBeenCalled();\n  });\n\n  it(\"should emit the event addTestQuestion in test-questions component\", () => {\n    spyOn(saveNext, \"emit\");\n    createTestFooterComponent.saveNext = saveNext;\n    createTestFooterComponent.addTestQuestions();\n    expect(saveNext.emit).toHaveBeenCalled();\n  });\n\n  it(\"should emit the event pauseTest\", () => {\n    spyOn(pauseTest, \"emit\");\n    createTestFooterComponent.pauseTest = pauseTest;\n    createTestFooterComponent.pausTest();\n    expect(pauseTest.emit).toHaveBeenCalled();\n  });\n\n  it(\"should emit the event resumeTest\", () => {\n    spyOn(resumeTest, \"emit\");\n    createTestFooterComponent.resumeTest = resumeTest;\n    createTestFooterComponent.resumTest();\n    expect(resumeTest.emit).toHaveBeenCalled();\n  });\n\n  it(\"should emit the event saveSelectedCategoryAndExit\", () => {\n    spyOn(saveCategory, \"emit\");\n    createTestFooterComponent.SaveCategory = saveCategory;\n    createTestFooterComponent.saveSelectedCategoryAndExit();\n    expect(createTestFooterComponent.isSelectButton).toBe(false);\n    expect(saveCategory.emit).toHaveBeenCalled();\n  });\n\n  it(\"should emit the event saveSelectedCategoryandMoveNext\", () => {\n    spyOn(saveCategory, \"emit\");\n    createTestFooterComponent.SaveCategory = saveCategory;\n    createTestFooterComponent.saveSelectedCategoryAndMoveNext();\n    expect(createTestFooterComponent.isSelectButton).toBe(true);\n    expect(saveCategory.emit).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\shared\\create-test-footer\\create-test-footer.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\shared\\create-test-header\\create-test-header.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\shared\\create-test-header\\create-test-header.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n  BehaviorSubject,\n} from \"rxjs\";\nimport { ComponentFixture, TestBed } from \"@angular/core/testing\";\nimport { async } from \"@angular/core/testing\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { FormsModule, FormGroup } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogRef,\n  OverlayRef,\n  MdDialogModule,\n  MdDialog,\n  MdSnackBar,\n  MdSnackBarRef,\n} from \"@angular/material\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from \"@angular/platform-browser-dynamic/testing\";\nimport {\n  RouterModule,\n  Router,\n  ActivatedRoute,\n  ActivatedRouteSnapshot,\n} from \"@angular/router\";\nimport { Http, HttpModule } from \"@angular/http\";\nimport { TestService } from \"../../tests.service\";\nimport { inject } from \"@angular/core/testing\";\nimport { Test } from \"../../tests.model\";\nimport { testsRouting } from \"../../tests.routing\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { tick } from \"@angular/core/testing\";\nimport { Location, LocationStrategy, APP_BASE_HREF } from \"@angular/common\";\nimport { NgModule, Input, Output, EventEmitter } from \"@angular/core\";\nimport { fakeAsync } from \"@angular/core/testing\";\nimport { PopoverModule } from \"ngx-popover\";\nimport { ClipboardModule } from \"ngx-clipboard\";\nimport { Md2AccordionModule } from \"md2\";\nimport { CreateTestHeaderComponent } from \"./create-test-header.component\";\nimport { TestSettingsComponent } from \"../../test-settings/test-settings.component\";\nimport { HttpService } from \"../../../core/http.service\";\nimport { CreateTestFooterComponent } from \"../create-test-footer/create-test-footer.component\";\nimport { IncompleteTestCreationDialogComponent } from \"../../test-settings/incomplete-test-creation-dialog.component\";\nimport * as screenfull from \"screenfull\";\nimport { MockTestData } from \"../../../Mock_Data/test_data.mock\";\n\nclass MockRouter {\n  navigate() {\n    return true;\n  }\n\n  isActive() {\n    return true;\n  }\n\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\nclass MockActivatedRoute {\n  constructor() {\n    this._paramsValue = { id: 1, name: \"matchString\" };\n    this._queryParamsValue = { id: 1 };\n  }\n  // ActivatedRoute.params is Observable\n  private subject = new BehaviorSubject(this.testParams);\n  params = this.subject.asObservable();\n\n  // Test parameters\n  private _testParams: {};\n  private _paramsValue: { id: number; name: string };\n  private _queryParamsValue: { id: number };\n\n  get testParams() {\n    return this._testParams;\n  }\n  set testParams(params: {}) {\n    this._testParams = params;\n    this.subject.next(params);\n  }\n  // ActivatedRoute.snapshot.params\n  get snapshot() {\n    return { params: this._paramsValue, queryParams: this._queryParamsValue };\n  }\n  set snapshot(param: {\n    params: { id: number; name: string };\n    queryParams: { id: number };\n  }) {\n    this._paramsValue = param.params;\n    this._queryParamsValue = param.queryParams;\n  }\n}\n\ndescribe(\"Create Test Header Component\", () => {\n  let createTestHeaderComponent: CreateTestHeaderComponent;\n  let fixture: ComponentFixture<CreateTestHeaderComponent>;\n\n  const test = new Test();\n  test.id = 3;\n  test.numberOfTestAttendees = 2;\n  test.testName = \"History\";\n  test.link = \"a6thsjk8\";\n  test.duration = 10;\n  test.warningTime = 5;\n  test.startDate = \"2017-10-16T06:51:49.4283026Z\";\n  test.endDate = \"2017-10-17T06:51:49.4283026Z\";\n\n  let urls: any[];\n  let route: ActivatedRoute;\n  let router: Router;\n\n  class MockDialog {\n    open() {\n      return true;\n    }\n\n    close() {\n      return true;\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.overrideModule(BrowserDynamicTestingModule, {\n      set: {\n        entryComponents: [TestSettingsComponent, CreateTestHeaderComponent],\n      },\n    });\n\n    TestBed.configureTestingModule({\n      declarations: [\n        TestSettingsComponent,\n        CreateTestHeaderComponent,\n        CreateTestFooterComponent,\n        IncompleteTestCreationDialogComponent,\n      ],\n\n      providers: [\n        TestService,\n        HttpService,\n        { provide: MdDialogRef, useClass: MockDialog },\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        { provide: ActivatedRoute, useClass: MockActivatedRoute },\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule.forRoot([]),\n        HttpModule,\n        BrowserAnimationsModule,\n        PopoverModule,\n        ClipboardModule,\n        Md2AccordionModule,\n        MdDialogModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CreateTestHeaderComponent);\n    createTestHeaderComponent = fixture.componentInstance;\n  });\n\n  it(\"should get the test link\", () => {\n    createTestHeaderComponent.testDetails = test;\n    createTestHeaderComponent.getTestLink();\n    expect(createTestHeaderComponent.testLink).toContain(test.link);\n  });\n\n  it(\"should hide the edit button and make the check and close buttons visible\", () => {\n    createTestHeaderComponent.hideEditButton();\n    expect(createTestHeaderComponent.isLabelVisible).toBe(false);\n  });\n\n  it(\"should make the edit button visible along with the valid test name being displayed in the label for test name\", () => {\n    createTestHeaderComponent.testDetails = test;\n    createTestHeaderComponent.testNameReference = test.testName;\n    createTestHeaderComponent.showEditButton(test.testName);\n    expect(createTestHeaderComponent.isLabelVisible).toBe(true);\n    expect(createTestHeaderComponent.nameOfTest).toBe(test.testName);\n    expect(createTestHeaderComponent.testDetails.testName).toBe(test.testName);\n  });\n\n  it(\"should display valid test name when test name is entered null\", () => {\n    createTestHeaderComponent.testDetails = test;\n    createTestHeaderComponent.testNameReference = test.testName;\n    createTestHeaderComponent.showEditButton(\"\");\n    expect(createTestHeaderComponent.testDetails.testName).toBe(test.testName);\n    expect(createTestHeaderComponent.isTestNameExist).toBe(false);\n  });\n\n  it(\"should display valid test name when test name already exists\", () => {\n    createTestHeaderComponent.isTestNameExist = true;\n    createTestHeaderComponent.testNameReference = test.testName;\n    test.testName = \"English\";\n    createTestHeaderComponent.testDetails = test;\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(TestService.prototype, \"updateTestName\").and.callFake(() => {\n      return observableOf(test);\n    });\n    createTestHeaderComponent.updateTestName(test.id, test);\n    createTestHeaderComponent.showEditButton(test.testName);\n    expect(createTestHeaderComponent.testDetails.testName).toBe(\"English\");\n    expect(createTestHeaderComponent.nameOfTest).toBe(\"English\");\n  });\n\n  it(\"should update test name on pressing enter button if test name is valid\", () => {\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(TestService.prototype, \"updateTestName\").and.callFake(() => {\n      return observableOf(test);\n    });\n    createTestHeaderComponent.testId = test.id;\n    createTestHeaderComponent.testDetails = test;\n    createTestHeaderComponent.isButtonClicked = false;\n    createTestHeaderComponent.onEnter(\"Computer\");\n    expect(TestService.prototype.updateTestName).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"should not update test name on pressing enter button if test name is invalid\", () => {\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(TestService.prototype, \"updateTestName\").and.callFake(() => {\n      return observableOf(test);\n    });\n    createTestHeaderComponent.testId = test.id;\n    createTestHeaderComponent.testDetails = test;\n    createTestHeaderComponent.isButtonClicked = true;\n    createTestHeaderComponent.onEnter(\"Computer\");\n    expect(TestService.prototype.updateTestName).toHaveBeenCalledTimes(0);\n  });\n\n  it(\"should update the test name\", () => {\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(TestService.prototype, \"updateTestName\").and.callFake(() => {\n      return observableOf(test);\n    });\n    test.testName = \"G.K\";\n    createTestHeaderComponent.testId = test.id;\n    createTestHeaderComponent.testDetails = test;\n    createTestHeaderComponent.updateTestName(test.id, test);\n    expect(createTestHeaderComponent.isButtonClicked).toBe(false);\n    expect(createTestHeaderComponent.testName).toBe(test.testName);\n    expect(createTestHeaderComponent.editedTestName).toBe(test.testName);\n    expect(createTestHeaderComponent.isLabelVisible).toBe(true);\n  });\n\n  it(\"should not update the test name when test name is not unique\", () => {\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(false);\n    });\n    spyOn(TestService.prototype, \"updateTestName\").and.callFake(() => {\n      return observableOf(test);\n    });\n    createTestHeaderComponent.testId = test.id;\n    createTestHeaderComponent.testDetails = test;\n    createTestHeaderComponent.updateTestName(test.id, test);\n    expect(createTestHeaderComponent.isButtonClicked).toBe(false);\n    expect(createTestHeaderComponent.isTestNameExist).toBe(true);\n    expect(createTestHeaderComponent.isLabelVisible).toBe(false);\n  });\n\n  it(\"should display updated test name\", () => {\n    createTestHeaderComponent.isTestNameExist = true;\n    createTestHeaderComponent.testNameReference = test.testName;\n    test.testName = \"English\";\n    createTestHeaderComponent.testDetails = test;\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(TestService.prototype, \"updateTestName\").and.callFake(() => {\n      return observableOf(test);\n    });\n    createTestHeaderComponent.updateTestName(test.id, test);\n    createTestHeaderComponent.hideEditButton();\n    expect(createTestHeaderComponent.testDetails.testName).toBe(\"English\");\n  });\n\n  it(\"should not update test name on getting an error\", () => {\n    createTestHeaderComponent.isTestNameExist = true;\n    createTestHeaderComponent.testNameReference = test.testName;\n    test.testName = \"English\";\n    createTestHeaderComponent.testDetails = test;\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(TestService.prototype, \"updateTestName\").and.callFake(() => {\n      return observableThrowError(Error);\n    });\n    spyOn(createTestHeaderComponent, \"openSnackBar\").and.callThrough();\n    createTestHeaderComponent.updateTestName(test.id, test);\n    expect(createTestHeaderComponent.isButtonClicked).toBe(false);\n    expect(createTestHeaderComponent.openSnackBar).toHaveBeenCalled();\n  });\n\n  it(\"should display the updated test name along with the edit button\", () => {\n    createTestHeaderComponent.testNameReference = test.testName;\n    test.testName = \"English\";\n    createTestHeaderComponent.testDetails = test;\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(TestService.prototype, \"updateTestName\").and.callFake(() => {\n      return observableOf(test);\n    });\n    createTestHeaderComponent.updateTestName(test.id, test);\n    createTestHeaderComponent.showEditButton(test.testName);\n    expect(createTestHeaderComponent.testDetails.testName).toBe(\"English\");\n  });\n\n  it(\"should change the error message\", () => {\n    createTestHeaderComponent.changeErrorMessage();\n    expect(createTestHeaderComponent.isTestNameExist).toBe(false);\n    expect(createTestHeaderComponent.isWhiteSpaceError).toBe(false);\n  });\n\n  it(\"should change the tooltip message\", () => {\n    createTestHeaderComponent.changeTooltipMessage();\n    expect(createTestHeaderComponent.tooltipMessage).toBe(\"Copy to Clipboard\");\n  });\n\n  it(\"should call ngOnInit()\", () => {\n    createTestHeaderComponent.ngOnInit();\n    expect(createTestHeaderComponent.testId).toBe(1);\n  });\n\n  it(\"should call showTooltipMessage()\", () => {\n    const event: any = {};\n    event.stopPropagation = function () {};\n    const element: any = {};\n    element.select = function () {};\n    createTestHeaderComponent.showTooltipMessage(event, element);\n    expect(createTestHeaderComponent.tooltipMessage).toBe(\"Copied\");\n  });\n\n  it(\"should call selectAllContent()\", () => {\n    const event: any = {};\n    event.target = function () {};\n    event.target.select = function () {};\n    spyOn(createTestHeaderComponent, \"selectAllContent\");\n    createTestHeaderComponent.selectAllContent(event);\n    expect(createTestHeaderComponent.selectAllContent).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\shared\\create-test-header\\create-test-header.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-IPAdddress.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-details.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-preview\\test-preview.compponent.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-questions\\random-question-selection-dialog.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-questions\\test-question.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\test-questions\\test-question.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n} from \"rxjs\";\nimport { ComponentFixture, TestBed, tick } from \"@angular/core/testing\";\nimport { async, fakeAsync } from \"@angular/core/testing\";\nimport { TestsDashboardComponent } from \"../tests-dashboard/tests-dashboard.component\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { HttpService } from \"../../core/http.service\";\nimport {\n  RouterModule,\n  Router,\n  ActivatedRoute,\n  Routes,\n  Params,\n} from \"@angular/router\";\nimport { QuestionsService } from \"../../questions/questions.service\";\nimport { Http, HttpModule, XHRBackend } from \"@angular/http\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { TestService } from \"../tests.service\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogModule,\n  MdDialog,\n  MdDialogRef,\n  MdSnackBar,\n} from \"@angular/material\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from \"@angular/platform-browser-dynamic/testing\";\nimport { TestQuestionsComponent } from \"./test-questions.component\";\nimport { FilterPipe } from \"../tests-dashboard/test-dashboard.pipe\";\nimport { CreateTestFooterComponent } from \"../shared/create-test-footer/create-test-footer.component\";\nimport { CreateTestHeaderComponent } from \"../shared/create-test-header/create-test-header.component\";\nimport { Md2AccordionModule } from \"md2\";\nimport { PopoverModule } from \"ngx-popover\";\nimport { ClipboardModule } from \"ngx-clipboard\";\nimport { APP_BASE_HREF } from \"@angular/common\";\nimport { Test } from \"../tests.model\";\nimport { MockRouteService } from \"../../questions/questions-single-multiple-answer/mock-route.service\";\n\nclass MockActivatedRoute {\n  params = observableOf({ id: MockTestData[0].id });\n}\n\ndescribe(\"Test question Component\", () => {\n  let router: Router;\n  let testQuestion: TestQuestionsComponent;\n  let fixture: ComponentFixture<TestQuestionsComponent>;\n  let routeTo: any[];\n  let mockdata: any[] = [];\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [\n        TestQuestionsComponent,\n        FilterPipe,\n        CreateTestFooterComponent,\n        CreateTestHeaderComponent,\n        TestsDashboardComponent,\n      ],\n      providers: [\n        QuestionsService,\n        { provide: ActivatedRoute, useClass: MockActivatedRoute },\n        TestService,\n        HttpService,\n        MdSnackBar,\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        MockRouteService,\n      ],\n      imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        MaterialModule,\n        HttpModule,\n        BrowserAnimationsModule,\n        MdDialogModule,\n        Md2AccordionModule,\n        PopoverModule,\n        ClipboardModule,\n      ],\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    mockdata = JSON.parse(JSON.stringify(MockTestData));\n    fixture = TestBed.createComponent(TestQuestionsComponent);\n    testQuestion = fixture.componentInstance;\n    router = TestBed.get(Router);\n    spyOn(TestService.prototype, \"getTestById\").and.callFake((id: number) => {\n      const test = mockdata.find((x) => x.id === id);\n      if (test === undefined) return observableThrowError(\"test not found\");\n      else return observableOf(test);\n    });\n    spyOn(TestService.prototype, \"getQuestions\").and.returnValue(\n      observableOf(MockTestData[0].categoryAcList[0].questionList)\n    );\n    spyOn(router, \"navigate\").and.callFake(function (route: any[]) {\n      routeTo = route;\n    });\n  });\n\n  it(\"getTestDetails \", () => {\n    testQuestion.getTestDetails();\n    expect(testQuestion.testDetails).toBe(mockdata[0]);\n    expect(testQuestion.isAnyCategorySelectedForTest).toBe(true);\n  });\n\n  it(\"getTestDetails error handling \", () => {\n    spyOn(MdSnackBar.prototype, \"open\").and.callThrough();\n    testQuestion.testId = 5;\n    testQuestion.getTestDetails();\n    expect(MdSnackBar.prototype.open).toHaveBeenCalled();\n    expect(testQuestion.isAnyCategorySelectedForTest).toBe(undefined);\n    expect(routeTo[0]).toBe(\"/tests\");\n  });\n\n  it(\"getAllQuestions \", () => {\n    testQuestion.getTestDetails();\n    testQuestion.getAllquestions(mockdata[0].categoryAcList[0], 0);\n    mockdata[0].categoryAcList[0].isAccordionOpen = false;\n    mockdata[0].categoryAcList[0].isAlreadyClicked = true;\n    testQuestion.getAllquestions(mockdata[0].categoryAcList[0], 0);\n    mockdata[0].categoryAcList[0].isAccordionOpen = true;\n    testQuestion.getAllquestions(mockdata[0].categoryAcList[0], 0);\n    const value = testQuestion.isCorrectAnswer(true);\n    expect(value).toBe(\"correct\");\n  });\n  it(\"selectQuestion \", () => {\n    const questionToSelect = mockdata[0].categoryAcList[0].questionList[0];\n    testQuestion.getTestDetails();\n    testQuestion.getAllquestions(mockdata[0].categoryAcList[0], 0);\n    testQuestion.selectQuestion(\n      questionToSelect,\n      mockdata[0].categoryAcList[0]\n    );\n    expect(testQuestion.testDetails.categoryAcList[0].selectAll).toBe(true);\n    questionToSelect.question.isSelect = false;\n    testQuestion.selectQuestion(\n      questionToSelect,\n      mockdata[0].categoryAcList[0]\n    );\n    expect(testQuestion.testDetails.categoryAcList[0].selectAll).toBe(false);\n  });\n  it(\"save next \", () => {\n    spyOn(TestService.prototype, \"addTestQuestions\").and.returnValue(\n      observableOf({ message: \"question Added\" })\n    );\n    testQuestion.getTestDetails();\n    testQuestion.isEditTestEnabled = true;\n    testQuestion.testId = MockTestData[0].id;\n    testQuestion.isEditTestEnabled = false;\n    testQuestion.saveNext();\n    expect(routeTo[0]).toBe(\"tests/\" + MockTestData[0].id + \"/settings\");\n    testQuestion.isSaveExit = true;\n    testQuestion.isEditTestEnabled = true;\n    testQuestion.saveNext();\n    expect(routeTo[0]).toBe(\"/tests\");\n    testQuestion.isSaveExit = false;\n    testQuestion.saveNext();\n    expect(routeTo[0]).toBe(\"tests/\" + MockTestData[0].id + \"/settings\");\n  });\n\n  it(\"save exit\", () => {\n    testQuestion.saveExit();\n    expect(routeTo[0]).toBe(\"/tests\");\n  });\n\n  it(\"save next error handeling\", () => {\n    spyOn(MdSnackBar.prototype, \"open\").and.callThrough();\n    spyOn(TestService.prototype, \"addTestQuestions\").and.returnValue(\n      observableThrowError({ message: \"question Added\" })\n    );\n    testQuestion.isEditTestEnabled = true;\n    testQuestion.saveNext();\n    expect(MdSnackBar.prototype.open).toHaveBeenCalled();\n  });\n\n  it(\"selectAll\", () => {\n    testQuestion.selectAll(mockdata[0].categoryAcList[0]);\n    mockdata[0].categoryAcList[0].selectAll = true;\n    testQuestion.selectAll(mockdata[0].categoryAcList[0]);\n    expect(\n      mockdata[0].categoryAcList[0].questionList[0].question.isSelect\n    ).toBe(true);\n  });\n\n  it(\"isTestAttendeeExist\", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.returnValue(\n      observableOf({ response: true })\n    );\n    testQuestion.isTestAttendeeExist();\n    expect(testQuestion.isEditTestEnabled).toBe(false);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-questions\\test-questions.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-sections\\deselect-category-dialog.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\test-sections\\deselect-category-dialog.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n} from \"rxjs\";\nimport { ComponentFixture, TestBed, tick } from \"@angular/core/testing\";\nimport { async, fakeAsync } from \"@angular/core/testing\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { HttpService } from \"../../core/http.service\";\nimport {\n  RouterModule,\n  Router,\n  ActivatedRoute,\n  Routes,\n  Params,\n} from \"@angular/router\";\nimport { QuestionsService } from \"../../questions/questions.service\";\nimport { Http, HttpModule, XHRBackend, ResponseOptions } from \"@angular/http\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { TestService } from \"../tests.service\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogModule,\n  MdDialog,\n  MdDialogRef,\n  MdSnackBar,\n  MD_DIALOG_DATA,\n  OverlayRef,\n} from \"@angular/material\";\nimport { DeselectCategoryComponent } from \"./deselect-category.component\";\nimport { APP_BASE_HREF } from \"@angular/common\";\n\nclass MockMdDialogRef {\n  close(data: any) {\n    return data;\n  }\n}\n\ndescribe(\"Deselect category\", () => {\n  let fixture: ComponentFixture<DeselectCategoryComponent>;\n  let deslectComponent: DeselectCategoryComponent;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [DeselectCategoryComponent],\n      providers: [\n        QuestionsService,\n        { provide: ActivatedRoute, useValue: {} },\n        { provide: MD_DIALOG_DATA },\n        { provide: MdDialogRef, useClass: MockMdDialogRef },\n        TestService,\n        HttpService,\n        MdSnackBar,\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n      ],\n      imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        MaterialModule,\n        HttpModule,\n        BrowserAnimationsModule,\n        MdDialogModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(DeselectCategoryComponent);\n    deslectComponent = fixture.componentInstance;\n  });\n\n  it(\"yesDeselectCategory\", () => {\n    spyOn(TestService.prototype, \"removeDeselectedCategory\").and.returnValue(\n      observableOf(true)\n    );\n    spyOn(deslectComponent.dialogRef, \"close\").and.callThrough();\n    deslectComponent.yesDeselectCategory();\n    expect(deslectComponent.dialogRef.close).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"yesDeselectCategory error check\", () => {\n    spyOn(TestService.prototype, \"removeDeselectedCategory\").and.returnValue(\n      observableThrowError(\"error\")\n    );\n    spyOn(deslectComponent.snackbarRef, \"open\").and.callThrough();\n    deslectComponent.yesDeselectCategory();\n    expect(deslectComponent.snackbarRef.open).toHaveBeenCalledTimes(1);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-sections\\deselect-category.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-sections\\test-section.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\test-sections\\test-section.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n  BehaviorSubject,\n} from \"rxjs\";\nimport { ComponentFixture, TestBed, tick } from \"@angular/core/testing\";\nimport { async, fakeAsync } from \"@angular/core/testing\";\nimport { TestsDashboardComponent } from \"../tests-dashboard/tests-dashboard.component\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { HttpService } from \"../../core/http.service\";\nimport {\n  RouterModule,\n  Router,\n  ActivatedRoute,\n  Routes,\n  Params,\n} from \"@angular/router\";\nimport { QuestionsService } from \"../../questions/questions.service\";\nimport { Http, HttpModule, XHRBackend } from \"@angular/http\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { TestService } from \"../tests.service\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogModule,\n  MdDialog,\n  MdDialogRef,\n  MdSnackBar,\n  MD_DIALOG_DATA,\n  OverlayRef,\n} from \"@angular/material\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from \"@angular/platform-browser-dynamic/testing\";\nimport { FilterPipe } from \"../tests-dashboard/test-dashboard.pipe\";\nimport { CreateTestFooterComponent } from \"../shared/create-test-footer/create-test-footer.component\";\nimport { CreateTestHeaderComponent } from \"../shared/create-test-header/create-test-header.component\";\nimport { Md2AccordionModule } from \"md2\";\nimport { PopoverModule } from \"ngx-popover\";\nimport { ClipboardModule } from \"ngx-clipboard\";\nimport { APP_BASE_HREF } from \"@angular/common\";\nimport { TestSectionsComponent } from \"./test-sections.component\";\nimport { DeselectCategoryComponent } from \"./deselect-category.component\";\nimport { MockRouteService } from \"../../questions/questions-single-multiple-answer/mock-route.service\";\n\ndescribe(\"Test Section\", () => {\n  let fixtureSection: ComponentFixture<TestSectionsComponent>;\n  let testSection: TestSectionsComponent;\n  let router: Router;\n  let routeTo: any[];\n  let mockData: any[] = [];\n\n  beforeEach(async(() => {\n    TestBed.overrideModule(BrowserDynamicTestingModule, {\n      set: {\n        entryComponents: [DeselectCategoryComponent],\n      },\n    });\n    TestBed.configureTestingModule({\n      declarations: [\n        TestSectionsComponent,\n        FilterPipe,\n        CreateTestFooterComponent,\n        CreateTestHeaderComponent,\n        TestsDashboardComponent,\n        DeselectCategoryComponent,\n      ],\n      providers: [\n        QuestionsService,\n        { provide: ActivatedRoute, useValue: { params: observableOf({}) } },\n        TestService,\n        HttpService,\n        MdSnackBar,\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        MockRouteService,\n      ],\n      imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        MaterialModule,\n        HttpModule,\n        BrowserAnimationsModule,\n        MdDialogModule,\n        Md2AccordionModule,\n        PopoverModule,\n        ClipboardModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    mockData = JSON.parse(JSON.stringify(MockTestData));\n    router = TestBed.get(Router);\n    fixtureSection = TestBed.createComponent(TestSectionsComponent);\n    testSection = fixtureSection.componentInstance;\n    spyOn(TestService.prototype, \"getTestById\").and.callFake((id: number) => {\n      const test = mockData.find((x) => x.id === id);\n      if (test === undefined) return observableThrowError(\"Not found\");\n      return observableOf(mockData.find((x) => x.id === id));\n    });\n\n    spyOn(router, \"navigate\").and.callFake((route: any[]) => {\n      routeTo = route;\n    });\n    spyOn(MdSnackBar.prototype, \"open\").and.callThrough();\n  });\n\n  it(\"getTestById\", () => {\n    testSection.getTestById(MockTestData[0].id);\n    expect(testSection.testDetails).toBe(mockData[0]);\n    expect(testSection.testDetails.testName).toBe(MockTestData[0].testName);\n  });\n\n  it(\"getTestById error handling\", () => {\n    testSection.getTestById(5);\n    expect(MdSnackBar.prototype.open).toHaveBeenCalled();\n    expect(routeTo[0]).toBe(\"/tests\");\n  });\n\n  it(\"onSelect\", () => {\n    spyOn(TestService.prototype, \"deselectCategory\").and.callFake(function (\n      categoryId: number,\n      testId: number\n    ) {\n      const test = MockTestData.find((x) => x.id === testId);\n      const category = test.categoryAcList.find((x) => x.id === categoryId);\n      return observableOf(category.questionList !== null);\n    });\n    spyOn(testSection.dialog, \"open\").and.callThrough();\n    spyOn(MdDialogRef.prototype, \"afterClosed\").and.returnValue(\n      observableOf(true)\n    );\n    testSection.isEditTestEnabled = true;\n    testSection.getTestById(MockTestData[0].id);\n    testSection.onSelect(MockTestData[0].categoryAcList[0]);\n    expect(testSection.dialog.open).toHaveBeenCalled();\n    expect(MdDialogRef.prototype.afterClosed).toHaveBeenCalled();\n  });\n\n  it(\"onSelect False condition\", () => {\n    spyOn(TestService.prototype, \"deselectCategory\").and.returnValue(\n      observableOf(false)\n    );\n    testSection.getTestById(MockTestData[0].id);\n    testSection.isEditTestEnabled = true;\n    MockTestData[0].categoryAcList[0].isSelect = true;\n    testSection.onSelect(MockTestData[0].categoryAcList[0]);\n  });\n\n  it(\"onSelect Error Handling\", () => {\n    spyOn(TestService.prototype, \"deselectCategory\").and.returnValue(\n      observableThrowError(\"Internal server Error\")\n    );\n    testSection.getTestById(MockTestData[0].id);\n    testSection.isEditTestEnabled = true;\n    MockTestData[0].categoryAcList[0].isSelect = true;\n    testSection.onSelect(MockTestData[0].categoryAcList[0]);\n  });\n\n  it(\"saveCategoryToExitOrMoveNext\", () => {\n    spyOn(TestService.prototype, \"addTestCategories\").and.returnValue(\n      observableOf(true)\n    );\n    testSection.getTestById(MockTestData[0].id);\n    testSection.testId = MockTestData[0].id;\n    testSection.isEditTestEnabled = true;\n    testSection.saveCategoryToExitOrMoveNext(true);\n    expect(routeTo[0]).toBe(\"/tests/\" + MockTestData[0].id + \"/questions\");\n    testSection.saveCategoryToExitOrMoveNext(false);\n    expect(routeTo[0]).toBe(\"/tests\");\n    testSection.isEditTestEnabled = false;\n    testSection.saveCategoryToExitOrMoveNext(true);\n    expect(routeTo[0]).toBe(\"/tests/\" + MockTestData[0].id + \"/questions\");\n    testSection.saveCategoryToExitOrMoveNext(false);\n    expect(routeTo[0]).toBe(\"/tests\");\n  });\n\n  it(\"saveCategoryToExitOrMoveNext error handling\", () => {\n    spyOn(TestService.prototype, \"addTestCategories\").and.returnValue(\n      observableThrowError(\"error\")\n    );\n    testSection.getTestById(MockTestData[0].id);\n    testSection.testId = MockTestData[0].id;\n    testSection.isEditTestEnabled = true;\n    testSection.saveCategoryToExitOrMoveNext(true);\n    expect(MdSnackBar.prototype.open).toHaveBeenCalled();\n  });\n\n  it(\"isAttendeeExist \", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(\n      (testId: number) => {\n        const test = MockTestData.find((x) => x.id === testId);\n        return observableOf({ response: test.numberOfTestAttendees !== 0 });\n      }\n    );\n    testSection.testId = MockTestData[0].id;\n    testSection.isTestAttendeeExist();\n    expect(testSection.isEditTestEnabled).toBe(false);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-sections\\test-sections.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-settings\\incomplete-test-creation-dialog.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-settings\\test-settings.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\test-settings\\test-settings.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n  BehaviorSubject,\n} from \"rxjs\";\nimport { ComponentFixture, TestBed } from \"@angular/core/testing\";\nimport { async } from \"@angular/core/testing\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { FormsModule, FormGroup } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogRef,\n  OverlayRef,\n  MdDialogModule,\n  MdDialog,\n  MdSnackBar,\n  MdSnackBarRef,\n} from \"@angular/material\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from \"@angular/platform-browser-dynamic/testing\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport { QuestionsService } from \"../../questions/questions.service\";\nimport { Http, HttpModule, ResponseOptions } from \"@angular/http\";\nimport { TestService } from \"../tests.service\";\nimport { inject } from \"@angular/core/testing\";\nimport { Test } from \"../tests.model\";\nimport { testsRouting } from \"../tests.routing\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { HttpService } from \"../../core/http.service\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { tick } from \"@angular/core/testing\";\nimport { Location, LocationStrategy, APP_BASE_HREF } from \"@angular/common\";\nimport { NgModule, Input, Output, EventEmitter } from \"@angular/core\";\nimport { fakeAsync } from \"@angular/core/testing\";\nimport { PopoverModule } from \"ngx-popover\";\nimport { ClipboardModule } from \"ngx-clipboard\";\nimport { Md2AccordionModule } from \"md2\";\nimport { Category } from \"../../questions/category.model\";\nimport { QuestionBase } from \"../../questions/question\";\nimport { QuestionType } from \"../../questions/enum-questiontype\";\nimport { DifficultyLevel } from \"../../questions/enum-difficultylevel\";\nimport { TestSettingsComponent } from \"./test-settings.component\";\nimport { CreateTestHeaderComponent } from \"../shared/create-test-header/create-test-header.component\";\nimport { CreateTestFooterComponent } from \"../shared/create-test-footer/create-test-footer.component\";\nimport { IncompleteTestCreationDialogComponent } from \"./incomplete-test-creation-dialog.component\";\nimport { TestIPAddress } from \"../test-IPAdddress\";\nimport { MockRouteService } from \"../../questions/questions-single-multiple-answer/mock-route.service\";\n\nclass MockRouter {\n  navigate() {\n    return true;\n  }\n\n  isActive() {\n    return true;\n  }\n\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\nclass MockError {\n  json(): Observable<any> {\n    return observableOf({ error: [\"Settings cannot be updated\"] });\n  }\n}\n\ndescribe(\"Test Settings Component\", () => {\n  let testSettings: TestSettingsComponent;\n  let fixture: ComponentFixture<TestSettingsComponent>;\n\n  const question = new QuestionBase();\n  question.question.id = 3;\n  question.question.categoryID = 3;\n  question.question.questionDetail = \"Who was the father of Akbar?\";\n  question.question.questionType = QuestionType.singleAnswer;\n  question.question.difficultyLevel = DifficultyLevel.Easy;\n  question.singleMultipleAnswerQuestion = null;\n  question.codeSnippetQuestion = null;\n  question.question.isSelect = true;\n\n  const category = new Category();\n  category.id = 3;\n  category.categoryName = \"history\";\n  category.isSelect = true;\n  category.numberOfSelectedQuestion = 0;\n  category.questionList[0] = question;\n  category.isAccordionOpen = false;\n  category.isAlreadyClicked = false;\n\n  const testIpAddress = new TestIPAddress();\n  testIpAddress.id = 1;\n  testIpAddress.ipAddress = \"101.20.57.45\";\n  testIpAddress.testId = 3;\n\n  const test = new Test();\n  test.id = 3;\n  test.numberOfTestAttendees = 2;\n  test.testName = \"History\";\n  test.link = \"a6thsjk8\";\n  test.duration = 10;\n  test.warningTime = 5;\n  test.focusLostTime = 5;\n  test.browserTolerance = 0;\n  test.startDate = \"2017-10-16T06:51:49.4283026Z\";\n  test.endDate = \"2017-10-17T06:51:49.4283026Z\";\n  test.testIpAddress[0] = testIpAddress;\n\n  let urls: any[];\n  let route: ActivatedRoute;\n  let router: Router;\n\n  class MockDialog {\n    open() {\n      return true;\n    }\n\n    close() {\n      return true;\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.overrideModule(BrowserDynamicTestingModule, {\n      set: {\n        entryComponents: [IncompleteTestCreationDialogComponent],\n      },\n    });\n\n    TestBed.configureTestingModule({\n      declarations: [\n        TestSettingsComponent,\n        CreateTestHeaderComponent,\n        CreateTestFooterComponent,\n        IncompleteTestCreationDialogComponent,\n      ],\n\n      providers: [\n        TestService,\n        HttpService,\n        { provide: MdDialogRef, useClass: MockDialog },\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n        MockRouteService,\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule.forRoot([]),\n        HttpModule,\n        BrowserAnimationsModule,\n        PopoverModule,\n        ClipboardModule,\n        Md2AccordionModule,\n        MdDialogModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(TestSettingsComponent);\n    testSettings = fixture.componentInstance;\n  });\n\n  it(\"should get test details by id\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    testSettings.getTestById(test.id);\n    expect(testSettings.testNameReference).toBe(test.testName);\n    expect(testSettings.testLink).toContain(test.link);\n  });\n\n  it(\"should check whether the warning time is valid\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    testSettings.isWarningTimeValid();\n    expect(testSettings.validTime).toBe(false);\n    testSettings.testDetails.warningTime = 25;\n    testSettings.testDetails.duration = 5;\n    testSettings.isWarningTimeValid();\n    expect(testSettings.validTime).toBe(true);\n  });\n\n  it(\"should check end date is valid\", () => {\n    testSettings.testDetails.startDate = test.startDate;\n    testSettings.isEndDateValid(test.endDate);\n    expect(testSettings.validEndDate).toBe(false);\n  });\n\n  it(\"should check end date is invalid\", () => {\n    testSettings.testDetails.startDate = \"2017-10-21T06:51:49.4283026Z\";\n    testSettings.isEndDateValid(test.endDate);\n    expect(testSettings.validEndDate).toBe(true);\n    expect(testSettings.validStartDate).toBe(false);\n  });\n\n  it(\"should check start date is valid\", () => {\n    testSettings.testDetails.startDate = test.startDate;\n    testSettings.isStartDateValid();\n    expect(testSettings.validStartDate).toBe(true);\n    expect(testSettings.validEndDate).toBe(false);\n    testSettings.testDetails.startDate = \"2017-12-16T06:51:49.4283026Z\";\n    testSettings.testDetails.endDate = test.endDate;\n    testSettings.isStartDateValid();\n    expect(testSettings.validStartDate).toBe(true);\n    expect(testSettings.validEndDate).toBe(true);\n  });\n\n  it(\"should check ip address is added\", () => {\n    testSettings.IpAddressAdded(testIpAddress.ipAddress);\n    expect(testSettings.isIpAddressAdded).toBe(true);\n  });\n\n  it(\"should check ip address is not added\", () => {\n    testIpAddress.ipAddress = \"\";\n    testSettings.IpAddressAdded(testIpAddress.ipAddress);\n    expect(testSettings.isIpAddressAdded).toBe(false);\n  });\n\n  it(\"should show error message\", () => {\n    testIpAddress.ipAddress = \"\";\n    testSettings.showErrorMessage(testIpAddress);\n    expect(testIpAddress.isErrorMessageVisible).toBe(true);\n    testIpAddress.ipAddress = undefined;\n    testSettings.showErrorMessage(testIpAddress);\n    expect(testIpAddress.isErrorMessageVisible).toBe(true);\n  });\n\n  it(\"should update the test settings\", () => {\n    spyOn(TestService.prototype, \"updateTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(testSettings.snackbarRef, \"open\").and.callThrough();\n    testSettings.saveTestSettings(test.id, test);\n    router = TestBed.get(Router);\n    spyOn(router, \"navigate\").and.callFake(function (url: any[]) {\n      urls = url;\n      expect(urls[0]).toBe(\"/tests\");\n    });\n    expect(testSettings.snackbarRef.open).toHaveBeenCalled();\n  });\n\n  it(\"should open the incomplete test creation dialog box asking the user to select sections for the test\", () => {\n    spyOn(TestService.prototype, \"updateTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(testSettings.dialog, \"open\").and.callThrough();\n    testSettings.testDetails = test;\n    testSettings.launchTestDialog(test.id, test, test.isLaunched);\n    expect(testSettings.testDetails.isQuestionMissing).toBe(false);\n    expect(testSettings.dialog.open).toHaveBeenCalled();\n  });\n\n  it(\"should open the incomplete test creation dialog box asking the user to select questions for the test\", () => {\n    spyOn(TestService.prototype, \"updateTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(testSettings.dialog, \"open\").and.callThrough();\n    test.categoryAcList[0] = category;\n    testSettings.testDetails = test;\n    testSettings.launchTestDialog(test.id, test, test.isLaunched);\n    expect(testSettings.testDetails.isQuestionMissing).toBe(true);\n    expect(testSettings.dialog.open).toHaveBeenCalled();\n  });\n\n  it(\"should launch the test\", () => {\n    spyOn(TestService.prototype, \"updateTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(testSettings.snackbarRef, \"open\").and.callThrough();\n    category.numberOfSelectedQuestion = 1;\n    test.categoryAcList[0] = category;\n    testSettings.testDetails = test;\n    let isTestLaunched: boolean;\n    testSettings.launchTestDialog(test.id, test, isTestLaunched);\n    testSettings.getTestById(test.id);\n    expect(testSettings.testDetails.isLaunched).toBe(true);\n    expect(testSettings.snackbarRef.open).toHaveBeenCalled();\n  });\n\n  it(\"should not get test details by id\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableThrowError(Error);\n    });\n    router = TestBed.get(Router);\n    spyOn(router, \"navigate\").and.callFake(function (url: any) {\n      urls = url;\n    });\n    spyOn(testSettings.snackbarRef, \"open\").and.callThrough();\n    testSettings.getTestById(test.id);\n    expect(testSettings.loader).toBe(false);\n    expect(urls[0]).toBe(\"/tests\");\n    expect(testSettings.snackbarRef.open).toHaveBeenCalled();\n  });\n\n  it(\"should not update the changes made in the settings of a test\", () => {\n    spyOn(TestService.prototype, \"updateTestById\").and.callFake(() => {\n      return observableThrowError(new MockError());\n    });\n    spyOn(testSettings.snackbarRef, \"open\").and.callThrough();\n    testSettings.saveTestSettings(test.id, test);\n    expect(testSettings.loader).toBe(false);\n    expect(testSettings.snackbarRef.open).toHaveBeenCalled();\n  });\n\n  it(\"should call showTooltipMessage()\", () => {\n    const event: any = {};\n    event.stopPropagation = function () {};\n    const element: any = {};\n    element.select = function () {};\n    testSettings.showTooltipMessage(event, element);\n    expect(testSettings.tooltipMessage).toBe(\"Copied\");\n  });\n\n  it(\"should change the tooltip message\", () => {\n    testSettings.changeTooltipMessage();\n    expect(testSettings.tooltipMessage).toBe(\"Copy to Clipboard\");\n  });\n\n  it(\"should not launch the test\", () => {\n    spyOn(TestService.prototype, \"updateTestById\").and.callFake(() => {\n      return observableThrowError(new MockError());\n    });\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(testSettings.snackbarRef, \"open\").and.callThrough();\n    category.numberOfSelectedQuestion = 1;\n    test.categoryAcList[0] = category;\n    testSettings.testDetails = test;\n    let isTestLaunched: boolean;\n    testSettings.launchTestDialog(test.id, test, isTestLaunched);\n    testSettings.getTestById(test.id);\n    expect(testSettings.snackbarRef.open).toHaveBeenCalled();\n  });\n\n  it(\"should pause the test\", () => {\n    spyOn(TestService.prototype, \"updateTestPauseResume\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(testSettings.snackbarRef, \"open\").and.callThrough();\n    testSettings.pauseTest();\n    expect(testSettings.testDetails.isPaused).toBe(true);\n    expect(testSettings.snackbarRef.open).toHaveBeenCalled();\n  });\n\n  it(\"should not pause the test\", () => {\n    spyOn(TestService.prototype, \"updateTestPauseResume\").and.callFake(() => {\n      return observableOf(false);\n    });\n    spyOn(testSettings.snackbarRef, \"open\").and.callThrough();\n    testSettings.pauseTest();\n    expect(testSettings.snackbarRef.open).toHaveBeenCalledTimes(0);\n  });\n\n  it(\"should call IsFocusLostValid()\", () => {\n    testSettings.testDetails = test;\n    testSettings.IsFocusLostValid();\n    expect(testSettings.isFocusLostNull).toBe(false);\n  });\n\n  it(\"should call changeFocusValue()\", () => {\n    testSettings.testDetails = test;\n    testSettings.changeFocusValue();\n    expect(testSettings.isFocusLostNull).toBe(false);\n    expect(testSettings.testDetails.focusLostTime).toBe(0);\n    testSettings.testDetails.browserTolerance = 1;\n    testSettings.changeFocusValue();\n    expect(testSettings.testDetails.focusLostTime).toBe(5);\n  });\n\n  it(\"should resume the test\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(TestService.prototype, \"updateTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(testSettings.snackbarRef, \"open\").and.callThrough();\n    testSettings.testDetails = test;\n    testSettings.resumeTest();\n    expect(testSettings.testDetails.isPaused).toBe(false);\n    expect(testSettings.snackbarRef.open).toHaveBeenCalled();\n  });\n\n  it(\"should not resume the test\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(TestService.prototype, \"updateTestById\").and.callFake(() => {\n      return observableOf(\"\");\n    });\n    spyOn(testSettings.snackbarRef, \"open\").and.callThrough();\n    testSettings.testDetails = test;\n    testSettings.resumeTest();\n    expect(testSettings.snackbarRef.open).toHaveBeenCalledTimes(0);\n    expect(TestService.prototype.getTestById).toHaveBeenCalledTimes(0);\n  });\n\n  it(\"should add ip address fields\", () => {\n    testSettings.addIpFields();\n    expect(testSettings.testDetails.testIpAddress.length).toBe(1);\n  });\n\n  it(\"should remove ip address fields\", () => {\n    spyOn(TestService.prototype, \"deleteTestipAddress\").and.callFake(() => {\n      return observableOf(\"\");\n    });\n    testSettings.removeIpAddress(0, testIpAddress.id, testIpAddress.ipAddress);\n    expect(TestService.prototype.deleteTestipAddress).toHaveBeenCalled();\n    testIpAddress.id = undefined;\n    testSettings.removeIpAddress(0, testIpAddress.id, testIpAddress.ipAddress);\n    expect(testSettings.isIpAddressAdded).toBe(true);\n    const testIpAddress1 = new TestIPAddress();\n    testIpAddress1.id = 2;\n    testIpAddress1.ipAddress = \"102.21.55.35\";\n    testIpAddress1.testId = 3;\n    test.testIpAddress[1] = testIpAddress1;\n    testSettings.testDetails = test;\n    testSettings.removeIpAddress(0, testIpAddress.id, testIpAddress.ipAddress);\n    expect(testSettings.isIpAddressAdded).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-settings\\test-settings.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-view\\test-view.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\test-view\\test-view.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n  BehaviorSubject,\n} from \"rxjs\";\nimport { ComponentFixture, TestBed } from \"@angular/core/testing\";\nimport { async } from \"@angular/core/testing\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogRef,\n  OverlayRef,\n  MdDialogModule,\n  MdDialog,\n  MdSnackBar,\n} from \"@angular/material\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from \"@angular/platform-browser-dynamic/testing\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport { QuestionsService } from \"../../questions/questions.service\";\nimport { Http, HttpModule } from \"@angular/http\";\nimport { TestService } from \"../tests.service\";\nimport { inject } from \"@angular/core/testing\";\nimport { Test } from \"../tests.model\";\nimport { testsRouting } from \"../tests.routing\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { HttpService } from \"../../core/http.service\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { tick } from \"@angular/core/testing\";\nimport { Location, LocationStrategy } from \"@angular/common\";\nimport { NgModule, Input, EventEmitter, Output } from \"@angular/core\";\nimport { fakeAsync } from \"@angular/core/testing\";\nimport { DeleteTestDialogComponent } from \"../tests-dashboard/delete-test-dialog.component\";\nimport { DuplicateTestDialogComponent } from \"../tests-dashboard/duplicate-test-dialog.component\";\nimport { TestViewComponent } from \"./test-view.component\";\nimport { PopoverModule } from \"ngx-popover\";\nimport { ClipboardModule } from \"ngx-clipboard\";\nimport { Md2AccordionModule } from \"md2\";\nimport { Category } from \"../../questions/category.model\";\nimport { QuestionBase } from \"../../questions/question\";\nimport { QuestionType } from \"../../questions/enum-questiontype\";\nimport { DifficultyLevel } from \"../../questions/enum-difficultylevel\";\nimport { TestSectionsComponent } from \"../test-sections/test-sections.component\";\nimport { CreateTestHeaderComponent } from \"../shared/create-test-header/create-test-header.component\";\nimport { CreateTestFooterComponent } from \"../shared/create-test-footer/create-test-footer.component\";\nimport { MockRouteService } from \"../../questions/questions-single-multiple-answer/mock-route.service\";\n\nclass MockRouter {\n  navigate() {\n    return true;\n  }\n\n  isActive() {\n    return true;\n  }\n\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\ndescribe(\"Test View Component\", () => {\n  let testView: TestViewComponent;\n  let fixture: ComponentFixture<TestViewComponent>;\n\n  const question = new QuestionBase();\n  question.question.id = 2;\n  question.question.categoryID = 2;\n  question.question.questionDetail = \"Who was the father of Akbar?\";\n  question.question.questionType = QuestionType.singleAnswer;\n  question.question.difficultyLevel = DifficultyLevel.Easy;\n  question.singleMultipleAnswerQuestion = null;\n  question.codeSnippetQuestion = null;\n  question.question.isSelect = true;\n\n  const category = new Category();\n  category.id = 2;\n  category.categoryName = \"history\";\n  category.isSelect = true;\n  category.numberOfSelectedQuestion = 0;\n  category.questionList[0] = question;\n  category.isAccordionOpen = false;\n  category.isAlreadyClicked = false;\n\n  const test = new Test();\n  test.id = 2;\n  test.numberOfTestAttendees = 2;\n  test.testName = \"History\";\n  test.isEditTestEnabled = true;\n  test.link = \"a6thsjk8\";\n  test.categoryAcList[0] = category;\n\n  let router: Router;\n  let urls: any[];\n  let route: ActivatedRoute;\n\n  class MockDialog {\n    open() {\n      return true;\n    }\n\n    close() {\n      return true;\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.overrideModule(BrowserDynamicTestingModule, {\n      set: {\n        entryComponents: [\n          TestViewComponent,\n          DeleteTestDialogComponent,\n          DuplicateTestDialogComponent,\n          TestSectionsComponent,\n        ],\n      },\n    });\n\n    TestBed.configureTestingModule({\n      declarations: [\n        TestViewComponent,\n        DeleteTestDialogComponent,\n        DuplicateTestDialogComponent,\n        TestSectionsComponent,\n        CreateTestHeaderComponent,\n        CreateTestFooterComponent,\n      ],\n\n      providers: [\n        TestService,\n        HttpService,\n        MdDialogModule,\n        MdSnackBar,\n        { provide: Router, useClass: MockRouter },\n        { provide: MdDialogRef, useClass: MockDialog },\n        {\n          provide: ActivatedRoute,\n          useValue: { params: observableOf({ id: 123 }) },\n        },\n        MockRouteService,\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule,\n        HttpModule,\n        BrowserAnimationsModule,\n        PopoverModule,\n        ClipboardModule,\n        Md2AccordionModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(TestViewComponent);\n    testView = fixture.componentInstance;\n  });\n\n  it(\"should not edit test when attendees exists for a particular test\", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(testView, \"editTest\").and.callThrough();\n    testView.editTest(test);\n    expect(testView.editTest).toHaveBeenCalled();\n  });\n\n  it(\"should open delete test dialog on call of deleteTestDialog with a message informing test cannot be deleted\", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      const result = new BehaviorSubject(true);\n      return result.asObservable();\n    });\n    spyOn(testView.dialog, \"open\").and.callThrough();\n    testView.deleteTestDialog(test);\n    expect(testView.isDeleteAllowed).toBe(false);\n    expect(testView.deleteTestDialogData.testToDelete).toBe(test);\n    expect(testView.deleteTestDialogData.testArray).toBe(testView.tests);\n    expect(testView.dialog.open).toHaveBeenCalled();\n  });\n\n  it(\"should open delete test dialog on call of deleteTestDialog with a message confirming if the user wants to delete the test\", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      const result = new BehaviorSubject(false);\n      return result.asObservable();\n    });\n    spyOn(testView.dialog, \"open\").and.callThrough();\n    testView.deleteTestDialog(test);\n    expect(testView.isDeleteAllowed).toBe(true);\n    expect(testView.deleteTestDialogData.testToDelete).toBe(test);\n    expect(testView.deleteTestDialogData.testArray).toBe(testView.tests);\n    expect(testView.dialog.open).toHaveBeenCalled();\n  });\n\n  it(\"should open duplicate test dialog on call of duplicateTestDialog and display test name as testName_copy\", () => {\n    spyOn(TestService.prototype, \"setTestCopiedNumber\").and.callFake(() => {\n      const result = new BehaviorSubject(1);\n      return result.asObservable();\n    });\n    spyOn(testView.dialog, \"open\").and.callThrough();\n    testView.duplicateTestDialog(test);\n    expect(testView.count).toBe(1);\n    expect(testView.duplicateTestDialogData.testName).toBe(\n      test.testName + \"_copy\"\n    );\n    expect(testView.duplicateTestDialogData.testArray).toBe(testView.tests);\n    expect(testView.duplicateTestDialogData.testToDuplicate).toBe(test);\n    expect(testView.dialog.open).toHaveBeenCalled();\n  });\n\n  it(\"should open duplicate test dialog on call of duplicateTestDialog and display test name as testName_copy_5 [number of times the test has been copied]\", () => {\n    spyOn(TestService.prototype, \"setTestCopiedNumber\").and.callFake(() => {\n      const result = new BehaviorSubject(5);\n      return result.asObservable();\n    });\n    spyOn(testView.dialog, \"open\").and.callThrough();\n    testView.duplicateTestDialog(test);\n    expect(testView.count).toBe(5);\n    expect(testView.duplicateTestDialogData.testName).toBe(\n      test.testName + \"_copy_\" + testView.count\n    );\n    expect(testView.duplicateTestDialogData.testArray).toBe(testView.tests);\n    expect(testView.duplicateTestDialogData.testToDuplicate).toBe(test);\n    expect(testView.dialog.open).toHaveBeenCalled();\n  });\n\n  it(\"should check that editing of test is enabled when number of attendees is 0\", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      return observableOf(false);\n    });\n    testView.isTestAttendeeExist();\n    expect(testView.isEditTestEnabled).toBe(true);\n  });\n\n  it(\"should check that editing of test is disabled when number of attendees exist for the test\", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      return observableOf(true);\n    });\n    testView.isTestAttendeeExist();\n    expect(testView.isEditTestEnabled).toBe(false);\n  });\n\n  it(\"should get all tests\", () => {\n    spyOn(TestService.prototype, \"getTests\").and.callFake(() => {\n      return observableOf(MockTestData);\n    });\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      return observableOf(false);\n    });\n    testView.getAllTests();\n    expect(testView.tests.length).toBe(2);\n    expect(TestService.prototype.isTestAttendeeExist).toHaveBeenCalled();\n  });\n\n  it(\"should get the details of the test with category selected and number of questions selected 0\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    testView.getTestDetails(test.id);\n    expect(testView.isCategorySelected).toBe(true);\n    expect(testView.testDetails.categoryAcList[0].isQuestionAbsent).toBe(true);\n  });\n\n  it(\"should get the details of the test with no category selected\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    category.isSelect = false;\n    testView.getTestDetails(test.id);\n    expect(testView.isCategorySelected).toBe(false);\n  });\n\n  it(\"should get the details of the test with no questions selected of a particular category\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    category.numberOfSelectedQuestion = 2;\n    testView.getTestDetails(test.id);\n    expect(testView.testDetails.categoryAcList[0].isQuestionAbsent).toBe(false);\n  });\n\n  it(\"should check that preview of test is disabled\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    testView.getTestDetails(test.id);\n    expect(testView.disablePreview).toBe(true);\n  });\n\n  it(\"should get all the questions of the selected category\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(TestService.prototype, \"getQuestions\").and.callFake(() => {\n      return observableOf(category.questionList);\n    });\n    testView.getTestDetails(test.id);\n    testView.getAllquestions(category, 0);\n    expect(category.isAccordionOpen).toBe(true);\n    expect(category.isAlreadyClicked).toBe(true);\n    expect(testView.totalNumberOfQuestions[0]).toBe(1);\n    expect(\n      testView.testDetails.categoryAcList[0].numberOfSelectedQuestion\n    ).toBe(1);\n    expect(category.selectAll).toBe(true);\n  });\n\n  it(\"should not get all the questions of the selected category when category is already clicked\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(TestService.prototype, \"getQuestions\").and.callFake(() => {\n      return observableOf(category.questionList);\n    });\n    category.isAccordionOpen = false;\n    category.isAlreadyClicked = true;\n    testView.getAllquestions(category, 0);\n    expect(test.categoryAcList[0].isAlreadyClicked).toBe(true);\n  });\n\n  it(\"should not get all questions when accodion is already open\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableOf(test);\n    });\n    spyOn(TestService.prototype, \"getQuestions\").and.callFake(() => {\n      return observableOf(category.questionList);\n    });\n    category.isAccordionOpen = true;\n    testView.getAllquestions(category, 0);\n    expect(test.categoryAcList[0].isAccordionOpen).toBe(false);\n  });\n\n  it(\"should navigate to the test settings page\", () => {\n    router = TestBed.get(Router);\n    testView.testId = test.id;\n    testView.navigateToTestSettings();\n    spyOn(router, \"navigate\").and.callFake(function (url: any[]) {\n      urls = url;\n      expect(urls[0]).toBe(\"/tests/\" + test.id + \"/settings\");\n    });\n  });\n\n  it(\"should not get the details of the test on getting error\", () => {\n    spyOn(TestService.prototype, \"getTestById\").and.callFake(() => {\n      return observableThrowError(Error);\n    });\n    spyOn(testView.snackBar, \"open\").and.callThrough();\n    spyOn(Router.prototype, \"navigate\").and.callFake(function (url: any[]) {\n      urls = url;\n      expect(urls[0]).toBe(\"/tests\");\n    });\n    testView.getTestDetails(test.id);\n    expect(testView.loader).toBe(false);\n    expect(testView.snackBar.open).toHaveBeenCalled();\n  });\n\n  it(\"should call isCorrectAnswer\", () => {\n    spyOn(testView, \"isCorrectAnswer\").and.callThrough();\n    testView.isCorrectAnswer(true);\n    testView.isCorrectAnswer(false);\n    expect(testView.isCorrectAnswer).toHaveBeenCalledTimes(2);\n  });\n\n  it(\"should call showTooltipMessage()\", () => {\n    const event: any = {};\n    event.stopPropagation = function () {};\n    const element: any = {};\n    element.select = function () {};\n    testView.showTooltipMessage(event, element);\n    expect(testView.tooltipMessage).toBe(\"Copied\");\n  });\n\n  it(\"should change the tooltip message\", () => {\n    testView.changeTooltipMessage();\n    expect(testView.tooltipMessage).toBe(\"Copy to Clipboard\");\n  });\n\n  it(\"should edit test on number of attendees for a particular test is 0\", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      return observableOf(false);\n    });\n    testView.editTest(test);\n    spyOn(Router.prototype, \"navigate\").and.callFake(function (url: any[]) {\n      urls = url;\n      expect(urls[0]).toBe(\"/tests/\" + test.id + \"/sections\");\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\test-view\\test-view.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests-dashboard\\delete-test-dialog.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\tests-dashboard\\delete-test-dialog.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n  BehaviorSubject,\n} from \"rxjs\";\nimport { TestsDashboardComponent } from \"./tests-dashboard.component\";\nimport { ComponentFixture, TestBed } from \"@angular/core/testing\";\nimport { async } from \"@angular/core/testing\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogRef,\n  OverlayRef,\n  MdDialogModule,\n  MdDialog,\n} from \"@angular/material\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from \"@angular/platform-browser-dynamic/testing\";\nimport { RouterModule, Router } from \"@angular/router\";\nimport { FilterPipe } from \"./test-dashboard.pipe\";\nimport { QuestionsService } from \"../../questions/questions.service\";\nimport { Http, HttpModule } from \"@angular/http\";\nimport { TestService } from \"../tests.service\";\nimport { inject } from \"@angular/core/testing\";\nimport { Test } from \"../tests.model\";\nimport { testsRouting } from \"../tests.routing\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { TestCreateDialogComponent } from \"./test-create-dialog.component\";\nimport { HttpService } from \"../../core/http.service\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { tick } from \"@angular/core/testing\";\nimport { Location, LocationStrategy } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { fakeAsync } from \"@angular/core/testing\";\nimport { DeleteTestDialogComponent } from \"./delete-test-dialog.component\";\nimport { AppComponent } from \"../../app.component\";\nimport { SharedModule } from \"../../shared/shared.module\";\nimport { MdSnackBar } from \"@angular/material\";\nimport { MockRouteService } from \"../../questions/questions-single-multiple-answer/mock-route.service\";\n\nclass MockRouter {\n  navigate() {\n    return true;\n  }\n\n  isActive() {\n    return true;\n  }\n\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\nclass MockDialog {\n  close() {\n    return true;\n  }\n}\n\nclass MockSnackBar {\n  open() {\n    return true;\n  }\n}\n\ndescribe(\"Delete Test Dialog Component\", () => {\n  let deleteTestDialogComponent: DeleteTestDialogComponent;\n  let fixture: ComponentFixture<DeleteTestDialogComponent>;\n  const test = new Test();\n  test.id = 1;\n  test.testName = \"History\";\n  test.warningTime = 5;\n  test.numberOfTestAttendees = 0;\n  let router: Router;\n  let snackbar;\n  let urls: any[];\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [DeleteTestDialogComponent],\n\n      providers: [\n        TestService,\n        HttpService,\n        MdDialogModule,\n        { provide: Router, useClass: MockRouter },\n        { provide: MdDialogRef, useClass: MockDialog },\n        { provide: MdSnackBar, useClass: MockSnackBar },\n        MockRouteService,\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule,\n        HttpModule,\n        BrowserAnimationsModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(DeleteTestDialogComponent);\n    deleteTestDialogComponent = fixture.componentInstance;\n  });\n\n  it(\"should delete the test\", () => {\n    const url = \"/tests/1/view\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    spyOn(TestService.prototype, \"deleteTest\").and.callFake(() => {\n      return observableOf(\"\");\n    });\n    spyOn(deleteTestDialogComponent.snackBar, \"open\").and.callThrough();\n    spyOn(deleteTestDialogComponent.dialog, \"close\").and.callThrough();\n    spyOn(Router.prototype, \"navigate\").and.callFake(function (url: any[]) {\n      urls = url;\n      expect(urls[0]).toBe(\"/tests\");\n    });\n    deleteTestDialogComponent.testToDelete = test;\n    deleteTestDialogComponent.testArray[0] = test;\n    deleteTestDialogComponent.deleteTest();\n    expect(deleteTestDialogComponent.testArray.length).toBe(0);\n    expect(deleteTestDialogComponent.snackBar.open).toHaveBeenCalled();\n    expect(deleteTestDialogComponent.dialog.close).toHaveBeenCalled();\n  });\n\n  it(\"should not delete the test on getting error\", () => {\n    spyOn(TestService.prototype, \"deleteTest\").and.callFake(() => {\n      return observableThrowError(Error);\n    });\n    spyOn(deleteTestDialogComponent.snackBar, \"open\").and.callThrough();\n    spyOn(deleteTestDialogComponent.dialog, \"close\").and.callThrough();\n    deleteTestDialogComponent.testToDelete = test;\n    deleteTestDialogComponent.testArray[0] = test;\n    deleteTestDialogComponent.deleteTest();\n    expect(deleteTestDialogComponent.testArray.length).toBe(1);\n    expect(deleteTestDialogComponent.snackBar.open).toHaveBeenCalled();\n    expect(deleteTestDialogComponent.dialog.close).toHaveBeenCalledTimes(0);\n  });\n\n  it(\"should not be in test view page\", () => {\n    const url = \"/\";\n    spyOn(MockRouteService.prototype, \"getCurrentUrl\").and.returnValue(url);\n    spyOn(TestService.prototype, \"deleteTest\").and.callFake(() => {\n      return observableOf(\"\");\n    });\n    spyOn(Router.prototype, \"navigate\").and.callFake(() => {});\n    deleteTestDialogComponent.testToDelete = test;\n    deleteTestDialogComponent.testArray[0] = test;\n    deleteTestDialogComponent.deleteTest();\n    expect(Router.prototype.navigate).toHaveBeenCalledTimes(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests-dashboard\\delete-test-dialog.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests-dashboard\\duplicate-test-dialog.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\tests-dashboard\\duplicate-test-dialog.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n  BehaviorSubject,\n} from \"rxjs\";\nimport { TestsDashboardComponent } from \"./tests-dashboard.component\";\nimport { ComponentFixture, TestBed } from \"@angular/core/testing\";\nimport { async } from \"@angular/core/testing\";\nimport { BrowserModule, By } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogRef,\n  OverlayRef,\n  MdDialogModule,\n  MdDialog,\n  MdSnackBar,\n} from \"@angular/material\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from \"@angular/platform-browser-dynamic/testing\";\nimport { RouterModule, Router } from \"@angular/router\";\nimport { FilterPipe } from \"./test-dashboard.pipe\";\nimport { QuestionsService } from \"../../questions/questions.service\";\nimport { Http, HttpModule } from \"@angular/http\";\nimport { TestService } from \"../tests.service\";\nimport { inject } from \"@angular/core/testing\";\nimport { Test } from \"../tests.model\";\nimport { testsRouting } from \"../tests.routing\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { TestCreateDialogComponent } from \"./test-create-dialog.component\";\nimport { HttpService } from \"../../core/http.service\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { tick } from \"@angular/core/testing\";\nimport { Location, LocationStrategy } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { fakeAsync } from \"@angular/core/testing\";\nimport { DuplicateTestDialogComponent } from \"./duplicate-test-dialog.component\";\n\nclass MockRouter {\n  navigate() {\n    return true;\n  }\n\n  isActive() {\n    return true;\n  }\n\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\nclass MockDialog {\n  open() {\n    return true;\n  }\n\n  close() {\n    return true;\n  }\n}\n\nclass MockSnackbar {\n  open() {\n    return true;\n  }\n}\n\ndescribe(\"Duplicate Test Dialog Component\", () => {\n  let duplicateTestDialogComponent: DuplicateTestDialogComponent;\n  let fixture: ComponentFixture<DuplicateTestDialogComponent>;\n  let router: Router;\n  let dialog: MdDialog;\n  let urls: any[];\n  const test = new Test();\n  test.id = 1;\n  test.numberOfTestAttendees = 2;\n  test.testName = \"History\";\n  test.isEditTestEnabled = true;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [DuplicateTestDialogComponent],\n\n      providers: [\n        TestService,\n        HttpService,\n        MdDialogModule,\n        { provide: Router, useClass: MockRouter },\n        { provide: MdDialogRef, useClass: MockDialog },\n        { provide: MdDialog, useClass: MockDialog },\n        { provide: MdSnackBar, useClass: MockSnackbar },\n      ],\n\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule,\n        HttpModule,\n        BrowserAnimationsModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(DuplicateTestDialogComponent);\n    duplicateTestDialogComponent = fixture.componentInstance;\n  });\n\n  it(\"should duplicate the test\", fakeAsync(() => {\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(TestService.prototype, \"duplicateTest\").and.callFake(() => {\n      return observableOf(MockTestData[0]);\n    });\n    router = TestBed.get(Router);\n    spyOn(router, \"navigate\").and.callFake(function (url: any) {\n      urls = url;\n    });\n    spyOn(duplicateTestDialogComponent.snackBar, \"open\").and.callThrough();\n    spyOn(duplicateTestDialogComponent.dialog, \"close\").and.callThrough();\n    duplicateTestDialogComponent.testArray[0] = test;\n    duplicateTestDialogComponent.testToDuplicate = test;\n    duplicateTestDialogComponent.duplicateTest();\n    tick();\n    expect(duplicateTestDialogComponent.testArray.length).toBe(2);\n    expect(urls[0]).toBe(\"tests/\" + MockTestData[0].id + \"/sections\");\n    expect(duplicateTestDialogComponent.snackBar.open).toHaveBeenCalled();\n    expect(duplicateTestDialogComponent.dialog.close).toHaveBeenCalled();\n  }));\n\n  it(\"should not make the error value true by not duplicating the test\", fakeAsync(() => {\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(false);\n    });\n    duplicateTestDialogComponent.testToDuplicate = test;\n    duplicateTestDialogComponent.duplicateTest();\n    tick();\n    expect(duplicateTestDialogComponent.error).toBe(true);\n  }));\n\n  it(\"should make the error value false\", () => {\n    duplicateTestDialogComponent.onErrorChange();\n    expect(duplicateTestDialogComponent.error).toBe(false);\n  });\n\n  it(\"should not duplicate the test on getting error\", () => {\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableThrowError(Error);\n    });\n    spyOn(TestService.prototype, \"duplicateTest\").and.callFake(() => {\n      return observableOf(MockTestData[0]);\n    });\n    duplicateTestDialogComponent.testArray[0] = test;\n    duplicateTestDialogComponent.testToDuplicate = test;\n    duplicateTestDialogComponent.duplicateTest();\n    expect(duplicateTestDialogComponent.testArray.length).toBe(1);\n    expect(duplicateTestDialogComponent.loader).toBe(false);\n    expect(TestService.prototype.duplicateTest).toHaveBeenCalledTimes(0);\n  });\n\n  it(\"should not duplicate the test on getting error from duplicate test service\", () => {\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(TestService.prototype, \"duplicateTest\").and.callFake(() => {\n      return observableThrowError(Error);\n    });\n    spyOn(duplicateTestDialogComponent.snackBar, \"open\").and.callThrough();\n    spyOn(duplicateTestDialogComponent.dialog, \"close\").and.callThrough();\n    duplicateTestDialogComponent.testArray[0] = test;\n    duplicateTestDialogComponent.testToDuplicate = test;\n    duplicateTestDialogComponent.duplicateTest();\n    expect(duplicateTestDialogComponent.testArray.length).toBe(1);\n    expect(duplicateTestDialogComponent.loader).toBe(false);\n    expect(duplicateTestDialogComponent.snackBar.open).toHaveBeenCalledTimes(0);\n    expect(duplicateTestDialogComponent.dialog.close).toHaveBeenCalledTimes(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests-dashboard\\duplicate-test-dialog.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests-dashboard\\test-create-dialog.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\tests-dashboard\\test-create-dialog.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  throwError as observableThrowError,\n  of as observableOf,\n  Observable,\n} from \"rxjs\";\nimport { ComponentFixture, TestBed, tick } from \"@angular/core/testing\";\nimport { async, fakeAsync } from \"@angular/core/testing\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { HttpService } from \"../../core/http.service\";\nimport {\n  RouterModule,\n  Router,\n  ActivatedRoute,\n  Routes,\n  Params,\n} from \"@angular/router\";\nimport { QuestionsService } from \"../../questions/questions.service\";\nimport { Http, HttpModule, XHRBackend } from \"@angular/http\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { TestService } from \"../tests.service\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogModule,\n  MdDialog,\n  MdDialogRef,\n  MdSnackBar,\n  MD_DIALOG_DATA,\n  OverlayRef,\n} from \"@angular/material\";\nimport { APP_BASE_HREF } from \"@angular/common\";\nimport { TestCreateDialogComponent } from \"./test-create-dialog.component\";\n\nclass MockMdDialogRef {\n  close(data: any) {\n    return data;\n  }\n}\n\ndescribe(\"Create Test\", () => {\n  let fixture: ComponentFixture<TestCreateDialogComponent>;\n  let createDialog: TestCreateDialogComponent;\n  let routTo: any[];\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [TestCreateDialogComponent],\n      providers: [\n        QuestionsService,\n        { provide: ActivatedRoute, useValue: {} },\n        { provide: MD_DIALOG_DATA },\n        { provide: MdDialogRef, useClass: MockMdDialogRef },\n        TestService,\n        HttpService,\n        MdSnackBar,\n        { provide: APP_BASE_HREF, useValue: \"/\" },\n      ],\n      imports: [\n        BrowserModule,\n        RouterModule.forRoot([]),\n        FormsModule,\n        MaterialModule,\n        HttpModule,\n        BrowserAnimationsModule,\n        MdDialogModule,\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    spyOn(TestService.prototype, \"IsTestNameUnique\").and.returnValue(\n      observableOf(true)\n    );\n    fixture = TestBed.createComponent(TestCreateDialogComponent);\n    createDialog = fixture.componentInstance;\n  });\n\n  it(\"addTest\", () => {\n    spyOn(TestService.prototype, \"addTests\").and.returnValue(\n      observableOf(MockTestData[0])\n    );\n    spyOn(createDialog.dialogRef, \"close\").and.callThrough();\n    spyOn(Router.prototype, \"navigate\").and.callFake((route: any[]) => {\n      routTo = route;\n    });\n    createDialog.addTest(\"Hello\");\n    expect(createDialog.dialogRef.close).toHaveBeenCalledTimes(1);\n    expect(routTo[0]).toBe(\"tests/\" + MockTestData[0].id + \"/sections\");\n  });\n\n  it(\"addTest error handling\", () => {\n    spyOn(TestService.prototype, \"addTests\").and.returnValue(\n      observableThrowError(\"error\")\n    );\n    spyOn(MdSnackBar.prototype, \"open\").and.callThrough();\n    createDialog.addTest(\"Hello\");\n    expect(MdSnackBar.prototype.open).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests-dashboard\\test-create-dialog.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests-dashboard\\test-dashboard.component.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: app\\tests\\tests-dashboard\\test-dashboard.component.spec.ts.\nThe file must be included in at least one of the projects provided."}],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { of as observableOf, Observable, BehaviorSubject } from \"rxjs\";\nimport { TestsDashboardComponent } from \"./tests-dashboard.component\";\nimport { ComponentFixture, TestBed } from \"@angular/core/testing\";\nimport { async } from \"@angular/core/testing\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { FormsModule } from \"@angular/forms\";\nimport {\n  MaterialModule,\n  MdDialogModule,\n  MdDialog,\n  MdDialogRef,\n  OverlayRef,\n  MdSnackBar,\n} from \"@angular/material\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from \"@angular/platform-browser-dynamic/testing\";\nimport { RouterModule, Router, ActivatedRoute } from \"@angular/router\";\nimport { FilterPipe } from \"./test-dashboard.pipe\";\nimport { QuestionsService } from \"../../questions/questions.service\";\nimport { Http, HttpModule, XHRBackend } from \"@angular/http\";\nimport { TestService } from \"../tests.service\";\nimport { inject, tick } from \"@angular/core/testing\";\nimport { Test } from \"../tests.model\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { TestCreateDialogComponent } from \"./test-create-dialog.component\";\nimport { MockTestData } from \"../../Mock_Data/test_data.mock\";\nimport { HttpService } from \"../../core/http.service\";\nimport { fakeAsync } from \"@angular/core/testing\";\nimport { DeleteTestDialogComponent } from \"./delete-test-dialog.component\";\nimport { DuplicateTestDialogComponent } from \"./duplicate-test-dialog.component\";\nimport { MockRouteService } from \"../../questions/questions-single-multiple-answer/mock-route.service\";\n\nclass RouterStub {\n  navigateByUrl(url: string) {\n    return url;\n  }\n  navigate(url: any[]) {\n    return url;\n  }\n  isActive() {\n    return true;\n  }\n}\n\nclass MockDialog {\n  open() {\n    return true;\n  }\n\n  close() {\n    return true;\n  }\n}\n\ndescribe(\"Test Dashboard Component\", () => {\n  let testDashboard: TestsDashboardComponent;\n  let router: Router;\n  let dialog: MdDialog;\n  let fixtureDashboard: ComponentFixture<TestsDashboardComponent>;\n  let http: HttpService;\n  let dialogRef: MdDialogRef<TestCreateDialogComponent>;\n  let mockData: any[] = [];\n  let urlRedirect: any[] = [];\n\n  const test = new Test();\n  test.id = 1;\n  test.numberOfTestAttendees = 2;\n  test.testName = \"History\";\n  test.isEditTestEnabled = true;\n  let urls: any[];\n\n  beforeEach(async(() => {\n    TestBed.overrideModule(BrowserDynamicTestingModule, {\n      set: {\n        entryComponents: [\n          TestCreateDialogComponent,\n          DeleteTestDialogComponent,\n          DuplicateTestDialogComponent,\n        ],\n      },\n    });\n    TestBed.configureTestingModule({\n      declarations: [\n        TestsDashboardComponent,\n        FilterPipe,\n        TestCreateDialogComponent,\n        DeleteTestDialogComponent,\n        DuplicateTestDialogComponent,\n      ],\n      providers: [\n        QuestionsService,\n        TestService,\n        HttpService,\n        { provide: Router, useClass: RouterStub },\n        MockRouteService,\n      ],\n      imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule,\n        RouterModule,\n        HttpModule,\n        BrowserAnimationsModule,\n        MdDialogModule,\n      ],\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    mockData = JSON.parse(JSON.stringify(MockTestData));\n    router = TestBed.get(Router);\n    fixtureDashboard = TestBed.createComponent(TestsDashboardComponent);\n    testDashboard = fixtureDashboard.componentInstance;\n    spyOn(Router.prototype, \"navigate\").and.callFake((url: any[]) => {\n      urlRedirect = url;\n    });\n  });\n\n  it(\"getAllTest\", async(() => {\n    spyOn(TestService.prototype, \"getTests\").and.callFake(() => {\n      const result = new BehaviorSubject(mockData);\n      return result.asObservable();\n    });\n    testDashboard.getAllTests();\n    expect(testDashboard.tests).toBe(mockData);\n  }));\n\n  it(\"createTestDialog \", () => {\n    spyOn(testDashboard.dialog, \"open\").and.callThrough();\n    spyOn(MdDialogRef.prototype, \"afterClosed\").and.returnValue(\n      observableOf(mockData[0])\n    );\n    testDashboard.createTestDialog();\n    expect(testDashboard.dialog.open).toHaveBeenCalled();\n    expect(testDashboard.tests.length).toBe(1);\n  });\n\n  it(\"should edit test on number of attendees for a particular test is 0\", fakeAsync(() => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      return observableOf(false);\n    });\n    router = TestBed.get(Router);\n    spyOn(router, \"navigate\").and.callFake(function (url: any[]) {\n      urls = url;\n    });\n    testDashboard.editTest(test);\n    expect(urls[0]).toBe(\"/tests/\" + test.id + \"/sections\");\n  }));\n\n  it(\"should not edit the test when attendees exist for a particular test\", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      return observableOf(true);\n    });\n    spyOn(testDashboard, \"editTest\").and.callThrough();\n    testDashboard.editTest(test);\n    expect(testDashboard.editTest).toHaveBeenCalled();\n  });\n\n  it(\"should check whether any attendee has taken a particular test\", () => {\n    testDashboard.tests[0] = test;\n    testDashboard.disableEditForTheTestsIfAttendeesExist();\n    expect(testDashboard.tests[0].isEditTestEnabled).toBe(false);\n  });\n\n  it(\"should open delete test dialog on call of deleteTestDialog with a message informing test cannot be deleted\", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      const result = new BehaviorSubject(true);\n      return result.asObservable();\n    });\n    spyOn(testDashboard.dialog, \"open\").and.callThrough();\n    testDashboard.deleteTestDialog(test);\n    expect(testDashboard.isDeleteAllowed).toBe(false);\n    expect(testDashboard.deleteTestDialogData.testToDelete).toBe(test);\n    expect(testDashboard.deleteTestDialogData.testArray).toBe(\n      testDashboard.tests\n    );\n    expect(testDashboard.dialog.open).toHaveBeenCalled();\n  });\n\n  it(\"should open delete test dialog on call of deleteTestDialog with a message confirming if the user wants to delete the test\", () => {\n    spyOn(TestService.prototype, \"isTestAttendeeExist\").and.callFake(() => {\n      const result = new BehaviorSubject(false);\n      return result.asObservable();\n    });\n    spyOn(testDashboard.dialog, \"open\").and.callThrough();\n    testDashboard.deleteTestDialog(test);\n    expect(testDashboard.isDeleteAllowed).toBe(true);\n    expect(testDashboard.deleteTestDialogData.testToDelete).toBe(test);\n    expect(testDashboard.deleteTestDialogData.testArray).toBe(\n      testDashboard.tests\n    );\n    expect(testDashboard.dialog.open).toHaveBeenCalled();\n  });\n\n  it(\"should open duplicate test dialog on call of duplicateTestDialog and display test name as testName_copy_5 [number of times the test has been copied]\", () => {\n    spyOn(TestService.prototype, \"setTestCopiedNumber\").and.callFake(() => {\n      const result = new BehaviorSubject(5);\n      return result.asObservable();\n    });\n    spyOn(testDashboard.dialog, \"open\").and.callThrough();\n    testDashboard.duplicateTestDialog(test);\n    expect(testDashboard.count).toBe(5);\n    expect(testDashboard.duplicateTestDialogData.testName).toBe(\n      test.testName + \"_copy_\" + testDashboard.count\n    );\n    expect(testDashboard.duplicateTestDialogData.testArray).toBe(\n      testDashboard.tests\n    );\n    expect(testDashboard.duplicateTestDialogData.testToDuplicate).toBe(test);\n    expect(testDashboard.dialog.open).toHaveBeenCalled();\n  });\n\n  it(\"should open duplicate test dialog on call of duplicateTestDialog and display test name as testName_copy\", () => {\n    spyOn(TestService.prototype, \"setTestCopiedNumber\").and.callFake(() => {\n      const result = new BehaviorSubject(1);\n      return result.asObservable();\n    });\n    spyOn(testDashboard.dialog, \"open\").and.callThrough();\n    testDashboard.duplicateTestDialog(test);\n    expect(testDashboard.count).toBe(1);\n    expect(testDashboard.duplicateTestDialogData.testName).toBe(\n      test.testName + \"_copy\"\n    );\n    expect(testDashboard.duplicateTestDialogData.testArray).toBe(\n      testDashboard.tests\n    );\n    expect(testDashboard.duplicateTestDialogData.testToDuplicate).toBe(test);\n    expect(testDashboard.dialog.open).toHaveBeenCalled();\n  });\n\n  it(\"should call ngOnInit()\", () => {\n    spyOn(TestService.prototype, \"getTests\").and.callFake(() => {\n      return observableOf(MockTestData);\n    });\n    spyOn(testDashboard, \"getAllTests\").and.callThrough();\n    testDashboard.ngOnInit();\n    expect(testDashboard.loader).toBe(false);\n    expect(testDashboard.getAllTests).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests-dashboard\\test-dashboard.pipe.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests-dashboard\\tests-dashboard.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests.component.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests.model.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests.module.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests.routing.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Source\\GitHub\\Questy.UI\\app\\tests\\tests.service.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]